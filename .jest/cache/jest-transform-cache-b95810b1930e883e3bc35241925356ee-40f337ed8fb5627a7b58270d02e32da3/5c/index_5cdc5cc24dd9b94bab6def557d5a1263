f7e8058724f7c79c605684dca51a9327
'use strict';

var invariant = require('invariant');

var warnOnce = require('./Libraries/Utilities/warnOnce');

module.exports = {
  get AccessibilityInfo() {
    return require('./Libraries/Components/AccessibilityInfo/AccessibilityInfo').default;
  },

  get ActivityIndicator() {
    return require('./Libraries/Components/ActivityIndicator/ActivityIndicator');
  },

  get Button() {
    return require('./Libraries/Components/Button');
  },

  get DatePickerIOS() {
    warnOnce('DatePickerIOS-merged', 'DatePickerIOS has been merged with DatePickerAndroid and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/datetimepicker' instead of 'react-native'. " + 'See https://github.com/react-native-datetimepicker/datetimepicker');
    return require('./Libraries/Components/DatePicker/DatePickerIOS');
  },

  get DrawerLayoutAndroid() {
    return require('./Libraries/Components/DrawerAndroid/DrawerLayoutAndroid');
  },

  get FlatList() {
    return require('./Libraries/Lists/FlatList');
  },

  get Image() {
    return require('./Libraries/Image/Image');
  },

  get ImageBackground() {
    return require('./Libraries/Image/ImageBackground');
  },

  get InputAccessoryView() {
    return require('./Libraries/Components/TextInput/InputAccessoryView');
  },

  get KeyboardAvoidingView() {
    return require('./Libraries/Components/Keyboard/KeyboardAvoidingView').default;
  },

  get MaskedViewIOS() {
    warnOnce('maskedviewios-moved', 'MaskedViewIOS has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-masked-view/masked-view' instead of 'react-native'. " + 'See https://github.com/react-native-masked-view/masked-view');
    return require('./Libraries/Components/MaskedView/MaskedViewIOS');
  },

  get Modal() {
    return require('./Libraries/Modal/Modal');
  },

  get Pressable() {
    return require('./Libraries/Components/Pressable/Pressable').default;
  },

  get ProgressBarAndroid() {
    warnOnce('progress-bar-android-moved', 'ProgressBarAndroid has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/progress-bar-android' instead of 'react-native'. " + 'See https://github.com/react-native-progress-view/progress-bar-android');
    return require('./Libraries/Components/ProgressBarAndroid/ProgressBarAndroid');
  },

  get ProgressViewIOS() {
    warnOnce('progress-view-ios-moved', 'ProgressViewIOS has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/progress-view' instead of 'react-native'. " + 'See https://github.com/react-native-progress-view/progress-view');
    return require('./Libraries/Components/ProgressViewIOS/ProgressViewIOS');
  },

  get RefreshControl() {
    return require('./Libraries/Components/RefreshControl/RefreshControl');
  },

  get SafeAreaView() {
    return require('./Libraries/Components/SafeAreaView/SafeAreaView').default;
  },

  get ScrollView() {
    return require('./Libraries/Components/ScrollView/ScrollView');
  },

  get SectionList() {
    return require('./Libraries/Lists/SectionList').default;
  },

  get SegmentedControlIOS() {
    warnOnce('segmented-control-ios-moved', 'SegmentedControlIOS has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-segmented-control/segmented-control' instead of 'react-native'. " + 'See https://github.com/react-native-segmented-control/segmented-control');
    return require('./Libraries/Components/SegmentedControlIOS/SegmentedControlIOS');
  },

  get Slider() {
    warnOnce('slider-moved', 'Slider has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/slider' instead of 'react-native'. " + 'See https://github.com/callstack/react-native-slider');
    return require('./Libraries/Components/Slider/Slider');
  },

  get StatusBar() {
    return require('./Libraries/Components/StatusBar/StatusBar');
  },

  get Switch() {
    return require('./Libraries/Components/Switch/Switch').default;
  },

  get Text() {
    return require('./Libraries/Text/Text');
  },

  get TextInput() {
    return require('./Libraries/Components/TextInput/TextInput');
  },

  get Touchable() {
    return require('./Libraries/Components/Touchable/Touchable');
  },

  get TouchableHighlight() {
    return require('./Libraries/Components/Touchable/TouchableHighlight');
  },

  get TouchableNativeFeedback() {
    return require('./Libraries/Components/Touchable/TouchableNativeFeedback');
  },

  get TouchableOpacity() {
    return require('./Libraries/Components/Touchable/TouchableOpacity');
  },

  get TouchableWithoutFeedback() {
    return require('./Libraries/Components/Touchable/TouchableWithoutFeedback');
  },

  get View() {
    return require('./Libraries/Components/View/View');
  },

  get VirtualizedList() {
    return require('./Libraries/Lists/VirtualizedList');
  },

  get VirtualizedSectionList() {
    return require('./Libraries/Lists/VirtualizedSectionList');
  },

  get ActionSheetIOS() {
    return require('./Libraries/ActionSheetIOS/ActionSheetIOS');
  },

  get Alert() {
    return require('./Libraries/Alert/Alert');
  },

  get Animated() {
    return require('./Libraries/Animated/Animated');
  },

  get Appearance() {
    return require('./Libraries/Utilities/Appearance');
  },

  get AppRegistry() {
    return require('./Libraries/ReactNative/AppRegistry');
  },

  get AppState() {
    return require('./Libraries/AppState/AppState');
  },

  get AsyncStorage() {
    warnOnce('async-storage-moved', 'AsyncStorage has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-async-storage/async-storage' instead of 'react-native'. " + 'See https://github.com/react-native-async-storage/async-storage');
    return require('./Libraries/Storage/AsyncStorage');
  },

  get BackHandler() {
    return require('./Libraries/Utilities/BackHandler');
  },

  get Clipboard() {
    warnOnce('clipboard-moved', 'Clipboard has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-clipboard/clipboard' instead of 'react-native'. " + 'See https://github.com/react-native-clipboard/clipboard');
    return require('./Libraries/Components/Clipboard/Clipboard');
  },

  get DeviceInfo() {
    return require('./Libraries/Utilities/DeviceInfo');
  },

  get DevSettings() {
    return require('./Libraries/Utilities/DevSettings');
  },

  get Dimensions() {
    return require('./Libraries/Utilities/Dimensions');
  },

  get Easing() {
    return require('./Libraries/Animated/Easing');
  },

  get findNodeHandle() {
    return require('./Libraries/Renderer/shims/ReactNative').findNodeHandle;
  },

  get I18nManager() {
    return require('./Libraries/ReactNative/I18nManager');
  },

  get ImagePickerIOS() {
    warnOnce('imagePickerIOS-moved', 'ImagePickerIOS has been extracted from react-native core and will be removed in a future release. ' + "Please upgrade to use either '@react-native-community/react-native-image-picker' or 'expo-image-picker'. " + "If you cannot upgrade to a different library, please install the deprecated '@react-native-community/image-picker-ios' package. " + 'See https://github.com/rnc-archive/react-native-image-picker-ios');
    return require('./Libraries/Image/ImagePickerIOS');
  },

  get InteractionManager() {
    return require('./Libraries/Interaction/InteractionManager');
  },

  get Keyboard() {
    return require('./Libraries/Components/Keyboard/Keyboard');
  },

  get LayoutAnimation() {
    return require('./Libraries/LayoutAnimation/LayoutAnimation');
  },

  get Linking() {
    return require('./Libraries/Linking/Linking');
  },

  get LogBox() {
    return require('./Libraries/LogBox/LogBox');
  },

  get NativeDialogManagerAndroid() {
    return require('./Libraries/NativeModules/specs/NativeDialogManagerAndroid').default;
  },

  get NativeEventEmitter() {
    return require('./Libraries/EventEmitter/NativeEventEmitter').default;
  },

  get Networking() {
    return require('./Libraries/Network/RCTNetworking');
  },

  get PanResponder() {
    return require('./Libraries/Interaction/PanResponder');
  },

  get PermissionsAndroid() {
    return require('./Libraries/PermissionsAndroid/PermissionsAndroid');
  },

  get PixelRatio() {
    return require('./Libraries/Utilities/PixelRatio');
  },

  get PushNotificationIOS() {
    warnOnce('pushNotificationIOS-moved', 'PushNotificationIOS has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/push-notification-ios' instead of 'react-native'. " + 'See https://github.com/react-native-push-notification-ios/push-notification-ios');
    return require('./Libraries/PushNotificationIOS/PushNotificationIOS');
  },

  get Settings() {
    return require('./Libraries/Settings/Settings');
  },

  get Share() {
    return require('./Libraries/Share/Share');
  },

  get StyleSheet() {
    return require('./Libraries/StyleSheet/StyleSheet');
  },

  get Systrace() {
    return require('./Libraries/Performance/Systrace');
  },

  get ToastAndroid() {
    return require('./Libraries/Components/ToastAndroid/ToastAndroid');
  },

  get TurboModuleRegistry() {
    return require('./Libraries/TurboModule/TurboModuleRegistry');
  },

  get UIManager() {
    return require('./Libraries/ReactNative/UIManager');
  },

  get unstable_batchedUpdates() {
    return require('./Libraries/Renderer/shims/ReactNative').unstable_batchedUpdates;
  },

  get useColorScheme() {
    return require('./Libraries/Utilities/useColorScheme').default;
  },

  get useWindowDimensions() {
    return require('./Libraries/Utilities/useWindowDimensions').default;
  },

  get UTFSequence() {
    return require('./Libraries/UTFSequence');
  },

  get Vibration() {
    return require('./Libraries/Vibration/Vibration');
  },

  get YellowBox() {
    return require('./Libraries/YellowBox/YellowBoxDeprecated');
  },

  get DeviceEventEmitter() {
    return require('./Libraries/EventEmitter/RCTDeviceEventEmitter').default;
  },

  get DynamicColorIOS() {
    return require('./Libraries/StyleSheet/PlatformColorValueTypesIOS').DynamicColorIOS;
  },

  get NativeAppEventEmitter() {
    return require('./Libraries/EventEmitter/RCTNativeAppEventEmitter');
  },

  get NativeModules() {
    return require('./Libraries/BatchedBridge/NativeModules');
  },

  get Platform() {
    return require('./Libraries/Utilities/Platform');
  },

  get PlatformColor() {
    return require('./Libraries/StyleSheet/PlatformColorValueTypes').PlatformColor;
  },

  get processColor() {
    return require('./Libraries/StyleSheet/processColor');
  },

  get requireNativeComponent() {
    return require('./Libraries/ReactNative/requireNativeComponent');
  },

  get RootTagContext() {
    return require('./Libraries/ReactNative/RootTag').RootTagContext;
  },

  get unstable_enableLogBox() {
    return function () {
      return console.warn('LogBox is enabled by default so there is no need to call unstable_enableLogBox() anymore. This is a no op and will be removed in the next version.');
    };
  },

  get ColorPropType() {
    console.warn('ColorPropType will be removed from React Native. Migrate to ' + "ColorPropType exported from 'deprecated-react-native-prop-types'.");
    return require('deprecated-react-native-prop-types').ColorPropType;
  },

  get EdgeInsetsPropType() {
    console.warn('EdgeInsetsPropType will be removed from React Native. Migrate to ' + "EdgeInsetsPropType exported from 'deprecated-react-native-prop-types'.");
    return require('deprecated-react-native-prop-types').EdgeInsetsPropType;
  },

  get PointPropType() {
    console.warn('PointPropType will be removed from React Native. Migrate to ' + "PointPropType exported from 'deprecated-react-native-prop-types'.");
    return require('deprecated-react-native-prop-types').PointPropType;
  },

  get ViewPropTypes() {
    console.warn('ViewPropTypes will be removed from React Native. Migrate to ' + "ViewPropTypes exported from 'deprecated-react-native-prop-types'.");
    return require('deprecated-react-native-prop-types').ViewPropTypes;
  }

};

if (__DEV__) {
  Object.defineProperty(module.exports, 'ART', {
    configurable: true,
    get: function get() {
      invariant(false, 'ART has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/art' instead of 'react-native'. " + 'See https://github.com/react-native-art/art');
    }
  });
  Object.defineProperty(module.exports, 'ListView', {
    configurable: true,
    get: function get() {
      invariant(false, 'ListView has been removed from React Native. ' + 'See https://fb.me/nolistview for more information or use ' + '`deprecated-react-native-listview`.');
    }
  });
  Object.defineProperty(module.exports, 'SwipeableListView', {
    configurable: true,
    get: function get() {
      invariant(false, 'SwipeableListView has been removed from React Native. ' + 'See https://fb.me/nolistview for more information or use ' + '`deprecated-react-native-swipeable-listview`.');
    }
  });
  Object.defineProperty(module.exports, 'WebView', {
    configurable: true,
    get: function get() {
      invariant(false, 'WebView has been removed from React Native. ' + "It can now be installed and imported from 'react-native-webview' instead of 'react-native'. " + 'See https://github.com/react-native-webview/react-native-webview');
    }
  });
  Object.defineProperty(module.exports, 'NetInfo', {
    configurable: true,
    get: function get() {
      invariant(false, 'NetInfo has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/netinfo' instead of 'react-native'. " + 'See https://github.com/react-native-netinfo/react-native-netinfo');
    }
  });
  Object.defineProperty(module.exports, 'CameraRoll', {
    configurable: true,
    get: function get() {
      invariant(false, 'CameraRoll has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/cameraroll' instead of 'react-native'. " + 'See https://github.com/react-native-cameraroll/react-native-cameraroll');
    }
  });
  Object.defineProperty(module.exports, 'ImageStore', {
    configurable: true,
    get: function get() {
      invariant(false, 'ImageStore has been removed from React Native. ' + 'To get a base64-encoded string from a local image use either of the following third-party libraries:' + "* expo-file-system: `readAsStringAsync(filepath, 'base64')`" + "* react-native-fs: `readFile(filepath, 'base64')`");
    }
  });
  Object.defineProperty(module.exports, 'ImageEditor', {
    configurable: true,
    get: function get() {
      invariant(false, 'ImageEditor has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/image-editor' instead of 'react-native'. " + 'See https://github.com/callstack/react-native-image-editor');
    }
  });
  Object.defineProperty(module.exports, 'TimePickerAndroid', {
    configurable: true,
    get: function get() {
      invariant(false, 'TimePickerAndroid has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/datetimepicker' instead of 'react-native'. " + 'See https://github.com/react-native-datetimepicker/datetimepicker');
    }
  });
  Object.defineProperty(module.exports, 'ToolbarAndroid', {
    configurable: true,
    get: function get() {
      invariant(false, 'ToolbarAndroid has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/toolbar-android' instead of 'react-native'. " + 'See https://github.com/react-native-toolbar-android/toolbar-android');
    }
  });
  Object.defineProperty(module.exports, 'ViewPagerAndroid', {
    configurable: true,
    get: function get() {
      invariant(false, 'ViewPagerAndroid has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/viewpager' instead of 'react-native'. " + 'See https://github.com/callstack/react-native-viewpager');
    }
  });
  Object.defineProperty(module.exports, 'CheckBox', {
    configurable: true,
    get: function get() {
      invariant(false, 'CheckBox has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/checkbox' instead of 'react-native'. " + 'See https://github.com/react-native-checkbox/react-native-checkbox');
    }
  });
  Object.defineProperty(module.exports, 'StatusBarIOS', {
    configurable: true,
    get: function get() {
      invariant(false, 'StatusBarIOS has been removed from React Native. ' + 'Has been merged with StatusBar. ' + 'See https://reactnative.dev/docs/statusbar');
    }
  });
  Object.defineProperty(module.exports, 'PickerIOS', {
    configurable: true,
    get: function get() {
      invariant(false, 'PickerIOS has been removed from React Native. ' + "It can now be installed and imported from '@react-native-picker/picker' instead of 'react-native'. " + 'See https://github.com/react-native-picker/picker');
    }
  });
  Object.defineProperty(module.exports, 'Picker', {
    configurable: true,
    get: function get() {
      invariant(false, 'Picker has been removed from React Native. ' + "It can now be installed and imported from '@react-native-picker/picker' instead of 'react-native'. " + 'See https://github.com/react-native-picker/picker');
    }
  });
  Object.defineProperty(module.exports, 'DatePickerAndroid', {
    configurable: true,
    get: function get() {
      invariant(false, 'DatePickerAndroid has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/datetimepicker' instead of 'react-native'. " + 'See https://github.com/react-native-datetimepicker/datetimepicker');
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJyZXF1aXJlIiwid2Fybk9uY2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiQWNjZXNzaWJpbGl0eUluZm8iLCJkZWZhdWx0IiwiQWN0aXZpdHlJbmRpY2F0b3IiLCJCdXR0b24iLCJEYXRlUGlja2VySU9TIiwiRHJhd2VyTGF5b3V0QW5kcm9pZCIsIkZsYXRMaXN0IiwiSW1hZ2UiLCJJbWFnZUJhY2tncm91bmQiLCJJbnB1dEFjY2Vzc29yeVZpZXciLCJLZXlib2FyZEF2b2lkaW5nVmlldyIsIk1hc2tlZFZpZXdJT1MiLCJNb2RhbCIsIlByZXNzYWJsZSIsIlByb2dyZXNzQmFyQW5kcm9pZCIsIlByb2dyZXNzVmlld0lPUyIsIlJlZnJlc2hDb250cm9sIiwiU2FmZUFyZWFWaWV3IiwiU2Nyb2xsVmlldyIsIlNlY3Rpb25MaXN0IiwiU2VnbWVudGVkQ29udHJvbElPUyIsIlNsaWRlciIsIlN0YXR1c0JhciIsIlN3aXRjaCIsIlRleHQiLCJUZXh0SW5wdXQiLCJUb3VjaGFibGUiLCJUb3VjaGFibGVIaWdobGlnaHQiLCJUb3VjaGFibGVOYXRpdmVGZWVkYmFjayIsIlRvdWNoYWJsZU9wYWNpdHkiLCJUb3VjaGFibGVXaXRob3V0RmVlZGJhY2siLCJWaWV3IiwiVmlydHVhbGl6ZWRMaXN0IiwiVmlydHVhbGl6ZWRTZWN0aW9uTGlzdCIsIkFjdGlvblNoZWV0SU9TIiwiQWxlcnQiLCJBbmltYXRlZCIsIkFwcGVhcmFuY2UiLCJBcHBSZWdpc3RyeSIsIkFwcFN0YXRlIiwiQXN5bmNTdG9yYWdlIiwiQmFja0hhbmRsZXIiLCJDbGlwYm9hcmQiLCJEZXZpY2VJbmZvIiwiRGV2U2V0dGluZ3MiLCJEaW1lbnNpb25zIiwiRWFzaW5nIiwiZmluZE5vZGVIYW5kbGUiLCJJMThuTWFuYWdlciIsIkltYWdlUGlja2VySU9TIiwiSW50ZXJhY3Rpb25NYW5hZ2VyIiwiS2V5Ym9hcmQiLCJMYXlvdXRBbmltYXRpb24iLCJMaW5raW5nIiwiTG9nQm94IiwiTmF0aXZlRGlhbG9nTWFuYWdlckFuZHJvaWQiLCJOYXRpdmVFdmVudEVtaXR0ZXIiLCJOZXR3b3JraW5nIiwiUGFuUmVzcG9uZGVyIiwiUGVybWlzc2lvbnNBbmRyb2lkIiwiUGl4ZWxSYXRpbyIsIlB1c2hOb3RpZmljYXRpb25JT1MiLCJTZXR0aW5ncyIsIlNoYXJlIiwiU3R5bGVTaGVldCIsIlN5c3RyYWNlIiwiVG9hc3RBbmRyb2lkIiwiVHVyYm9Nb2R1bGVSZWdpc3RyeSIsIlVJTWFuYWdlciIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidXNlQ29sb3JTY2hlbWUiLCJ1c2VXaW5kb3dEaW1lbnNpb25zIiwiVVRGU2VxdWVuY2UiLCJWaWJyYXRpb24iLCJZZWxsb3dCb3giLCJEZXZpY2VFdmVudEVtaXR0ZXIiLCJEeW5hbWljQ29sb3JJT1MiLCJOYXRpdmVBcHBFdmVudEVtaXR0ZXIiLCJOYXRpdmVNb2R1bGVzIiwiUGxhdGZvcm0iLCJQbGF0Zm9ybUNvbG9yIiwicHJvY2Vzc0NvbG9yIiwicmVxdWlyZU5hdGl2ZUNvbXBvbmVudCIsIlJvb3RUYWdDb250ZXh0IiwidW5zdGFibGVfZW5hYmxlTG9nQm94IiwiY29uc29sZSIsIndhcm4iLCJDb2xvclByb3BUeXBlIiwiRWRnZUluc2V0c1Byb3BUeXBlIiwiUG9pbnRQcm9wVHlwZSIsIlZpZXdQcm9wVHlwZXMiLCJfX0RFVl9fIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJnZXQiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB0eXBlb2YgQWNjZXNzaWJpbGl0eUluZm8gZnJvbSAnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9BY2Nlc3NpYmlsaXR5SW5mby9BY2Nlc3NpYmlsaXR5SW5mbyc7XG5pbXBvcnQgdHlwZW9mIEFjdGl2aXR5SW5kaWNhdG9yIGZyb20gJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvQWN0aXZpdHlJbmRpY2F0b3IvQWN0aXZpdHlJbmRpY2F0b3InO1xuaW1wb3J0IHR5cGVvZiBCdXR0b24gZnJvbSAnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9CdXR0b24nO1xuaW1wb3J0IHR5cGVvZiBEYXRlUGlja2VySU9TIGZyb20gJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvRGF0ZVBpY2tlci9EYXRlUGlja2VySU9TJztcbmltcG9ydCB0eXBlb2YgRHJhd2VyTGF5b3V0QW5kcm9pZCBmcm9tICcuL0xpYnJhcmllcy9Db21wb25lbnRzL0RyYXdlckFuZHJvaWQvRHJhd2VyTGF5b3V0QW5kcm9pZCc7XG5pbXBvcnQgdHlwZW9mIEZsYXRMaXN0IGZyb20gJy4vTGlicmFyaWVzL0xpc3RzL0ZsYXRMaXN0JztcbmltcG9ydCB0eXBlb2YgSW1hZ2UgZnJvbSAnLi9MaWJyYXJpZXMvSW1hZ2UvSW1hZ2UnO1xuaW1wb3J0IHR5cGVvZiBJbWFnZUJhY2tncm91bmQgZnJvbSAnLi9MaWJyYXJpZXMvSW1hZ2UvSW1hZ2VCYWNrZ3JvdW5kJztcbmltcG9ydCB0eXBlb2YgSW5wdXRBY2Nlc3NvcnlWaWV3IGZyb20gJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvVGV4dElucHV0L0lucHV0QWNjZXNzb3J5Vmlldyc7XG5pbXBvcnQgdHlwZW9mIEtleWJvYXJkQXZvaWRpbmdWaWV3IGZyb20gJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvS2V5Ym9hcmQvS2V5Ym9hcmRBdm9pZGluZ1ZpZXcnO1xuaW1wb3J0IHR5cGVvZiBNYXNrZWRWaWV3SU9TIGZyb20gJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvTWFza2VkVmlldy9NYXNrZWRWaWV3SU9TJztcbmltcG9ydCB0eXBlb2YgTW9kYWwgZnJvbSAnLi9MaWJyYXJpZXMvTW9kYWwvTW9kYWwnO1xuaW1wb3J0IHR5cGVvZiBQcmVzc2FibGUgZnJvbSAnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9QcmVzc2FibGUvUHJlc3NhYmxlJztcbmltcG9ydCB0eXBlb2YgUHJvZ3Jlc3NCYXJBbmRyb2lkIGZyb20gJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvUHJvZ3Jlc3NCYXJBbmRyb2lkL1Byb2dyZXNzQmFyQW5kcm9pZCc7XG5pbXBvcnQgdHlwZW9mIFByb2dyZXNzVmlld0lPUyBmcm9tICcuL0xpYnJhcmllcy9Db21wb25lbnRzL1Byb2dyZXNzVmlld0lPUy9Qcm9ncmVzc1ZpZXdJT1MnO1xuaW1wb3J0IHR5cGVvZiBSZWZyZXNoQ29udHJvbCBmcm9tICcuL0xpYnJhcmllcy9Db21wb25lbnRzL1JlZnJlc2hDb250cm9sL1JlZnJlc2hDb250cm9sJztcbmltcG9ydCB0eXBlb2YgU2FmZUFyZWFWaWV3IGZyb20gJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvU2FmZUFyZWFWaWV3L1NhZmVBcmVhVmlldyc7XG5pbXBvcnQgdHlwZW9mIFNjcm9sbFZpZXcgZnJvbSAnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9TY3JvbGxWaWV3L1Njcm9sbFZpZXcnO1xuaW1wb3J0IHR5cGVvZiBTZWN0aW9uTGlzdCBmcm9tICcuL0xpYnJhcmllcy9MaXN0cy9TZWN0aW9uTGlzdCc7XG5pbXBvcnQgdHlwZW9mIFNlZ21lbnRlZENvbnRyb2xJT1MgZnJvbSAnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9TZWdtZW50ZWRDb250cm9sSU9TL1NlZ21lbnRlZENvbnRyb2xJT1MnO1xuaW1wb3J0IHR5cGVvZiBTbGlkZXIgZnJvbSAnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9TbGlkZXIvU2xpZGVyJztcbmltcG9ydCB0eXBlb2YgU3RhdHVzQmFyIGZyb20gJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvU3RhdHVzQmFyL1N0YXR1c0Jhcic7XG5pbXBvcnQgdHlwZW9mIFN3aXRjaCBmcm9tICcuL0xpYnJhcmllcy9Db21wb25lbnRzL1N3aXRjaC9Td2l0Y2gnO1xuaW1wb3J0IHR5cGVvZiBUZXh0IGZyb20gJy4vTGlicmFyaWVzL1RleHQvVGV4dCc7XG5pbXBvcnQgdHlwZW9mIFRleHRJbnB1dCBmcm9tICcuL0xpYnJhcmllcy9Db21wb25lbnRzL1RleHRJbnB1dC9UZXh0SW5wdXQnO1xuaW1wb3J0IHR5cGVvZiBUb3VjaGFibGUgZnJvbSAnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9Ub3VjaGFibGUvVG91Y2hhYmxlJztcbmltcG9ydCB0eXBlb2YgVG91Y2hhYmxlSGlnaGxpZ2h0IGZyb20gJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvVG91Y2hhYmxlL1RvdWNoYWJsZUhpZ2hsaWdodCc7XG5pbXBvcnQgdHlwZW9mIFRvdWNoYWJsZU5hdGl2ZUZlZWRiYWNrIGZyb20gJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvVG91Y2hhYmxlL1RvdWNoYWJsZU5hdGl2ZUZlZWRiYWNrJztcbmltcG9ydCB0eXBlb2YgVG91Y2hhYmxlT3BhY2l0eSBmcm9tICcuL0xpYnJhcmllcy9Db21wb25lbnRzL1RvdWNoYWJsZS9Ub3VjaGFibGVPcGFjaXR5JztcbmltcG9ydCB0eXBlb2YgVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrIGZyb20gJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvVG91Y2hhYmxlL1RvdWNoYWJsZVdpdGhvdXRGZWVkYmFjayc7XG5pbXBvcnQgdHlwZW9mIFZpZXcgZnJvbSAnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9WaWV3L1ZpZXcnO1xuaW1wb3J0IHR5cGVvZiBWaXJ0dWFsaXplZExpc3QgZnJvbSAnLi9MaWJyYXJpZXMvTGlzdHMvVmlydHVhbGl6ZWRMaXN0JztcbmltcG9ydCB0eXBlb2YgVmlydHVhbGl6ZWRTZWN0aW9uTGlzdCBmcm9tICcuL0xpYnJhcmllcy9MaXN0cy9WaXJ0dWFsaXplZFNlY3Rpb25MaXN0JztcblxuLy8gQVBJc1xuaW1wb3J0IHR5cGVvZiBBY3Rpb25TaGVldElPUyBmcm9tICcuL0xpYnJhcmllcy9BY3Rpb25TaGVldElPUy9BY3Rpb25TaGVldElPUyc7XG5pbXBvcnQgdHlwZW9mIEFsZXJ0IGZyb20gJy4vTGlicmFyaWVzL0FsZXJ0L0FsZXJ0JztcbmltcG9ydCB0eXBlb2YgQW5pbWF0ZWQgZnJvbSAnLi9MaWJyYXJpZXMvQW5pbWF0ZWQvQW5pbWF0ZWQnO1xuaW1wb3J0IHR5cGVvZiBBcHBlYXJhbmNlIGZyb20gJy4vTGlicmFyaWVzL1V0aWxpdGllcy9BcHBlYXJhbmNlJztcbmltcG9ydCB0eXBlb2YgQXBwUmVnaXN0cnkgZnJvbSAnLi9MaWJyYXJpZXMvUmVhY3ROYXRpdmUvQXBwUmVnaXN0cnknO1xuaW1wb3J0IHR5cGVvZiBBcHBTdGF0ZSBmcm9tICcuL0xpYnJhcmllcy9BcHBTdGF0ZS9BcHBTdGF0ZSc7XG5pbXBvcnQgdHlwZW9mIEFzeW5jU3RvcmFnZSBmcm9tICcuL0xpYnJhcmllcy9TdG9yYWdlL0FzeW5jU3RvcmFnZSc7XG5pbXBvcnQgdHlwZW9mIEJhY2tIYW5kbGVyIGZyb20gJy4vTGlicmFyaWVzL1V0aWxpdGllcy9CYWNrSGFuZGxlcic7XG5pbXBvcnQgdHlwZW9mIENsaXBib2FyZCBmcm9tICcuL0xpYnJhcmllcy9Db21wb25lbnRzL0NsaXBib2FyZC9DbGlwYm9hcmQnO1xuaW1wb3J0IHR5cGVvZiBEZXZpY2VJbmZvIGZyb20gJy4vTGlicmFyaWVzL1V0aWxpdGllcy9EZXZpY2VJbmZvJztcbmltcG9ydCB0eXBlb2YgRGV2U2V0dGluZ3MgZnJvbSAnLi9MaWJyYXJpZXMvVXRpbGl0aWVzL0RldlNldHRpbmdzJztcbmltcG9ydCB0eXBlb2YgRGltZW5zaW9ucyBmcm9tICcuL0xpYnJhcmllcy9VdGlsaXRpZXMvRGltZW5zaW9ucyc7XG5pbXBvcnQgdHlwZW9mIEVhc2luZyBmcm9tICcuL0xpYnJhcmllcy9BbmltYXRlZC9FYXNpbmcnO1xuaW1wb3J0IHR5cGVvZiBSZWFjdE5hdGl2ZSBmcm9tICcuL0xpYnJhcmllcy9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZSc7XG5pbXBvcnQgdHlwZW9mIEkxOG5NYW5hZ2VyIGZyb20gJy4vTGlicmFyaWVzL1JlYWN0TmF0aXZlL0kxOG5NYW5hZ2VyJztcbmltcG9ydCB0eXBlb2YgSW1hZ2VQaWNrZXJJT1MgZnJvbSAnLi9MaWJyYXJpZXMvSW1hZ2UvSW1hZ2VQaWNrZXJJT1MnO1xuaW1wb3J0IHR5cGVvZiBJbnRlcmFjdGlvbk1hbmFnZXIgZnJvbSAnLi9MaWJyYXJpZXMvSW50ZXJhY3Rpb24vSW50ZXJhY3Rpb25NYW5hZ2VyJztcbmltcG9ydCB0eXBlb2YgS2V5Ym9hcmQgZnJvbSAnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9LZXlib2FyZC9LZXlib2FyZCc7XG5pbXBvcnQgdHlwZW9mIExheW91dEFuaW1hdGlvbiBmcm9tICcuL0xpYnJhcmllcy9MYXlvdXRBbmltYXRpb24vTGF5b3V0QW5pbWF0aW9uJztcbmltcG9ydCB0eXBlb2YgTGlua2luZyBmcm9tICcuL0xpYnJhcmllcy9MaW5raW5nL0xpbmtpbmcnO1xuaW1wb3J0IHR5cGVvZiBMb2dCb3ggZnJvbSAnLi9MaWJyYXJpZXMvTG9nQm94L0xvZ0JveCc7XG5pbXBvcnQgdHlwZW9mIE5hdGl2ZURpYWxvZ01hbmFnZXJBbmRyb2lkIGZyb20gJy4vTGlicmFyaWVzL05hdGl2ZU1vZHVsZXMvc3BlY3MvTmF0aXZlRGlhbG9nTWFuYWdlckFuZHJvaWQnO1xuaW1wb3J0IHR5cGVvZiBOYXRpdmVFdmVudEVtaXR0ZXIgZnJvbSAnLi9MaWJyYXJpZXMvRXZlbnRFbWl0dGVyL05hdGl2ZUV2ZW50RW1pdHRlcic7XG5pbXBvcnQgdHlwZW9mIE5ldHdvcmtpbmcgZnJvbSAnLi9MaWJyYXJpZXMvTmV0d29yay9SQ1ROZXR3b3JraW5nJztcbmltcG9ydCB0eXBlb2YgUGFuUmVzcG9uZGVyIGZyb20gJy4vTGlicmFyaWVzL0ludGVyYWN0aW9uL1BhblJlc3BvbmRlcic7XG5pbXBvcnQgdHlwZW9mIFBlcm1pc3Npb25zQW5kcm9pZCBmcm9tICcuL0xpYnJhcmllcy9QZXJtaXNzaW9uc0FuZHJvaWQvUGVybWlzc2lvbnNBbmRyb2lkJztcbmltcG9ydCB0eXBlb2YgUGl4ZWxSYXRpbyBmcm9tICcuL0xpYnJhcmllcy9VdGlsaXRpZXMvUGl4ZWxSYXRpbyc7XG5pbXBvcnQgdHlwZW9mIFB1c2hOb3RpZmljYXRpb25JT1MgZnJvbSAnLi9MaWJyYXJpZXMvUHVzaE5vdGlmaWNhdGlvbklPUy9QdXNoTm90aWZpY2F0aW9uSU9TJztcbmltcG9ydCB0eXBlb2YgU2V0dGluZ3MgZnJvbSAnLi9MaWJyYXJpZXMvU2V0dGluZ3MvU2V0dGluZ3MnO1xuaW1wb3J0IHR5cGVvZiBTaGFyZSBmcm9tICcuL0xpYnJhcmllcy9TaGFyZS9TaGFyZSc7XG5pbXBvcnQgdHlwZW9mIFN0eWxlU2hlZXQgZnJvbSAnLi9MaWJyYXJpZXMvU3R5bGVTaGVldC9TdHlsZVNoZWV0JztcbmltcG9ydCB0eXBlb2YgU3lzdHJhY2UgZnJvbSAnLi9MaWJyYXJpZXMvUGVyZm9ybWFuY2UvU3lzdHJhY2UnO1xuaW1wb3J0IHR5cGVvZiBUb2FzdEFuZHJvaWQgZnJvbSAnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9Ub2FzdEFuZHJvaWQvVG9hc3RBbmRyb2lkJztcbmltcG9ydCB0eXBlb2YgKiBhcyBUdXJib01vZHVsZVJlZ2lzdHJ5IGZyb20gJy4vTGlicmFyaWVzL1R1cmJvTW9kdWxlL1R1cmJvTW9kdWxlUmVnaXN0cnknO1xuaW1wb3J0IHR5cGVvZiBVSU1hbmFnZXIgZnJvbSAnLi9MaWJyYXJpZXMvUmVhY3ROYXRpdmUvVUlNYW5hZ2VyJztcbmltcG9ydCB0eXBlb2YgdXNlQ29sb3JTY2hlbWUgZnJvbSAnLi9MaWJyYXJpZXMvVXRpbGl0aWVzL3VzZUNvbG9yU2NoZW1lJztcbmltcG9ydCB0eXBlb2YgdXNlV2luZG93RGltZW5zaW9ucyBmcm9tICcuL0xpYnJhcmllcy9VdGlsaXRpZXMvdXNlV2luZG93RGltZW5zaW9ucyc7XG5pbXBvcnQgdHlwZW9mIFVURlNlcXVlbmNlIGZyb20gJy4vTGlicmFyaWVzL1VURlNlcXVlbmNlJztcbmltcG9ydCB0eXBlb2YgVmlicmF0aW9uIGZyb20gJy4vTGlicmFyaWVzL1ZpYnJhdGlvbi9WaWJyYXRpb24nO1xuaW1wb3J0IHR5cGVvZiBZZWxsb3dCb3ggZnJvbSAnLi9MaWJyYXJpZXMvWWVsbG93Qm94L1llbGxvd0JveERlcHJlY2F0ZWQnO1xuXG4vLyBQbHVnaW5zXG5pbXBvcnQgdHlwZW9mIHtEeW5hbWljQ29sb3JJT1N9IGZyb20gJy4vTGlicmFyaWVzL1N0eWxlU2hlZXQvUGxhdGZvcm1Db2xvclZhbHVlVHlwZXNJT1MnO1xuaW1wb3J0IHR5cGVvZiBOYXRpdmVNb2R1bGVzIGZyb20gJy4vTGlicmFyaWVzL0JhdGNoZWRCcmlkZ2UvTmF0aXZlTW9kdWxlcyc7XG5pbXBvcnQgdHlwZW9mIFBsYXRmb3JtIGZyb20gJy4vTGlicmFyaWVzL1V0aWxpdGllcy9QbGF0Zm9ybSc7XG5pbXBvcnQgdHlwZW9mIHtQbGF0Zm9ybUNvbG9yfSBmcm9tICcuL0xpYnJhcmllcy9TdHlsZVNoZWV0L1BsYXRmb3JtQ29sb3JWYWx1ZVR5cGVzJztcbmltcG9ydCB0eXBlb2YgcHJvY2Vzc0NvbG9yIGZyb20gJy4vTGlicmFyaWVzL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJztcbmltcG9ydCB0eXBlb2YgUkNURGV2aWNlRXZlbnRFbWl0dGVyIGZyb20gJy4vTGlicmFyaWVzL0V2ZW50RW1pdHRlci9SQ1REZXZpY2VFdmVudEVtaXR0ZXInO1xuaW1wb3J0IHR5cGVvZiBSQ1ROYXRpdmVBcHBFdmVudEVtaXR0ZXIgZnJvbSAnLi9MaWJyYXJpZXMvRXZlbnRFbWl0dGVyL1JDVE5hdGl2ZUFwcEV2ZW50RW1pdHRlcic7XG5pbXBvcnQgdHlwZW9mIHtSb290VGFnQ29udGV4dH0gZnJvbSAnLi9MaWJyYXJpZXMvUmVhY3ROYXRpdmUvUm9vdFRhZyc7XG5cbmltcG9ydCB0eXBlIHtIb3N0Q29tcG9uZW50IGFzIF9Ib3N0Q29tcG9uZW50SW50ZXJuYWx9IGZyb20gJy4vTGlicmFyaWVzL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVHlwZXMnO1xuXG5leHBvcnQgdHlwZSBIb3N0Q29tcG9uZW50PFQ+ID0gX0hvc3RDb21wb25lbnRJbnRlcm5hbDxUPjtcblxuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5jb25zdCB3YXJuT25jZSA9IHJlcXVpcmUoJy4vTGlicmFyaWVzL1V0aWxpdGllcy93YXJuT25jZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gQ29tcG9uZW50c1xuICBnZXQgQWNjZXNzaWJpbGl0eUluZm8oKTogQWNjZXNzaWJpbGl0eUluZm8ge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9Db21wb25lbnRzL0FjY2Vzc2liaWxpdHlJbmZvL0FjY2Vzc2liaWxpdHlJbmZvJylcbiAgICAgIC5kZWZhdWx0O1xuICB9LFxuICBnZXQgQWN0aXZpdHlJbmRpY2F0b3IoKTogQWN0aXZpdHlJbmRpY2F0b3Ige1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9Db21wb25lbnRzL0FjdGl2aXR5SW5kaWNhdG9yL0FjdGl2aXR5SW5kaWNhdG9yJyk7XG4gIH0sXG4gIGdldCBCdXR0b24oKTogQnV0dG9uIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9CdXR0b24nKTtcbiAgfSxcbiAgLy8gJEZsb3dGaXhNZVt2YWx1ZS1hcy10eXBlXVxuICBnZXQgRGF0ZVBpY2tlcklPUygpOiBEYXRlUGlja2VySU9TIHtcbiAgICB3YXJuT25jZShcbiAgICAgICdEYXRlUGlja2VySU9TLW1lcmdlZCcsXG4gICAgICAnRGF0ZVBpY2tlcklPUyBoYXMgYmVlbiBtZXJnZWQgd2l0aCBEYXRlUGlja2VyQW5kcm9pZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuICcgK1xuICAgICAgICBcIkl0IGNhbiBub3cgYmUgaW5zdGFsbGVkIGFuZCBpbXBvcnRlZCBmcm9tICdAcmVhY3QtbmF0aXZlLWNvbW11bml0eS9kYXRldGltZXBpY2tlcicgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1uYXRpdmUtZGF0ZXRpbWVwaWNrZXIvZGF0ZXRpbWVwaWNrZXInLFxuICAgICk7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvRGF0ZVBpY2tlci9EYXRlUGlja2VySU9TJyk7XG4gIH0sXG4gIC8vICRGbG93Rml4TWVbdmFsdWUtYXMtdHlwZV1cbiAgZ2V0IERyYXdlckxheW91dEFuZHJvaWQoKTogRHJhd2VyTGF5b3V0QW5kcm9pZCB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvRHJhd2VyQW5kcm9pZC9EcmF3ZXJMYXlvdXRBbmRyb2lkJyk7XG4gIH0sXG4gIGdldCBGbGF0TGlzdCgpOiBGbGF0TGlzdCB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0xpc3RzL0ZsYXRMaXN0Jyk7XG4gIH0sXG4gIGdldCBJbWFnZSgpOiBJbWFnZSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0ltYWdlL0ltYWdlJyk7XG4gIH0sXG4gIGdldCBJbWFnZUJhY2tncm91bmQoKTogSW1hZ2VCYWNrZ3JvdW5kIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvSW1hZ2UvSW1hZ2VCYWNrZ3JvdW5kJyk7XG4gIH0sXG4gIGdldCBJbnB1dEFjY2Vzc29yeVZpZXcoKTogSW5wdXRBY2Nlc3NvcnlWaWV3IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9UZXh0SW5wdXQvSW5wdXRBY2Nlc3NvcnlWaWV3Jyk7XG4gIH0sXG4gIGdldCBLZXlib2FyZEF2b2lkaW5nVmlldygpOiBLZXlib2FyZEF2b2lkaW5nVmlldyB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvS2V5Ym9hcmQvS2V5Ym9hcmRBdm9pZGluZ1ZpZXcnKVxuICAgICAgLmRlZmF1bHQ7XG4gIH0sXG4gIGdldCBNYXNrZWRWaWV3SU9TKCk6IE1hc2tlZFZpZXdJT1Mge1xuICAgIHdhcm5PbmNlKFxuICAgICAgJ21hc2tlZHZpZXdpb3MtbW92ZWQnLFxuICAgICAgJ01hc2tlZFZpZXdJT1MgaGFzIGJlZW4gZXh0cmFjdGVkIGZyb20gcmVhY3QtbmF0aXZlIGNvcmUgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLiAnICtcbiAgICAgICAgXCJJdCBjYW4gbm93IGJlIGluc3RhbGxlZCBhbmQgaW1wb3J0ZWQgZnJvbSAnQHJlYWN0LW5hdGl2ZS1tYXNrZWQtdmlldy9tYXNrZWQtdmlldycgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1uYXRpdmUtbWFza2VkLXZpZXcvbWFza2VkLXZpZXcnLFxuICAgICk7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvTWFza2VkVmlldy9NYXNrZWRWaWV3SU9TJyk7XG4gIH0sXG4gIGdldCBNb2RhbCgpOiBNb2RhbCB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL01vZGFsL01vZGFsJyk7XG4gIH0sXG4gIGdldCBQcmVzc2FibGUoKTogUHJlc3NhYmxlIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9QcmVzc2FibGUvUHJlc3NhYmxlJykuZGVmYXVsdDtcbiAgfSxcbiAgLy8gJEZsb3dGaXhNZVt2YWx1ZS1hcy10eXBlXVxuICBnZXQgUHJvZ3Jlc3NCYXJBbmRyb2lkKCk6IFByb2dyZXNzQmFyQW5kcm9pZCB7XG4gICAgd2Fybk9uY2UoXG4gICAgICAncHJvZ3Jlc3MtYmFyLWFuZHJvaWQtbW92ZWQnLFxuICAgICAgJ1Byb2dyZXNzQmFyQW5kcm9pZCBoYXMgYmVlbiBleHRyYWN0ZWQgZnJvbSByZWFjdC1uYXRpdmUgY29yZSBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuICcgK1xuICAgICAgICBcIkl0IGNhbiBub3cgYmUgaW5zdGFsbGVkIGFuZCBpbXBvcnRlZCBmcm9tICdAcmVhY3QtbmF0aXZlLWNvbW11bml0eS9wcm9ncmVzcy1iYXItYW5kcm9pZCcgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1uYXRpdmUtcHJvZ3Jlc3Mtdmlldy9wcm9ncmVzcy1iYXItYW5kcm9pZCcsXG4gICAgKTtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9Qcm9ncmVzc0JhckFuZHJvaWQvUHJvZ3Jlc3NCYXJBbmRyb2lkJyk7XG4gIH0sXG4gIC8vICRGbG93Rml4TWVbdmFsdWUtYXMtdHlwZV1cbiAgZ2V0IFByb2dyZXNzVmlld0lPUygpOiBQcm9ncmVzc1ZpZXdJT1Mge1xuICAgIHdhcm5PbmNlKFxuICAgICAgJ3Byb2dyZXNzLXZpZXctaW9zLW1vdmVkJyxcbiAgICAgICdQcm9ncmVzc1ZpZXdJT1MgaGFzIGJlZW4gZXh0cmFjdGVkIGZyb20gcmVhY3QtbmF0aXZlIGNvcmUgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLiAnICtcbiAgICAgICAgXCJJdCBjYW4gbm93IGJlIGluc3RhbGxlZCBhbmQgaW1wb3J0ZWQgZnJvbSAnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcHJvZ3Jlc3MtdmlldycgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1uYXRpdmUtcHJvZ3Jlc3Mtdmlldy9wcm9ncmVzcy12aWV3JyxcbiAgICApO1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9Db21wb25lbnRzL1Byb2dyZXNzVmlld0lPUy9Qcm9ncmVzc1ZpZXdJT1MnKTtcbiAgfSxcbiAgZ2V0IFJlZnJlc2hDb250cm9sKCk6IFJlZnJlc2hDb250cm9sIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9SZWZyZXNoQ29udHJvbC9SZWZyZXNoQ29udHJvbCcpO1xuICB9LFxuICBnZXQgU2FmZUFyZWFWaWV3KCk6IFNhZmVBcmVhVmlldyB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvU2FmZUFyZWFWaWV3L1NhZmVBcmVhVmlldycpLmRlZmF1bHQ7XG4gIH0sXG4gIGdldCBTY3JvbGxWaWV3KCk6IFNjcm9sbFZpZXcge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9Db21wb25lbnRzL1Njcm9sbFZpZXcvU2Nyb2xsVmlldycpO1xuICB9LFxuICBnZXQgU2VjdGlvbkxpc3QoKTogU2VjdGlvbkxpc3Qge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9MaXN0cy9TZWN0aW9uTGlzdCcpLmRlZmF1bHQ7XG4gIH0sXG4gIC8vICRGbG93Rml4TWVbdmFsdWUtYXMtdHlwZV1cbiAgZ2V0IFNlZ21lbnRlZENvbnRyb2xJT1MoKTogU2VnbWVudGVkQ29udHJvbElPUyB7XG4gICAgd2Fybk9uY2UoXG4gICAgICAnc2VnbWVudGVkLWNvbnRyb2wtaW9zLW1vdmVkJyxcbiAgICAgICdTZWdtZW50ZWRDb250cm9sSU9TIGhhcyBiZWVuIGV4dHJhY3RlZCBmcm9tIHJlYWN0LW5hdGl2ZSBjb3JlIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS4gJyArXG4gICAgICAgIFwiSXQgY2FuIG5vdyBiZSBpbnN0YWxsZWQgYW5kIGltcG9ydGVkIGZyb20gJ0ByZWFjdC1uYXRpdmUtc2VnbWVudGVkLWNvbnRyb2wvc2VnbWVudGVkLWNvbnRyb2wnIGluc3RlYWQgb2YgJ3JlYWN0LW5hdGl2ZScuIFwiICtcbiAgICAgICAgJ1NlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtbmF0aXZlLXNlZ21lbnRlZC1jb250cm9sL3NlZ21lbnRlZC1jb250cm9sJyxcbiAgICApO1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9Db21wb25lbnRzL1NlZ21lbnRlZENvbnRyb2xJT1MvU2VnbWVudGVkQ29udHJvbElPUycpO1xuICB9LFxuICBnZXQgU2xpZGVyKCk6IFNsaWRlciB7XG4gICAgd2Fybk9uY2UoXG4gICAgICAnc2xpZGVyLW1vdmVkJyxcbiAgICAgICdTbGlkZXIgaGFzIGJlZW4gZXh0cmFjdGVkIGZyb20gcmVhY3QtbmF0aXZlIGNvcmUgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLiAnICtcbiAgICAgICAgXCJJdCBjYW4gbm93IGJlIGluc3RhbGxlZCBhbmQgaW1wb3J0ZWQgZnJvbSAnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvc2xpZGVyJyBpbnN0ZWFkIG9mICdyZWFjdC1uYXRpdmUnLiBcIiArXG4gICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL2NhbGxzdGFjay9yZWFjdC1uYXRpdmUtc2xpZGVyJyxcbiAgICApO1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9Db21wb25lbnRzL1NsaWRlci9TbGlkZXInKTtcbiAgfSxcbiAgZ2V0IFN0YXR1c0JhcigpOiBTdGF0dXNCYXIge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9Db21wb25lbnRzL1N0YXR1c0Jhci9TdGF0dXNCYXInKTtcbiAgfSxcbiAgZ2V0IFN3aXRjaCgpOiBTd2l0Y2gge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9Db21wb25lbnRzL1N3aXRjaC9Td2l0Y2gnKS5kZWZhdWx0O1xuICB9LFxuICBnZXQgVGV4dCgpOiBUZXh0IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvVGV4dC9UZXh0Jyk7XG4gIH0sXG4gIGdldCBUZXh0SW5wdXQoKTogVGV4dElucHV0IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9UZXh0SW5wdXQvVGV4dElucHV0Jyk7XG4gIH0sXG4gIGdldCBUb3VjaGFibGUoKTogVG91Y2hhYmxlIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9Ub3VjaGFibGUvVG91Y2hhYmxlJyk7XG4gIH0sXG4gIGdldCBUb3VjaGFibGVIaWdobGlnaHQoKTogVG91Y2hhYmxlSGlnaGxpZ2h0IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9Ub3VjaGFibGUvVG91Y2hhYmxlSGlnaGxpZ2h0Jyk7XG4gIH0sXG4gIGdldCBUb3VjaGFibGVOYXRpdmVGZWVkYmFjaygpOiBUb3VjaGFibGVOYXRpdmVGZWVkYmFjayB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvVG91Y2hhYmxlL1RvdWNoYWJsZU5hdGl2ZUZlZWRiYWNrJyk7XG4gIH0sXG4gIGdldCBUb3VjaGFibGVPcGFjaXR5KCk6IFRvdWNoYWJsZU9wYWNpdHkge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9Db21wb25lbnRzL1RvdWNoYWJsZS9Ub3VjaGFibGVPcGFjaXR5Jyk7XG4gIH0sXG4gIGdldCBUb3VjaGFibGVXaXRob3V0RmVlZGJhY2soKTogVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9Ub3VjaGFibGUvVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrJyk7XG4gIH0sXG4gIGdldCBWaWV3KCk6IFZpZXcge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9Db21wb25lbnRzL1ZpZXcvVmlldycpO1xuICB9LFxuICBnZXQgVmlydHVhbGl6ZWRMaXN0KCk6IFZpcnR1YWxpemVkTGlzdCB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0xpc3RzL1ZpcnR1YWxpemVkTGlzdCcpO1xuICB9LFxuICBnZXQgVmlydHVhbGl6ZWRTZWN0aW9uTGlzdCgpOiBWaXJ0dWFsaXplZFNlY3Rpb25MaXN0IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvTGlzdHMvVmlydHVhbGl6ZWRTZWN0aW9uTGlzdCcpO1xuICB9LFxuXG4gIC8vIEFQSXNcbiAgZ2V0IEFjdGlvblNoZWV0SU9TKCk6IEFjdGlvblNoZWV0SU9TIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQWN0aW9uU2hlZXRJT1MvQWN0aW9uU2hlZXRJT1MnKTtcbiAgfSxcbiAgZ2V0IEFsZXJ0KCk6IEFsZXJ0IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQWxlcnQvQWxlcnQnKTtcbiAgfSxcbiAgZ2V0IEFuaW1hdGVkKCk6IEFuaW1hdGVkIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQW5pbWF0ZWQvQW5pbWF0ZWQnKTtcbiAgfSxcbiAgZ2V0IEFwcGVhcmFuY2UoKTogQXBwZWFyYW5jZSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1V0aWxpdGllcy9BcHBlYXJhbmNlJyk7XG4gIH0sXG4gIGdldCBBcHBSZWdpc3RyeSgpOiBBcHBSZWdpc3RyeSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1JlYWN0TmF0aXZlL0FwcFJlZ2lzdHJ5Jyk7XG4gIH0sXG4gIGdldCBBcHBTdGF0ZSgpOiBBcHBTdGF0ZSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0FwcFN0YXRlL0FwcFN0YXRlJyk7XG4gIH0sXG4gIC8vICRGbG93Rml4TWVbdmFsdWUtYXMtdHlwZV1cbiAgZ2V0IEFzeW5jU3RvcmFnZSgpOiBBc3luY1N0b3JhZ2Uge1xuICAgIHdhcm5PbmNlKFxuICAgICAgJ2FzeW5jLXN0b3JhZ2UtbW92ZWQnLFxuICAgICAgJ0FzeW5jU3RvcmFnZSBoYXMgYmVlbiBleHRyYWN0ZWQgZnJvbSByZWFjdC1uYXRpdmUgY29yZSBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuICcgK1xuICAgICAgICBcIkl0IGNhbiBub3cgYmUgaW5zdGFsbGVkIGFuZCBpbXBvcnRlZCBmcm9tICdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZScgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJyxcbiAgICApO1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9TdG9yYWdlL0FzeW5jU3RvcmFnZScpO1xuICB9LFxuICBnZXQgQmFja0hhbmRsZXIoKTogQmFja0hhbmRsZXIge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9VdGlsaXRpZXMvQmFja0hhbmRsZXInKTtcbiAgfSxcbiAgZ2V0IENsaXBib2FyZCgpOiBDbGlwYm9hcmQge1xuICAgIHdhcm5PbmNlKFxuICAgICAgJ2NsaXBib2FyZC1tb3ZlZCcsXG4gICAgICAnQ2xpcGJvYXJkIGhhcyBiZWVuIGV4dHJhY3RlZCBmcm9tIHJlYWN0LW5hdGl2ZSBjb3JlIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS4gJyArXG4gICAgICAgIFwiSXQgY2FuIG5vdyBiZSBpbnN0YWxsZWQgYW5kIGltcG9ydGVkIGZyb20gJ0ByZWFjdC1uYXRpdmUtY2xpcGJvYXJkL2NsaXBib2FyZCcgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1uYXRpdmUtY2xpcGJvYXJkL2NsaXBib2FyZCcsXG4gICAgKTtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9DbGlwYm9hcmQvQ2xpcGJvYXJkJyk7XG4gIH0sXG4gIGdldCBEZXZpY2VJbmZvKCk6IERldmljZUluZm8ge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9VdGlsaXRpZXMvRGV2aWNlSW5mbycpO1xuICB9LFxuICBnZXQgRGV2U2V0dGluZ3MoKTogRGV2U2V0dGluZ3Mge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9VdGlsaXRpZXMvRGV2U2V0dGluZ3MnKTtcbiAgfSxcbiAgZ2V0IERpbWVuc2lvbnMoKTogRGltZW5zaW9ucyB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1V0aWxpdGllcy9EaW1lbnNpb25zJyk7XG4gIH0sXG4gIGdldCBFYXNpbmcoKTogRWFzaW5nIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQW5pbWF0ZWQvRWFzaW5nJyk7XG4gIH0sXG4gIGdldCBmaW5kTm9kZUhhbmRsZSgpOiAkUHJvcGVydHlUeXBlPFJlYWN0TmF0aXZlLCAnZmluZE5vZGVIYW5kbGUnPiB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlJykuZmluZE5vZGVIYW5kbGU7XG4gIH0sXG4gIGdldCBJMThuTWFuYWdlcigpOiBJMThuTWFuYWdlciB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1JlYWN0TmF0aXZlL0kxOG5NYW5hZ2VyJyk7XG4gIH0sXG4gIGdldCBJbWFnZVBpY2tlcklPUygpOiBJbWFnZVBpY2tlcklPUyB7XG4gICAgd2Fybk9uY2UoXG4gICAgICAnaW1hZ2VQaWNrZXJJT1MtbW92ZWQnLFxuICAgICAgJ0ltYWdlUGlja2VySU9TIGhhcyBiZWVuIGV4dHJhY3RlZCBmcm9tIHJlYWN0LW5hdGl2ZSBjb3JlIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS4gJyArXG4gICAgICAgIFwiUGxlYXNlIHVwZ3JhZGUgdG8gdXNlIGVpdGhlciAnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLWltYWdlLXBpY2tlcicgb3IgJ2V4cG8taW1hZ2UtcGlja2VyJy4gXCIgK1xuICAgICAgICBcIklmIHlvdSBjYW5ub3QgdXBncmFkZSB0byBhIGRpZmZlcmVudCBsaWJyYXJ5LCBwbGVhc2UgaW5zdGFsbCB0aGUgZGVwcmVjYXRlZCAnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvaW1hZ2UtcGlja2VyLWlvcycgcGFja2FnZS4gXCIgK1xuICAgICAgICAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ybmMtYXJjaGl2ZS9yZWFjdC1uYXRpdmUtaW1hZ2UtcGlja2VyLWlvcycsXG4gICAgKTtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvSW1hZ2UvSW1hZ2VQaWNrZXJJT1MnKTtcbiAgfSxcbiAgZ2V0IEludGVyYWN0aW9uTWFuYWdlcigpOiBJbnRlcmFjdGlvbk1hbmFnZXIge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9JbnRlcmFjdGlvbi9JbnRlcmFjdGlvbk1hbmFnZXInKTtcbiAgfSxcbiAgZ2V0IEtleWJvYXJkKCk6IEtleWJvYXJkIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9LZXlib2FyZC9LZXlib2FyZCcpO1xuICB9LFxuICBnZXQgTGF5b3V0QW5pbWF0aW9uKCk6IExheW91dEFuaW1hdGlvbiB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0xheW91dEFuaW1hdGlvbi9MYXlvdXRBbmltYXRpb24nKTtcbiAgfSxcbiAgZ2V0IExpbmtpbmcoKTogTGlua2luZyB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0xpbmtpbmcvTGlua2luZycpO1xuICB9LFxuICBnZXQgTG9nQm94KCk6IExvZ0JveCB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0xvZ0JveC9Mb2dCb3gnKTtcbiAgfSxcbiAgZ2V0IE5hdGl2ZURpYWxvZ01hbmFnZXJBbmRyb2lkKCk6IE5hdGl2ZURpYWxvZ01hbmFnZXJBbmRyb2lkIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvTmF0aXZlTW9kdWxlcy9zcGVjcy9OYXRpdmVEaWFsb2dNYW5hZ2VyQW5kcm9pZCcpXG4gICAgICAuZGVmYXVsdDtcbiAgfSxcbiAgZ2V0IE5hdGl2ZUV2ZW50RW1pdHRlcigpOiBOYXRpdmVFdmVudEVtaXR0ZXIge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9FdmVudEVtaXR0ZXIvTmF0aXZlRXZlbnRFbWl0dGVyJykuZGVmYXVsdDtcbiAgfSxcbiAgZ2V0IE5ldHdvcmtpbmcoKTogTmV0d29ya2luZyB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL05ldHdvcmsvUkNUTmV0d29ya2luZycpO1xuICB9LFxuICBnZXQgUGFuUmVzcG9uZGVyKCk6IFBhblJlc3BvbmRlciB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0ludGVyYWN0aW9uL1BhblJlc3BvbmRlcicpO1xuICB9LFxuICBnZXQgUGVybWlzc2lvbnNBbmRyb2lkKCk6IFBlcm1pc3Npb25zQW5kcm9pZCB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1Blcm1pc3Npb25zQW5kcm9pZC9QZXJtaXNzaW9uc0FuZHJvaWQnKTtcbiAgfSxcbiAgZ2V0IFBpeGVsUmF0aW8oKTogUGl4ZWxSYXRpbyB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1V0aWxpdGllcy9QaXhlbFJhdGlvJyk7XG4gIH0sXG4gIGdldCBQdXNoTm90aWZpY2F0aW9uSU9TKCk6IFB1c2hOb3RpZmljYXRpb25JT1Mge1xuICAgIHdhcm5PbmNlKFxuICAgICAgJ3B1c2hOb3RpZmljYXRpb25JT1MtbW92ZWQnLFxuICAgICAgJ1B1c2hOb3RpZmljYXRpb25JT1MgaGFzIGJlZW4gZXh0cmFjdGVkIGZyb20gcmVhY3QtbmF0aXZlIGNvcmUgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLiAnICtcbiAgICAgICAgXCJJdCBjYW4gbm93IGJlIGluc3RhbGxlZCBhbmQgaW1wb3J0ZWQgZnJvbSAnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcHVzaC1ub3RpZmljYXRpb24taW9zJyBpbnN0ZWFkIG9mICdyZWFjdC1uYXRpdmUnLiBcIiArXG4gICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1wdXNoLW5vdGlmaWNhdGlvbi1pb3MvcHVzaC1ub3RpZmljYXRpb24taW9zJyxcbiAgICApO1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9QdXNoTm90aWZpY2F0aW9uSU9TL1B1c2hOb3RpZmljYXRpb25JT1MnKTtcbiAgfSxcbiAgZ2V0IFNldHRpbmdzKCk6IFNldHRpbmdzIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvU2V0dGluZ3MvU2V0dGluZ3MnKTtcbiAgfSxcbiAgZ2V0IFNoYXJlKCk6IFNoYXJlIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvU2hhcmUvU2hhcmUnKTtcbiAgfSxcbiAgZ2V0IFN0eWxlU2hlZXQoKTogU3R5bGVTaGVldCB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1N0eWxlU2hlZXQvU3R5bGVTaGVldCcpO1xuICB9LFxuICBnZXQgU3lzdHJhY2UoKTogU3lzdHJhY2Uge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9QZXJmb3JtYW5jZS9TeXN0cmFjZScpO1xuICB9LFxuICAvLyAkRmxvd0ZpeE1lW3ZhbHVlLWFzLXR5cGVdXG4gIGdldCBUb2FzdEFuZHJvaWQoKTogVG9hc3RBbmRyb2lkIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9Ub2FzdEFuZHJvaWQvVG9hc3RBbmRyb2lkJyk7XG4gIH0sXG4gIGdldCBUdXJib01vZHVsZVJlZ2lzdHJ5KCk6IFR1cmJvTW9kdWxlUmVnaXN0cnkge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9UdXJib01vZHVsZS9UdXJib01vZHVsZVJlZ2lzdHJ5Jyk7XG4gIH0sXG4gIGdldCBVSU1hbmFnZXIoKTogVUlNYW5hZ2VyIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvUmVhY3ROYXRpdmUvVUlNYW5hZ2VyJyk7XG4gIH0sXG4gIGdldCB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcygpOiAkUHJvcGVydHlUeXBlPFxuICAgIFJlYWN0TmF0aXZlLFxuICAgICd1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcycsXG4gID4ge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScpXG4gICAgICAudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM7XG4gIH0sXG4gIGdldCB1c2VDb2xvclNjaGVtZSgpOiB1c2VDb2xvclNjaGVtZSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1V0aWxpdGllcy91c2VDb2xvclNjaGVtZScpLmRlZmF1bHQ7XG4gIH0sXG4gIGdldCB1c2VXaW5kb3dEaW1lbnNpb25zKCk6IHVzZVdpbmRvd0RpbWVuc2lvbnMge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9VdGlsaXRpZXMvdXNlV2luZG93RGltZW5zaW9ucycpLmRlZmF1bHQ7XG4gIH0sXG4gIGdldCBVVEZTZXF1ZW5jZSgpOiBVVEZTZXF1ZW5jZSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1VURlNlcXVlbmNlJyk7XG4gIH0sXG4gIGdldCBWaWJyYXRpb24oKTogVmlicmF0aW9uIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvVmlicmF0aW9uL1ZpYnJhdGlvbicpO1xuICB9LFxuICBnZXQgWWVsbG93Qm94KCk6IFllbGxvd0JveCB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1llbGxvd0JveC9ZZWxsb3dCb3hEZXByZWNhdGVkJyk7XG4gIH0sXG5cbiAgLy8gUGx1Z2luc1xuICBnZXQgRGV2aWNlRXZlbnRFbWl0dGVyKCk6IFJDVERldmljZUV2ZW50RW1pdHRlciB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0V2ZW50RW1pdHRlci9SQ1REZXZpY2VFdmVudEVtaXR0ZXInKS5kZWZhdWx0O1xuICB9LFxuICBnZXQgRHluYW1pY0NvbG9ySU9TKCk6IER5bmFtaWNDb2xvcklPUyB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1N0eWxlU2hlZXQvUGxhdGZvcm1Db2xvclZhbHVlVHlwZXNJT1MnKVxuICAgICAgLkR5bmFtaWNDb2xvcklPUztcbiAgfSxcbiAgZ2V0IE5hdGl2ZUFwcEV2ZW50RW1pdHRlcigpOiBSQ1ROYXRpdmVBcHBFdmVudEVtaXR0ZXIge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9FdmVudEVtaXR0ZXIvUkNUTmF0aXZlQXBwRXZlbnRFbWl0dGVyJyk7XG4gIH0sXG4gIGdldCBOYXRpdmVNb2R1bGVzKCk6IE5hdGl2ZU1vZHVsZXMge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9CYXRjaGVkQnJpZGdlL05hdGl2ZU1vZHVsZXMnKTtcbiAgfSxcbiAgZ2V0IFBsYXRmb3JtKCk6IFBsYXRmb3JtIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvVXRpbGl0aWVzL1BsYXRmb3JtJyk7XG4gIH0sXG4gIGdldCBQbGF0Zm9ybUNvbG9yKCk6IFBsYXRmb3JtQ29sb3Ige1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9TdHlsZVNoZWV0L1BsYXRmb3JtQ29sb3JWYWx1ZVR5cGVzJylcbiAgICAgIC5QbGF0Zm9ybUNvbG9yO1xuICB9LFxuICBnZXQgcHJvY2Vzc0NvbG9yKCk6IHByb2Nlc3NDb2xvciB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJyk7XG4gIH0sXG4gIGdldCByZXF1aXJlTmF0aXZlQ29tcG9uZW50KCk6IDxUPihcbiAgICB1aVZpZXdDbGFzc05hbWU6IHN0cmluZyxcbiAgKSA9PiBIb3N0Q29tcG9uZW50PFQ+IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvUmVhY3ROYXRpdmUvcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCcpO1xuICB9LFxuICBnZXQgUm9vdFRhZ0NvbnRleHQoKTogUm9vdFRhZ0NvbnRleHQge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9SZWFjdE5hdGl2ZS9Sb290VGFnJykuUm9vdFRhZ0NvbnRleHQ7XG4gIH0sXG4gIGdldCB1bnN0YWJsZV9lbmFibGVMb2dCb3goKTogKCkgPT4gdm9pZCB7XG4gICAgcmV0dXJuICgpID0+XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdMb2dCb3ggaXMgZW5hYmxlZCBieSBkZWZhdWx0IHNvIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCB1bnN0YWJsZV9lbmFibGVMb2dCb3goKSBhbnltb3JlLiBUaGlzIGlzIGEgbm8gb3AgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCB2ZXJzaW9uLicsXG4gICAgICApO1xuICB9LFxuICAvLyBEZXByZWNhdGVkIFByb3AgVHlwZXNcbiAgZ2V0IENvbG9yUHJvcFR5cGUoKTogJEZsb3dGaXhNZSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ0NvbG9yUHJvcFR5cGUgd2lsbCBiZSByZW1vdmVkIGZyb20gUmVhY3QgTmF0aXZlLiBNaWdyYXRlIHRvICcgK1xuICAgICAgICBcIkNvbG9yUHJvcFR5cGUgZXhwb3J0ZWQgZnJvbSAnZGVwcmVjYXRlZC1yZWFjdC1uYXRpdmUtcHJvcC10eXBlcycuXCIsXG4gICAgKTtcbiAgICByZXR1cm4gcmVxdWlyZSgnZGVwcmVjYXRlZC1yZWFjdC1uYXRpdmUtcHJvcC10eXBlcycpLkNvbG9yUHJvcFR5cGU7XG4gIH0sXG4gIGdldCBFZGdlSW5zZXRzUHJvcFR5cGUoKTogJEZsb3dGaXhNZSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ0VkZ2VJbnNldHNQcm9wVHlwZSB3aWxsIGJlIHJlbW92ZWQgZnJvbSBSZWFjdCBOYXRpdmUuIE1pZ3JhdGUgdG8gJyArXG4gICAgICAgIFwiRWRnZUluc2V0c1Byb3BUeXBlIGV4cG9ydGVkIGZyb20gJ2RlcHJlY2F0ZWQtcmVhY3QtbmF0aXZlLXByb3AtdHlwZXMnLlwiLFxuICAgICk7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ2RlcHJlY2F0ZWQtcmVhY3QtbmF0aXZlLXByb3AtdHlwZXMnKS5FZGdlSW5zZXRzUHJvcFR5cGU7XG4gIH0sXG4gIGdldCBQb2ludFByb3BUeXBlKCk6ICRGbG93Rml4TWUge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdQb2ludFByb3BUeXBlIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIFJlYWN0IE5hdGl2ZS4gTWlncmF0ZSB0byAnICtcbiAgICAgICAgXCJQb2ludFByb3BUeXBlIGV4cG9ydGVkIGZyb20gJ2RlcHJlY2F0ZWQtcmVhY3QtbmF0aXZlLXByb3AtdHlwZXMnLlwiLFxuICAgICk7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ2RlcHJlY2F0ZWQtcmVhY3QtbmF0aXZlLXByb3AtdHlwZXMnKS5Qb2ludFByb3BUeXBlO1xuICB9LFxuICBnZXQgVmlld1Byb3BUeXBlcygpOiAkRmxvd0ZpeE1lIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnVmlld1Byb3BUeXBlcyB3aWxsIGJlIHJlbW92ZWQgZnJvbSBSZWFjdCBOYXRpdmUuIE1pZ3JhdGUgdG8gJyArXG4gICAgICAgIFwiVmlld1Byb3BUeXBlcyBleHBvcnRlZCBmcm9tICdkZXByZWNhdGVkLXJlYWN0LW5hdGl2ZS1wcm9wLXR5cGVzJy5cIixcbiAgICApO1xuICAgIHJldHVybiByZXF1aXJlKCdkZXByZWNhdGVkLXJlYWN0LW5hdGl2ZS1wcm9wLXR5cGVzJykuVmlld1Byb3BUeXBlcztcbiAgfSxcbn07XG5cbmlmIChfX0RFVl9fKSB7XG4gIC8qICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBBUlQuICovXG4gIC8qICRGbG93Rml4TWVbaW52YWxpZC1leHBvcnRdIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuXG4gICAqIGF0dGVtcHRpbmcgdG8gYWNjZXNzIEFSVC4gKi9cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnQVJUJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQoKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnQVJUIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBSZWFjdCBOYXRpdmUuICcgK1xuICAgICAgICAgIFwiSXQgY2FuIG5vdyBiZSBpbnN0YWxsZWQgYW5kIGltcG9ydGVkIGZyb20gJ0ByZWFjdC1uYXRpdmUtY29tbXVuaXR5L2FydCcgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1hcnQvYXJ0JyxcbiAgICAgICk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLyogJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuXG4gICAqIGF0dGVtcHRpbmcgdG8gYWNjZXNzIExpc3RWaWV3LiAqL1xuICAvKiAkRmxvd0ZpeE1lW2ludmFsaWQtZXhwb3J0XSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBMaXN0Vmlldy4gKi9cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnTGlzdFZpZXcnLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldCgpIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgICdMaXN0VmlldyBoYXMgYmVlbiByZW1vdmVkIGZyb20gUmVhY3QgTmF0aXZlLiAnICtcbiAgICAgICAgICAnU2VlIGh0dHBzOi8vZmIubWUvbm9saXN0dmlldyBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvciB1c2UgJyArXG4gICAgICAgICAgJ2BkZXByZWNhdGVkLXJlYWN0LW5hdGl2ZS1saXN0dmlld2AuJyxcbiAgICAgICk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLyogJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuXG4gICAqIGF0dGVtcHRpbmcgdG8gYWNjZXNzIFN3aXBlYWJsZUxpc3RWaWV3LiAqL1xuICAvKiAkRmxvd0ZpeE1lW2ludmFsaWQtZXhwb3J0XSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBTd2lwZWFibGVMaXN0Vmlldy4gKi9cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnU3dpcGVhYmxlTGlzdFZpZXcnLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldCgpIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgICdTd2lwZWFibGVMaXN0VmlldyBoYXMgYmVlbiByZW1vdmVkIGZyb20gUmVhY3QgTmF0aXZlLiAnICtcbiAgICAgICAgICAnU2VlIGh0dHBzOi8vZmIubWUvbm9saXN0dmlldyBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvciB1c2UgJyArXG4gICAgICAgICAgJ2BkZXByZWNhdGVkLXJlYWN0LW5hdGl2ZS1zd2lwZWFibGUtbGlzdHZpZXdgLicsXG4gICAgICApO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8qICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBXZWJWaWV3LiAqL1xuICAvKiAkRmxvd0ZpeE1lW2ludmFsaWQtZXhwb3J0XSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBXZWJWaWV3LiAqL1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdXZWJWaWV3Jywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQoKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnV2ViVmlldyBoYXMgYmVlbiByZW1vdmVkIGZyb20gUmVhY3QgTmF0aXZlLiAnICtcbiAgICAgICAgICBcIkl0IGNhbiBub3cgYmUgaW5zdGFsbGVkIGFuZCBpbXBvcnRlZCBmcm9tICdyZWFjdC1uYXRpdmUtd2VidmlldycgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS13ZWJ2aWV3L3JlYWN0LW5hdGl2ZS13ZWJ2aWV3JyxcbiAgICAgICk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLyogJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuXG4gICAqIGF0dGVtcHRpbmcgdG8gYWNjZXNzIE5ldEluZm8uICovXG4gIC8qICRGbG93Rml4TWVbaW52YWxpZC1leHBvcnRdIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuXG4gICAqIGF0dGVtcHRpbmcgdG8gYWNjZXNzIE5ldEluZm8uICovXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ05ldEluZm8nLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldCgpIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgICdOZXRJbmZvIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBSZWFjdCBOYXRpdmUuICcgK1xuICAgICAgICAgIFwiSXQgY2FuIG5vdyBiZSBpbnN0YWxsZWQgYW5kIGltcG9ydGVkIGZyb20gJ0ByZWFjdC1uYXRpdmUtY29tbXVuaXR5L25ldGluZm8nIGluc3RlYWQgb2YgJ3JlYWN0LW5hdGl2ZScuIFwiICtcbiAgICAgICAgICAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1uYXRpdmUtbmV0aW5mby9yZWFjdC1uYXRpdmUtbmV0aW5mbycsXG4gICAgICApO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8qICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBDYW1lcmFSb2xsLiAqL1xuICAvKiAkRmxvd0ZpeE1lW2ludmFsaWQtZXhwb3J0XSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBDYW1lcmFSb2xsLiAqL1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdDYW1lcmFSb2xsJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQoKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnQ2FtZXJhUm9sbCBoYXMgYmVlbiByZW1vdmVkIGZyb20gUmVhY3QgTmF0aXZlLiAnICtcbiAgICAgICAgICBcIkl0IGNhbiBub3cgYmUgaW5zdGFsbGVkIGFuZCBpbXBvcnRlZCBmcm9tICdAcmVhY3QtbmF0aXZlLWNvbW11bml0eS9jYW1lcmFyb2xsJyBpbnN0ZWFkIG9mICdyZWFjdC1uYXRpdmUnLiBcIiArXG4gICAgICAgICAgJ1NlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtbmF0aXZlLWNhbWVyYXJvbGwvcmVhY3QtbmF0aXZlLWNhbWVyYXJvbGwnLFxuICAgICAgKTtcbiAgICB9LFxuICB9KTtcblxuICAvKiAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ10gVGhpcyBpcyBpbnRlbnRpb25hbDogRmxvdyB3aWxsIGVycm9yIHdoZW5cbiAgICogYXR0ZW1wdGluZyB0byBhY2Nlc3MgSW1hZ2VTdG9yZS4gKi9cbiAgLyogJEZsb3dGaXhNZVtpbnZhbGlkLWV4cG9ydF0gVGhpcyBpcyBpbnRlbnRpb25hbDogRmxvdyB3aWxsIGVycm9yIHdoZW5cbiAgICogYXR0ZW1wdGluZyB0byBhY2Nlc3MgSW1hZ2VTdG9yZS4gKi9cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnSW1hZ2VTdG9yZScsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0KCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ0ltYWdlU3RvcmUgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIFJlYWN0IE5hdGl2ZS4gJyArXG4gICAgICAgICAgJ1RvIGdldCBhIGJhc2U2NC1lbmNvZGVkIHN0cmluZyBmcm9tIGEgbG9jYWwgaW1hZ2UgdXNlIGVpdGhlciBvZiB0aGUgZm9sbG93aW5nIHRoaXJkLXBhcnR5IGxpYnJhcmllczonICtcbiAgICAgICAgICBcIiogZXhwby1maWxlLXN5c3RlbTogYHJlYWRBc1N0cmluZ0FzeW5jKGZpbGVwYXRoLCAnYmFzZTY0JylgXCIgK1xuICAgICAgICAgIFwiKiByZWFjdC1uYXRpdmUtZnM6IGByZWFkRmlsZShmaWxlcGF0aCwgJ2Jhc2U2NCcpYFwiLFxuICAgICAgKTtcbiAgICB9LFxuICB9KTtcblxuICAvKiAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ10gVGhpcyBpcyBpbnRlbnRpb25hbDogRmxvdyB3aWxsIGVycm9yIHdoZW5cbiAgICogYXR0ZW1wdGluZyB0byBhY2Nlc3MgSW1hZ2VFZGl0b3IuICovXG4gIC8qICRGbG93Rml4TWVbaW52YWxpZC1leHBvcnRdIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuXG4gICAqIGF0dGVtcHRpbmcgdG8gYWNjZXNzIEltYWdlRWRpdG9yLiAqL1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdJbWFnZUVkaXRvcicsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0KCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ0ltYWdlRWRpdG9yIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBSZWFjdCBOYXRpdmUuICcgK1xuICAgICAgICAgIFwiSXQgY2FuIG5vdyBiZSBpbnN0YWxsZWQgYW5kIGltcG9ydGVkIGZyb20gJ0ByZWFjdC1uYXRpdmUtY29tbXVuaXR5L2ltYWdlLWVkaXRvcicgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL2NhbGxzdGFjay9yZWFjdC1uYXRpdmUtaW1hZ2UtZWRpdG9yJyxcbiAgICAgICk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLyogJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuXG4gICAqIGF0dGVtcHRpbmcgdG8gYWNjZXNzIFRpbWVQaWNrZXJBbmRyb2lkLiAqL1xuICAvKiAkRmxvd0ZpeE1lW2ludmFsaWQtZXhwb3J0XSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBUaW1lUGlja2VyQW5kcm9pZC4gKi9cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnVGltZVBpY2tlckFuZHJvaWQnLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldCgpIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgICdUaW1lUGlja2VyQW5kcm9pZCBoYXMgYmVlbiByZW1vdmVkIGZyb20gUmVhY3QgTmF0aXZlLiAnICtcbiAgICAgICAgICBcIkl0IGNhbiBub3cgYmUgaW5zdGFsbGVkIGFuZCBpbXBvcnRlZCBmcm9tICdAcmVhY3QtbmF0aXZlLWNvbW11bml0eS9kYXRldGltZXBpY2tlcicgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1kYXRldGltZXBpY2tlci9kYXRldGltZXBpY2tlcicsXG4gICAgICApO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8qICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBUb29sYmFyQW5kcm9pZC4gKi9cbiAgLyogJEZsb3dGaXhNZVtpbnZhbGlkLWV4cG9ydF0gVGhpcyBpcyBpbnRlbnRpb25hbDogRmxvdyB3aWxsIGVycm9yIHdoZW5cbiAgICogYXR0ZW1wdGluZyB0byBhY2Nlc3MgVG9vbGJhckFuZHJvaWQuICovXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ1Rvb2xiYXJBbmRyb2lkJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQoKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnVG9vbGJhckFuZHJvaWQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIFJlYWN0IE5hdGl2ZS4gJyArXG4gICAgICAgICAgXCJJdCBjYW4gbm93IGJlIGluc3RhbGxlZCBhbmQgaW1wb3J0ZWQgZnJvbSAnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvdG9vbGJhci1hbmRyb2lkJyBpbnN0ZWFkIG9mICdyZWFjdC1uYXRpdmUnLiBcIiArXG4gICAgICAgICAgJ1NlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtbmF0aXZlLXRvb2xiYXItYW5kcm9pZC90b29sYmFyLWFuZHJvaWQnLFxuICAgICAgKTtcbiAgICB9LFxuICB9KTtcblxuICAvKiAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ10gVGhpcyBpcyBpbnRlbnRpb25hbDogRmxvdyB3aWxsIGVycm9yIHdoZW5cbiAgICogYXR0ZW1wdGluZyB0byBhY2Nlc3MgVmlld1BhZ2VyQW5kcm9pZC4gKi9cbiAgLyogJEZsb3dGaXhNZVtpbnZhbGlkLWV4cG9ydF0gVGhpcyBpcyBpbnRlbnRpb25hbDogRmxvdyB3aWxsIGVycm9yIHdoZW5cbiAgICogYXR0ZW1wdGluZyB0byBhY2Nlc3MgVmlld1BhZ2VyQW5kcm9pZC4gKi9cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnVmlld1BhZ2VyQW5kcm9pZCcsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0KCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ1ZpZXdQYWdlckFuZHJvaWQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIFJlYWN0IE5hdGl2ZS4gJyArXG4gICAgICAgICAgXCJJdCBjYW4gbm93IGJlIGluc3RhbGxlZCBhbmQgaW1wb3J0ZWQgZnJvbSAnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvdmlld3BhZ2VyJyBpbnN0ZWFkIG9mICdyZWFjdC1uYXRpdmUnLiBcIiArXG4gICAgICAgICAgJ1NlZSBodHRwczovL2dpdGh1Yi5jb20vY2FsbHN0YWNrL3JlYWN0LW5hdGl2ZS12aWV3cGFnZXInLFxuICAgICAgKTtcbiAgICB9LFxuICB9KTtcblxuICAvKiAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ10gVGhpcyBpcyBpbnRlbnRpb25hbDogRmxvdyB3aWxsIGVycm9yIHdoZW5cbiAgICogYXR0ZW1wdGluZyB0byBhY2Nlc3MgQ2hlY2tCb3guICovXG4gIC8qICRGbG93Rml4TWVbaW52YWxpZC1leHBvcnRdIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuXG4gICAqIGF0dGVtcHRpbmcgdG8gYWNjZXNzIENoZWNrQm94LiAqL1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdDaGVja0JveCcsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0KCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ0NoZWNrQm94IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBSZWFjdCBOYXRpdmUuICcgK1xuICAgICAgICAgIFwiSXQgY2FuIG5vdyBiZSBpbnN0YWxsZWQgYW5kIGltcG9ydGVkIGZyb20gJ0ByZWFjdC1uYXRpdmUtY29tbXVuaXR5L2NoZWNrYm94JyBpbnN0ZWFkIG9mICdyZWFjdC1uYXRpdmUnLiBcIiArXG4gICAgICAgICAgJ1NlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtbmF0aXZlLWNoZWNrYm94L3JlYWN0LW5hdGl2ZS1jaGVja2JveCcsXG4gICAgICApO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8qICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBTdGF0dXNCYXJJT1MuICovXG4gIC8qICRGbG93Rml4TWVbaW52YWxpZC1leHBvcnRdIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuXG4gICAqIGF0dGVtcHRpbmcgdG8gYWNjZXNzIFN0YXR1c0JhcklPUy4gKi9cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnU3RhdHVzQmFySU9TJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQoKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnU3RhdHVzQmFySU9TIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBSZWFjdCBOYXRpdmUuICcgK1xuICAgICAgICAgICdIYXMgYmVlbiBtZXJnZWQgd2l0aCBTdGF0dXNCYXIuICcgK1xuICAgICAgICAgICdTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9zdGF0dXNiYXInLFxuICAgICAgKTtcbiAgICB9LFxuICB9KTtcblxuICAvKiAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ10gVGhpcyBpcyBpbnRlbnRpb25hbDogRmxvdyB3aWxsIGVycm9yIHdoZW5cbiAgICogYXR0ZW1wdGluZyB0byBhY2Nlc3MgUGlja2VySU9TLiAqL1xuICAvKiAkRmxvd0ZpeE1lW2ludmFsaWQtZXhwb3J0XSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBQaWNrZXJJT1MuICovXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ1BpY2tlcklPUycsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0KCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ1BpY2tlcklPUyBoYXMgYmVlbiByZW1vdmVkIGZyb20gUmVhY3QgTmF0aXZlLiAnICtcbiAgICAgICAgICBcIkl0IGNhbiBub3cgYmUgaW5zdGFsbGVkIGFuZCBpbXBvcnRlZCBmcm9tICdAcmVhY3QtbmF0aXZlLXBpY2tlci9waWNrZXInIGluc3RlYWQgb2YgJ3JlYWN0LW5hdGl2ZScuIFwiICtcbiAgICAgICAgICAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1uYXRpdmUtcGlja2VyL3BpY2tlcicsXG4gICAgICApO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8qICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBQaWNrZXIuICovXG4gIC8qICRGbG93Rml4TWVbaW52YWxpZC1leHBvcnRdIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuXG4gICAqIGF0dGVtcHRpbmcgdG8gYWNjZXNzIFBpY2tlci4gKi9cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnUGlja2VyJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQoKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnUGlja2VyIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBSZWFjdCBOYXRpdmUuICcgK1xuICAgICAgICAgIFwiSXQgY2FuIG5vdyBiZSBpbnN0YWxsZWQgYW5kIGltcG9ydGVkIGZyb20gJ0ByZWFjdC1uYXRpdmUtcGlja2VyL3BpY2tlcicgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1waWNrZXIvcGlja2VyJyxcbiAgICAgICk7XG4gICAgfSxcbiAgfSk7XG4gIC8qICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBEYXRlUGlja2VyQW5kcm9pZC4gKi9cbiAgLyogJEZsb3dGaXhNZVtpbnZhbGlkLWV4cG9ydF0gVGhpcyBpcyBpbnRlbnRpb25hbDogRmxvdyB3aWxsIGVycm9yIHdoZW5cbiAgICogYXR0ZW1wdGluZyB0byBhY2Nlc3MgRGF0ZVBpY2tlckFuZHJvaWQuICovXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ0RhdGVQaWNrZXJBbmRyb2lkJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQoKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnRGF0ZVBpY2tlckFuZHJvaWQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIFJlYWN0IE5hdGl2ZS4gJyArXG4gICAgICAgICAgXCJJdCBjYW4gbm93IGJlIGluc3RhbGxlZCBhbmQgaW1wb3J0ZWQgZnJvbSAnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvZGF0ZXRpbWVwaWNrZXInIGluc3RlYWQgb2YgJ3JlYWN0LW5hdGl2ZScuIFwiICtcbiAgICAgICAgICAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1uYXRpdmUtZGF0ZXRpbWVwaWNrZXIvZGF0ZXRpbWVwaWNrZXInLFxuICAgICAgKTtcbiAgICB9LFxuICB9KTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBVUE7O0FBNkZBLElBQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLFdBQUQsQ0FBekI7O0FBQ0EsSUFBTUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsZ0NBQUQsQ0FBeEI7O0FBRUFFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtFQUVmLElBQUlDLGlCQUFKLEdBQTJDO0lBQ3pDLE9BQU9KLE9BQU8sQ0FBQyw0REFBRCxDQUFQLENBQ0pLLE9BREg7RUFFRCxDQUxjOztFQU1mLElBQUlDLGlCQUFKLEdBQTJDO0lBQ3pDLE9BQU9OLE9BQU8sQ0FBQyw0REFBRCxDQUFkO0VBQ0QsQ0FSYzs7RUFTZixJQUFJTyxNQUFKLEdBQXFCO0lBQ25CLE9BQU9QLE9BQU8sQ0FBQywrQkFBRCxDQUFkO0VBQ0QsQ0FYYzs7RUFhZixJQUFJUSxhQUFKLEdBQW1DO0lBQ2pDUCxRQUFRLENBQ04sc0JBRE0sRUFFTixtR0FDRSxnSEFERixHQUVFLG1FQUpJLENBQVI7SUFNQSxPQUFPRCxPQUFPLENBQUMsaURBQUQsQ0FBZDtFQUNELENBckJjOztFQXVCZixJQUFJUyxtQkFBSixHQUErQztJQUM3QyxPQUFPVCxPQUFPLENBQUMsMERBQUQsQ0FBZDtFQUNELENBekJjOztFQTBCZixJQUFJVSxRQUFKLEdBQXlC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