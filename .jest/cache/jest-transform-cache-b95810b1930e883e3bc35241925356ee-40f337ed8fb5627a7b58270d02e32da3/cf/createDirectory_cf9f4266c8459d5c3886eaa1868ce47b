04f63575b82433b98d78f16071443e1e
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = createDirectory;

function fs() {
  var data = _interopRequireWildcard(require('graceful-fs'));

  fs = function fs() {
    return data;
  };

  return data;
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== 'object' && typeof obj !== 'function') {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function createDirectory(path) {
  try {
    fs().mkdirSync(path, {
      recursive: true
    });
  } catch (e) {
    if (e.code !== 'EEXIST') {
      throw e;
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJjcmVhdGVEaXJlY3RvcnkiLCJmcyIsImRhdGEiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwicGF0aCIsIm1rZGlyU3luYyIsInJlY3Vyc2l2ZSIsImUiLCJjb2RlIl0sInNvdXJjZXMiOlsiY3JlYXRlRGlyZWN0b3J5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVEaXJlY3Rvcnk7XG5cbmZ1bmN0aW9uIGZzKCkge1xuICBjb25zdCBkYXRhID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgnZ3JhY2VmdWwtZnMnKSk7XG5cbiAgZnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkge1xuICBpZiAodHlwZW9mIFdlYWtNYXAgIT09ICdmdW5jdGlvbicpIHJldHVybiBudWxsO1xuICB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpO1xuICB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7XG4gIHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKG5vZGVJbnRlcm9wKSB7XG4gICAgcmV0dXJuIG5vZGVJbnRlcm9wID8gY2FjaGVOb2RlSW50ZXJvcCA6IGNhY2hlQmFiZWxJbnRlcm9wO1xuICB9KShub2RlSW50ZXJvcCk7XG59XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaiwgbm9kZUludGVyb3ApIHtcbiAgaWYgKCFub2RlSW50ZXJvcCAmJiBvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG4gIGlmIChvYmogPT09IG51bGwgfHwgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmogIT09ICdmdW5jdGlvbicpKSB7XG4gICAgcmV0dXJuIHtkZWZhdWx0OiBvYmp9O1xuICB9XG4gIHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7XG4gIGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkge1xuICAgIHJldHVybiBjYWNoZS5nZXQob2JqKTtcbiAgfVxuICB2YXIgbmV3T2JqID0ge307XG4gIHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGtleSAhPT0gJ2RlZmF1bHQnICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgIHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yXG4gICAgICAgID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSlcbiAgICAgICAgOiBudWxsO1xuICAgICAgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7XG4gIGlmIChjYWNoZSkge1xuICAgIGNhY2hlLnNldChvYmosIG5ld09iaik7XG4gIH1cbiAgcmV0dXJuIG5ld09iajtcbn1cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlyZWN0b3J5KHBhdGgpIHtcbiAgdHJ5IHtcbiAgICBmcygpLm1rZGlyU3luYyhwYXRoLCB7XG4gICAgICByZWN1cnNpdmU6IHRydWVcbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlLmNvZGUgIT09ICdFRVhJU1QnKSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztFQUMzQ0MsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQkMsZUFBbEI7O0FBRUEsU0FBU0MsRUFBVCxHQUFjO0VBQ1osSUFBTUMsSUFBSSxHQUFHQyx1QkFBdUIsQ0FBQ0MsT0FBTyxDQUFDLGFBQUQsQ0FBUixDQUFwQzs7RUFFQUgsRUFBRSxHQUFHLGNBQVk7SUFDZixPQUFPQyxJ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