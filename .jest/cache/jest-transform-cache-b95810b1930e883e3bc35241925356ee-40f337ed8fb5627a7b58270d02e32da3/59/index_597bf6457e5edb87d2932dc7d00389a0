d95818aee3134eae2b2a1167732fa0aa
'use strict';

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault2(require("@babel/runtime/regenerator"));

var _wrapNativeSuper2 = _interopRequireDefault2(require("@babel/runtime/helpers/wrapNativeSuper"));

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

var _extends2 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault2(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

Object.defineProperty(exports, '__esModule', {
  value: true
});
Object.defineProperty(exports, 'CallbackTestRunner', {
  enumerable: true,
  get: function get() {
    return _types.CallbackTestRunner;
  }
});
Object.defineProperty(exports, 'EmittingTestRunner', {
  enumerable: true,
  get: function get() {
    return _types.EmittingTestRunner;
  }
});
exports.default = void 0;

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function _emittery() {
  var data = _interopRequireDefault(require('emittery'));

  _emittery = function _emittery() {
    return data;
  };

  return data;
}

function _throat() {
  var data = _interopRequireDefault(require('throat'));

  _throat = function _throat() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

function _jestWorker() {
  var data = require('jest-worker');

  _jestWorker = function _jestWorker() {
    return data;
  };

  return data;
}

var _runTest = _interopRequireDefault(require('./runTest'));

var _types = require('./types');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _classPrivateMethodInitSpec(obj, privateSet) {
  _checkPrivateRedeclaration(obj, privateSet);

  privateSet.add(obj);
}

function _classPrivateFieldInitSpec(obj, privateMap, value) {
  _checkPrivateRedeclaration(obj, privateMap);

  privateMap.set(obj, value);
}

function _checkPrivateRedeclaration(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError('Cannot initialize the same private elements twice on an object');
  }
}

function _classPrivateFieldGet(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, 'get');

  return _classApplyDescriptorGet(receiver, descriptor);
}

function _classExtractFieldDescriptor(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError('attempted to ' + action + ' private field on non-instance');
  }

  return privateMap.get(receiver);
}

function _classApplyDescriptorGet(receiver, descriptor) {
  if (descriptor.get) {
    return descriptor.get.call(receiver);
  }

  return descriptor.value;
}

function _classPrivateMethodGet(receiver, privateSet, fn) {
  if (!privateSet.has(receiver)) {
    throw new TypeError('attempted to get private field on non-instance');
  }

  return fn;
}

var _eventEmitter = new WeakMap();

var _createInBandTestRun = new WeakSet();

var _createParallelTestRun = new WeakSet();

var TestRunner = function (_types$EmittingTestRu) {
  (0, _inherits2.default)(TestRunner, _types$EmittingTestRu);

  var _super = _createSuper(TestRunner);

  function TestRunner() {
    var _this;

    (0, _classCallCheck2.default)(this, TestRunner);

    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(_args));

    _classPrivateMethodInitSpec((0, _assertThisInitialized2.default)(_this), _createParallelTestRun);

    _classPrivateMethodInitSpec((0, _assertThisInitialized2.default)(_this), _createInBandTestRun);

    _classPrivateFieldInitSpec((0, _assertThisInitialized2.default)(_this), _eventEmitter, {
      writable: true,
      value: new (_emittery().default)()
    });

    return _this;
  }

  (0, _createClass2.default)(TestRunner, [{
    key: "runTests",
    value: function runTests(tests, watcher, options) {
      return _regenerator.default.async(function runTests$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _regenerator.default.awrap(options.serial ? _classPrivateMethodGet(this, _createInBandTestRun, _createInBandTestRun2).call(this, tests, watcher) : _classPrivateMethodGet(this, _createParallelTestRun, _createParallelTestRun2).call(this, tests, watcher));

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }, {
    key: "on",
    value: function on(eventName, listener) {
      return _classPrivateFieldGet(this, _eventEmitter).on(eventName, listener);
    }
  }]);
  return TestRunner;
}(_types.EmittingTestRunner);

exports.default = TestRunner;

function _createInBandTestRun2(tests, watcher) {
  var _this2 = this;

  var mutex;
  return _regenerator.default.async(function _createInBandTestRun2$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          process.env.JEST_WORKER_ID = '1';
          mutex = (0, _throat().default)(1);
          return _context3.abrupt("return", tests.reduce(function (promise, test) {
            return mutex(function () {
              return promise.then(function _callee() {
                var sendMessageToJest;
                return _regenerator.default.async(function _callee$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        if (!watcher.isInterrupted()) {
                          _context2.next = 2;
                          break;
                        }

                        throw new CancelRun();

                      case 2:
                        sendMessageToJest = function sendMessageToJest(eventName, args) {
                          return _classPrivateFieldGet(_this2, _eventEmitter).emit(eventName, (0, _jestUtil().deepCyclicCopy)(args, {
                            keepPrototype: false
                          }));
                        };

                        _context2.next = 5;
                        return _regenerator.default.awrap(_classPrivateFieldGet(_this2, _eventEmitter).emit('test-file-start', [test]));

                      case 5:
                        return _context2.abrupt("return", (0, _runTest.default)(test.path, _this2._globalConfig, test.context.config, test.context.resolver, _this2._context, sendMessageToJest));

                      case 6:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, null, null, null, Promise);
              }).then(function (result) {
                return _classPrivateFieldGet(_this2, _eventEmitter).emit('test-file-success', [test, result]);
              }, function (error) {
                return _classPrivateFieldGet(_this2, _eventEmitter).emit('test-file-failure', [test, error]);
              });
            });
          }, Promise.resolve()));

        case 3:
        case "end":
          return _context3.stop();
      }
    }
  }, null, null, null, Promise);
}

function _createParallelTestRun2(tests, watcher) {
  var _this3 = this;

  var resolvers, _iterator, _step, test, worker, mutex, runTestInWorker, onInterrupt, runAllTests, cleanup;

  return _regenerator.default.async(function _createParallelTestRun2$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          resolvers = new Map();

          for (_iterator = _createForOfIteratorHelperLoose(tests); !(_step = _iterator()).done;) {
            test = _step.value;

            if (!resolvers.has(test.context.config.id)) {
              resolvers.set(test.context.config.id, {
                config: test.context.config,
                serializableModuleMap: test.context.moduleMap.toJSON()
              });
            }
          }

          worker = new (_jestWorker().Worker)(require.resolve('./testWorker'), {
            exposedMethods: ['worker'],
            forkOptions: {
              serialization: 'json',
              stdio: 'pipe'
            },
            maxRetries: 3,
            numWorkers: this._globalConfig.maxWorkers,
            setupArgs: [{
              serializableResolvers: Array.from(resolvers.values())
            }]
          });
          if (worker.getStdout()) worker.getStdout().pipe(process.stdout);
          if (worker.getStderr()) worker.getStderr().pipe(process.stderr);
          mutex = (0, _throat().default)(this._globalConfig.maxWorkers);

          runTestInWorker = function runTestInWorker(test) {
            return mutex(function _callee2() {
              var promise;
              return _regenerator.default.async(function _callee2$(_context4) {
                while (1) {
                  switch (_context4.prev = _context4.next) {
                    case 0:
                      if (!watcher.isInterrupted()) {
                        _context4.next = 2;
                        break;
                      }

                      return _context4.abrupt("return", Promise.reject());

                    case 2:
                      _context4.next = 4;
                      return _regenerator.default.awrap(_classPrivateFieldGet(_this3, _eventEmitter).emit('test-file-start', [test]));

                    case 4:
                      promise = worker.worker({
                        config: test.context.config,
                        context: (0, _extends2.default)({}, _this3._context, {
                          changedFiles: _this3._context.changedFiles && Array.from(_this3._context.changedFiles),
                          sourcesRelatedToTestsInChangedFiles: _this3._context.sourcesRelatedToTestsInChangedFiles && Array.from(_this3._context.sourcesRelatedToTestsInChangedFiles)
                        }),
                        globalConfig: _this3._globalConfig,
                        path: test.path
                      });

                      if (promise.UNSTABLE_onCustomMessage) {
                        promise.UNSTABLE_onCustomMessage(function (_ref) {
                          var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
                              event = _ref2[0],
                              payload = _ref2[1];

                          return _classPrivateFieldGet(_this3, _eventEmitter).emit(event, payload);
                        });
                      }

                      return _context4.abrupt("return", promise);

                    case 7:
                    case "end":
                      return _context4.stop();
                  }
                }
              }, null, null, null, Promise);
            });
          };

          onInterrupt = new Promise(function (_, reject) {
            watcher.on('change', function (state) {
              if (state.interrupted) {
                reject(new CancelRun());
              }
            });
          });
          runAllTests = Promise.all(tests.map(function (test) {
            return runTestInWorker(test).then(function (result) {
              return _classPrivateFieldGet(_this3, _eventEmitter).emit('test-file-success', [test, result]);
            }, function (error) {
              return _classPrivateFieldGet(_this3, _eventEmitter).emit('test-file-failure', [test, error]);
            });
          }));

          cleanup = function _callee3() {
            var _await$worker$end, forceExited;

            return _regenerator.default.async(function _callee3$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    _context5.next = 2;
                    return _regenerator.default.awrap(worker.end());

                  case 2:
                    _await$worker$end = _context5.sent;
                    forceExited = _await$worker$end.forceExited;

                    if (forceExited) {
                      console.error(_chalk().default.yellow('A worker process has failed to exit gracefully and has been force exited. ' + 'This is likely caused by tests leaking due to improper teardown. ' + 'Try running with --detectOpenHandles to find leaks. ' + 'Active timers can also cause this, ensure that .unref() was called on them.'));
                    }

                  case 5:
                  case "end":
                    return _context5.stop();
                }
              }
            }, null, null, null, Promise);
          };

          return _context6.abrupt("return", Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup));

        case 11:
        case "end":
          return _context6.stop();
      }
    }
  }, null, this, null, Promise);
}

var CancelRun = function (_Error) {
  (0, _inherits2.default)(CancelRun, _Error);

  var _super2 = _createSuper(CancelRun);

  function CancelRun(message) {
    var _this4;

    (0, _classCallCheck2.default)(this, CancelRun);
    _this4 = _super2.call(this, message);
    _this4.name = 'CancelRun';
    return _this4;
  }

  return (0, _createClass2.default)(CancelRun);
}((0, _wrapNativeSuper2.default)(Error));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,