{"version":3,"names":["Object","defineProperty","exports","value","default","globsToMatcher","_picomatch","data","_interopRequireDefault","require","_replacePathSepForGlob","obj","__esModule","globsToMatchersMap","Map","picomatchOptions","dot","globs","length","matchers","map","glob","has","isMatch","matcher","negated","state","negatedExtglob","set","get","path","replacedPath","kept","undefined","negatives","i","matched"],"sources":["globsToMatcher.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = globsToMatcher;\n\nfunction _picomatch() {\n  const data = _interopRequireDefault(require('picomatch'));\n\n  _picomatch = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _replacePathSepForGlob = _interopRequireDefault(\n  require('./replacePathSepForGlob')\n);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst globsToMatchersMap = new Map();\nconst picomatchOptions = {\n  dot: true\n};\n/**\n * Converts a list of globs into a function that matches a path against the\n * globs.\n *\n * Every time picomatch is called, it will parse the glob strings and turn\n * them into regexp instances. Instead of calling picomatch repeatedly with\n * the same globs, we can use this function which will build the picomatch\n * matchers ahead of time and then have an optimized path for determining\n * whether an individual path matches.\n *\n * This function is intended to match the behavior of `micromatch()`.\n *\n * @example\n * const isMatch = globsToMatcher(['*.js', '!*.test.js']);\n * isMatch('pizza.js'); // true\n * isMatch('pizza.test.js'); // false\n */\n\nfunction globsToMatcher(globs) {\n  if (globs.length === 0) {\n    // Since there were no globs given, we can simply have a fast path here and\n    // return with a very simple function.\n    return () => false;\n  }\n\n  const matchers = globs.map(glob => {\n    if (!globsToMatchersMap.has(glob)) {\n      const isMatch = (0, _picomatch().default)(glob, picomatchOptions, true);\n      const matcher = {\n        isMatch,\n        // Matchers that are negated have different behavior than matchers that\n        // are not negated, so we need to store this information ahead of time.\n        negated: isMatch.state.negated || !!isMatch.state.negatedExtglob\n      };\n      globsToMatchersMap.set(glob, matcher);\n    }\n\n    return globsToMatchersMap.get(glob);\n  });\n  return path => {\n    const replacedPath = (0, _replacePathSepForGlob.default)(path);\n    let kept = undefined;\n    let negatives = 0;\n\n    for (let i = 0; i < matchers.length; i++) {\n      const {isMatch, negated} = matchers[i];\n\n      if (negated) {\n        negatives++;\n      }\n\n      const matched = isMatch(replacedPath);\n\n      if (!matched && negated) {\n        // The path was not matched, and the matcher is a negated matcher, so we\n        // want to omit the path. This means that the negative matcher is\n        // filtering the path out.\n        kept = false;\n      } else if (matched && !negated) {\n        // The path was matched, and the matcher is not a negated matcher, so we\n        // want to keep the path.\n        kept = true;\n      }\n    } // If all of the globs were negative globs, then we want to include the path\n    // as long as it was not explicitly not kept. Otherwise only include\n    // the path if it was kept. This allows sets of globs that are all negated\n    // to allow some paths to be matched, while sets of globs that are mixed\n    // negated and non-negated to cause the negated matchers to only omit paths\n    // and not keep them.\n\n    return negatives === matchers.length ? kept !== false : !!kept;\n  };\n}\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,cAAlB;;AAEA,SAASC,UAAT,GAAsB;EACpB,IAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAAnC;;EAEAH,UAAU,GAAG,sBAAY;IACvB,OAAOC,IAAP;EACD,CAFD;;EAIA,OAAOA,IAAP;AACD;;AAED,IAAIG,sBAAsB,GAAGF,sBAAsB,CACjDC,OAAO,CAAC,yBAAD,CAD0C,CAAnD;;AAIA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;EACnC,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;IAACP,OAAO,EAAEO;EAAV,CAArC;AACD;;AAQD,IAAME,kBAAkB,GAAG,IAAIC,GAAJ,EAA3B;AACA,IAAMC,gBAAgB,GAAG;EACvBC,GAAG,EAAE;AADkB,CAAzB;;AAqBA,SAASX,cAAT,CAAwBY,KAAxB,EAA+B;EAC7B,IAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;IAGtB,OAAO;MAAA,OAAM,KAAN;IAAA,CAAP;EACD;;EAED,IAAMC,QAAQ,GAAGF,KAAK,CAACG,GAAN,CAAU,UAAAC,IAAI,EAAI;IACjC,IAAI,CAACR,kBAAkB,CAACS,GAAnB,CAAuBD,IAAvB,CAAL,EAAmC;MACjC,IAAME,OAAO,GAAG,CAAC,GAAGjB,UAAU,GAAGF,OAAjB,EAA0BiB,IAA1B,EAAgCN,gBAAhC,EAAkD,IAAlD,CAAhB;MACA,IAAMS,OAAO,GAAG;QACdD,OAAO,EAAPA,OADc;QAIdE,OAAO,EAAEF,OAAO,CAACG,KAAR,CAAcD,OAAd,IAAyB,CAAC,CAACF,OAAO,CAACG,KAAR,CAAcC;MAJpC,CAAhB;MAMAd,kBAAkB,CAACe,GAAnB,CAAuBP,IAAvB,EAA6BG,OAA7B;IACD;;IAED,OAAOX,kBAAkB,CAACgB,GAAnB,CAAuBR,IAAvB,CAAP;EACD,CAbgB,CAAjB;EAcA,OAAO,UAAAS,IAAI,EAAI;IACb,IAAMC,YAAY,GAAG,CAAC,GAAGrB,sBAAsB,CAACN,OAA3B,EAAoC0B,IAApC,CAArB;IACA,IAAIE,IAAI,GAAGC,SAAX;IACA,IAAIC,SAAS,GAAG,CAAhB;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,QAAQ,CAACD,MAA7B,EAAqCiB,CAAC,EAAtC,EAA0C;MACxC,kBAA2BhB,QAAQ,CAACgB,CAAD,CAAnC;MAAA,IAAOZ,OAAP,eAAOA,OAAP;MAAA,IAAgBE,OAAhB,eAAgBA,OAAhB;;MAEA,IAAIA,OAAJ,EAAa;QACXS,SAAS;MACV;;MAED,IAAME,OAAO,GAAGb,OAAO,CAACQ,YAAD,CAAvB;;MAEA,IAAI,CAACK,OAAD,IAAYX,OAAhB,EAAyB;QAIvBO,IAAI,GAAG,KAAP;MACD,CALD,MAKO,IAAII,OAAO,IAAI,CAACX,OAAhB,EAAyB;QAG9BO,IAAI,GAAG,IAAP;MACD;IACF;;IAOD,OAAOE,SAAS,KAAKf,QAAQ,CAACD,MAAvB,GAAgCc,IAAI,KAAK,KAAzC,GAAiD,CAAC,CAACA,IAA1D;EACD,CAhCD;AAiCD"}