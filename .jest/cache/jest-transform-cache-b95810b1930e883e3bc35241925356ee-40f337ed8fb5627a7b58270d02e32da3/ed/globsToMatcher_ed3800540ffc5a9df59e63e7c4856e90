d212cffba548017eaf421a972255cc68
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = globsToMatcher;

function _picomatch() {
  var data = _interopRequireDefault(require('picomatch'));

  _picomatch = function _picomatch() {
    return data;
  };

  return data;
}

var _replacePathSepForGlob = _interopRequireDefault(require('./replacePathSepForGlob'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var globsToMatchersMap = new Map();
var picomatchOptions = {
  dot: true
};

function globsToMatcher(globs) {
  if (globs.length === 0) {
    return function () {
      return false;
    };
  }

  var matchers = globs.map(function (glob) {
    if (!globsToMatchersMap.has(glob)) {
      var isMatch = (0, _picomatch().default)(glob, picomatchOptions, true);
      var matcher = {
        isMatch: isMatch,
        negated: isMatch.state.negated || !!isMatch.state.negatedExtglob
      };
      globsToMatchersMap.set(glob, matcher);
    }

    return globsToMatchersMap.get(glob);
  });
  return function (path) {
    var replacedPath = (0, _replacePathSepForGlob.default)(path);
    var kept = undefined;
    var negatives = 0;

    for (var i = 0; i < matchers.length; i++) {
      var _matchers$i = matchers[i],
          isMatch = _matchers$i.isMatch,
          negated = _matchers$i.negated;

      if (negated) {
        negatives++;
      }

      var matched = isMatch(replacedPath);

      if (!matched && negated) {
        kept = false;
      } else if (matched && !negated) {
        kept = true;
      }
    }

    return negatives === matchers.length ? kept !== false : !!kept;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJnbG9ic1RvTWF0Y2hlciIsIl9waWNvbWF0Y2giLCJkYXRhIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVwbGFjZVBhdGhTZXBGb3JHbG9iIiwib2JqIiwiX19lc01vZHVsZSIsImdsb2JzVG9NYXRjaGVyc01hcCIsIk1hcCIsInBpY29tYXRjaE9wdGlvbnMiLCJkb3QiLCJnbG9icyIsImxlbmd0aCIsIm1hdGNoZXJzIiwibWFwIiwiZ2xvYiIsImhhcyIsImlzTWF0Y2giLCJtYXRjaGVyIiwibmVnYXRlZCIsInN0YXRlIiwibmVnYXRlZEV4dGdsb2IiLCJzZXQiLCJnZXQiLCJwYXRoIiwicmVwbGFjZWRQYXRoIiwia2VwdCIsInVuZGVmaW5lZCIsIm5lZ2F0aXZlcyIsImkiLCJtYXRjaGVkIl0sInNvdXJjZXMiOlsiZ2xvYnNUb01hdGNoZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdsb2JzVG9NYXRjaGVyO1xuXG5mdW5jdGlvbiBfcGljb21hdGNoKCkge1xuICBjb25zdCBkYXRhID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCdwaWNvbWF0Y2gnKSk7XG5cbiAgX3BpY29tYXRjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxudmFyIF9yZXBsYWNlUGF0aFNlcEZvckdsb2IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KFxuICByZXF1aXJlKCcuL3JlcGxhY2VQYXRoU2VwRm9yR2xvYicpXG4pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge2RlZmF1bHQ6IG9ian07XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmNvbnN0IGdsb2JzVG9NYXRjaGVyc01hcCA9IG5ldyBNYXAoKTtcbmNvbnN0IHBpY29tYXRjaE9wdGlvbnMgPSB7XG4gIGRvdDogdHJ1ZVxufTtcbi8qKlxuICogQ29udmVydHMgYSBsaXN0IG9mIGdsb2JzIGludG8gYSBmdW5jdGlvbiB0aGF0IG1hdGNoZXMgYSBwYXRoIGFnYWluc3QgdGhlXG4gKiBnbG9icy5cbiAqXG4gKiBFdmVyeSB0aW1lIHBpY29tYXRjaCBpcyBjYWxsZWQsIGl0IHdpbGwgcGFyc2UgdGhlIGdsb2Igc3RyaW5ncyBhbmQgdHVyblxuICogdGhlbSBpbnRvIHJlZ2V4cCBpbnN0YW5jZXMuIEluc3RlYWQgb2YgY2FsbGluZyBwaWNvbWF0Y2ggcmVwZWF0ZWRseSB3aXRoXG4gKiB0aGUgc2FtZSBnbG9icywgd2UgY2FuIHVzZSB0aGlzIGZ1bmN0aW9uIHdoaWNoIHdpbGwgYnVpbGQgdGhlIHBpY29tYXRjaFxuICogbWF0Y2hlcnMgYWhlYWQgb2YgdGltZSBhbmQgdGhlbiBoYXZlIGFuIG9wdGltaXplZCBwYXRoIGZvciBkZXRlcm1pbmluZ1xuICogd2hldGhlciBhbiBpbmRpdmlkdWFsIHBhdGggbWF0Y2hlcy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGludGVuZGVkIHRvIG1hdGNoIHRoZSBiZWhhdmlvciBvZiBgbWljcm9tYXRjaCgpYC5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgaXNNYXRjaCA9IGdsb2JzVG9NYXRjaGVyKFsnKi5qcycsICchKi50ZXN0LmpzJ10pO1xuICogaXNNYXRjaCgncGl6emEuanMnKTsgLy8gdHJ1ZVxuICogaXNNYXRjaCgncGl6emEudGVzdC5qcycpOyAvLyBmYWxzZVxuICovXG5cbmZ1bmN0aW9uIGdsb2JzVG9NYXRjaGVyKGdsb2JzKSB7XG4gIGlmIChnbG9icy5sZW5ndGggPT09IDApIHtcbiAgICAvLyBTaW5jZSB0aGVyZSB3ZXJlIG5vIGdsb2JzIGdpdmVuLCB3ZSBjYW4gc2ltcGx5IGhhdmUgYSBmYXN0IHBhdGggaGVyZSBhbmRcbiAgICAvLyByZXR1cm4gd2l0aCBhIHZlcnkgc2ltcGxlIGZ1bmN0aW9uLlxuICAgIHJldHVybiAoKSA9PiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IG1hdGNoZXJzID0gZ2xvYnMubWFwKGdsb2IgPT4ge1xuICAgIGlmICghZ2xvYnNUb01hdGNoZXJzTWFwLmhhcyhnbG9iKSkge1xuICAgICAgY29uc3QgaXNNYXRjaCA9ICgwLCBfcGljb21hdGNoKCkuZGVmYXVsdCkoZ2xvYiwgcGljb21hdGNoT3B0aW9ucywgdHJ1ZSk7XG4gICAgICBjb25zdCBtYXRjaGVyID0ge1xuICAgICAgICBpc01hdGNoLFxuICAgICAgICAvLyBNYXRjaGVycyB0aGF0IGFyZSBuZWdhdGVkIGhhdmUgZGlmZmVyZW50IGJlaGF2aW9yIHRoYW4gbWF0Y2hlcnMgdGhhdFxuICAgICAgICAvLyBhcmUgbm90IG5lZ2F0ZWQsIHNvIHdlIG5lZWQgdG8gc3RvcmUgdGhpcyBpbmZvcm1hdGlvbiBhaGVhZCBvZiB0aW1lLlxuICAgICAgICBuZWdhdGVkOiBpc01hdGNoLnN0YXRlLm5lZ2F0ZWQgfHwgISFpc01hdGNoLnN0YXRlLm5lZ2F0ZWRFeHRnbG9iXG4gICAgICB9O1xuICAgICAgZ2xvYnNUb01hdGNoZXJzTWFwLnNldChnbG9iLCBtYXRjaGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2xvYnNUb01hdGNoZXJzTWFwLmdldChnbG9iKTtcbiAgfSk7XG4gIHJldHVybiBwYXRoID0+IHtcbiAgICBjb25zdCByZXBsYWNlZFBhdGggPSAoMCwgX3JlcGxhY2VQYXRoU2VwRm9yR2xvYi5kZWZhdWx0KShwYXRoKTtcbiAgICBsZXQga2VwdCA9IHVuZGVmaW5lZDtcbiAgICBsZXQgbmVnYXRpdmVzID0gMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0Y2hlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHtpc01hdGNoLCBuZWdhdGVkfSA9IG1hdGNoZXJzW2ldO1xuXG4gICAgICBpZiAobmVnYXRlZCkge1xuICAgICAgICBuZWdhdGl2ZXMrKztcbiAgICAgIH1cblxuICAgICAgY29uc3QgbWF0Y2hlZCA9IGlzTWF0Y2gocmVwbGFjZWRQYXRoKTtcblxuICAgICAgaWYgKCFtYXRjaGVkICYmIG5lZ2F0ZWQpIHtcbiAgICAgICAgLy8gVGhlIHBhdGggd2FzIG5vdCBtYXRjaGVkLCBhbmQgdGhlIG1hdGNoZXIgaXMgYSBuZWdhdGVkIG1hdGNoZXIsIHNvIHdlXG4gICAgICAgIC8vIHdhbnQgdG8gb21pdCB0aGUgcGF0aC4gVGhpcyBtZWFucyB0aGF0IHRoZSBuZWdhdGl2ZSBtYXRjaGVyIGlzXG4gICAgICAgIC8vIGZpbHRlcmluZyB0aGUgcGF0aCBvdXQuXG4gICAgICAgIGtlcHQgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAobWF0Y2hlZCAmJiAhbmVnYXRlZCkge1xuICAgICAgICAvLyBUaGUgcGF0aCB3YXMgbWF0Y2hlZCwgYW5kIHRoZSBtYXRjaGVyIGlzIG5vdCBhIG5lZ2F0ZWQgbWF0Y2hlciwgc28gd2VcbiAgICAgICAgLy8gd2FudCB0byBrZWVwIHRoZSBwYXRoLlxuICAgICAgICBrZXB0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IC8vIElmIGFsbCBvZiB0aGUgZ2xvYnMgd2VyZSBuZWdhdGl2ZSBnbG9icywgdGhlbiB3ZSB3YW50IHRvIGluY2x1ZGUgdGhlIHBhdGhcbiAgICAvLyBhcyBsb25nIGFzIGl0IHdhcyBub3QgZXhwbGljaXRseSBub3Qga2VwdC4gT3RoZXJ3aXNlIG9ubHkgaW5jbHVkZVxuICAgIC8vIHRoZSBwYXRoIGlmIGl0IHdhcyBrZXB0LiBUaGlzIGFsbG93cyBzZXRzIG9mIGdsb2JzIHRoYXQgYXJlIGFsbCBuZWdhdGVkXG4gICAgLy8gdG8gYWxsb3cgc29tZSBwYXRocyB0byBiZSBtYXRjaGVkLCB3aGlsZSBzZXRzIG9mIGdsb2JzIHRoYXQgYXJlIG1peGVkXG4gICAgLy8gbmVnYXRlZCBhbmQgbm9uLW5lZ2F0ZWQgdG8gY2F1c2UgdGhlIG5lZ2F0ZWQgbWF0Y2hlcnMgdG8gb25seSBvbWl0IHBhdGhzXG4gICAgLy8gYW5kIG5vdCBrZWVwIHRoZW0uXG5cbiAgICByZXR1cm4gbmVnYXRpdmVzID09PSBtYXRjaGVycy5sZW5ndGggPyBrZXB0ICE9PSBmYWxzZSA6ICEha2VwdDtcbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7RUFDM0NDLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0JDLGNBQWxCOztBQUVBLFNBQVNDLFVBQVQsR0FBc0I7RUFDcEIsSUFBTUMsSUFBSSxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLFdBQUQsQ0FBUixDQUFuQzs7RUFFQUgsVUFBVSxHQUFHLHNCQUFZO0lBQ3ZCLE9BQU9DLElBQVA7RUFDRCxDQUZEOztFQUlBLE9BQU9BLElBQVA7QUFDRDs7QUFFRCxJQUFJRyxzQkFBc0IsR0FBR0Ysc0JBQXNCLENBQ2pEQyxPQUFPLENBQUMseUJBQUQsQ0FEMEMsQ0FBbkQ7O0FBSUEsU0FBU0Qsc0JBQVQsQ0FBZ0NHLEdBQWhDLEVBQXFDO0VBQ25DLE9BQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QjtJQUFDUCxPQUFPLEVBQUVPO0VBQVYsQ0FBckM7QUFDRDs7QUFRRCxJQUFNRSxrQkFBa0IsR0FBRyxJQUFJQyxHQUFKLEVBQTNCO0FBQ0EsSUFBTUMsZ0JBQWdCLEdBQUc7RUFDdkJDLEdBQUcsRUFBRTtBQURrQixDQUF6Qjs7QUFxQkEsU0FBU1gsY0FBVCxDQUF3QlksS0FBeEIsRUFBK0I7RUFDN0IsSUFBSUEsS0FBSyxDQUFDQyxNQUFOLEtBQWlCLENBQXJCLEVBQXdCO0lBR3RCLE9BQU87TUFBQSxPQUFNLEtBQU47SUFBQSxDQUFQO0VBQ0Q7O0VBRUQsSUFBTUMsUUFBUSxHQUFHRixLQUFLLENBQUNHLEdBQU4sQ0FBVSxVQUFBQyxJQUFJLEVBQUk7SUFDakMsSUFBSSxDQUFDUixrQkFBa0IsQ0FBQ1MsR0FBbkIsQ0FBdUJELElBQXZCLENBQUwsRUFBbUM7TUFDakMsSUFBTUUsT0FBTyxHQUFHLENBQUMsR0FBR2pCLFVBQVUsR0FBR0YsT0FBakIsRUFBMEJpQixJQUExQixFQUFnQ04sZ0JBQWhDLEVBQWtELElBQWxELENBQWhCO01BQ0EsSUFBTVMsT0FBTyxHQUFHO1FBQ2RELE9BQU8sRUFBUEEsT0FEYztRQUlkRSxPQUFPLEVBQUVGLE9BQU8sQ0FBQ0csS0FBUixDQUFjRCxPQUFkLElBQXlCLENBQUMsQ0FBQ0YsT0FBTyxDQUFDRyxLQUFSLENBQWNDO01BSnBDLENBQWhCO01BTUFkLGtCQUFrQixDQUFDZSxHQUFuQixDQUF1QlAsSUFBdkIsRUFBNkJHLE9BQTdCO0lBQ0Q7O0lBRUQsT0FBT1gsa0JBQWtCLENBQUNnQixHQUFuQixDQUF1QlIsSUFBdkIsQ0FBUDtFQUNELENBYmdCLENBQWpCO0VBY0EsT0FBTyxVQUFBUyxJQUFJLEVBQUk7SUFDYixJQUFNQyxZQUFZLEdBQUcsQ0FBQyxHQUFHckIsc0JBQXNCLENBQUNOLE9BQTNCLEVBQW9DMEIsSUFBcEMsQ0FBckI7SUFDQSxJQUFJRSxJQUFJLEdBQUdDLFNBQVg7SUFDQSxJQUFJQyxTQUFTLEdBQUcsQ0FBaEI7O0lBRUEsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHaEIsUUFBUSxDQUFDRCxNQUE3QixFQUFxQ2lCLENBQUMsRUFBdEMsRUFBMEM7TUFDeEMsa0JBQTJCaEIsUUFBUSxDQUFDZ0IsQ0FBRCxDQUFuQztNQUFBLElBQU9aLE9BQVAsZUFBT0EsT0FBUDtNQUFBLElBQWdCRSxPQUFoQixlQUFnQkEsT0FBaEI7O01BRUEsSUFBSUEsT0FBSixFQUFhO1FBQ1hTLFNBQVM7TUFDVjs7TUFFRCxJQUFNRSxPQUFPLEdBQUdiLE9BQU8sQ0FBQ1EsWUFBRCxDQUF2Qjs7TUFFQSxJQUFJLENBQUNLLE9BQUQsSUFBWVgsT0FBaEIsRUFBeUI7UUFJdkJPLElBQUksR0FBRyxLQUFQO01BQ0QsQ0FMRCxNQUtPLElBQUlJLE9BQU8sSUFBSSxDQUFDWCxPQUFoQixFQUF5QjtRQUc5Qk8sSUFBSSxHQUFHLElBQVA7TUFDRDtJQUNGOztJQU9ELE9BQU9FLFNBQVMsS0FBS2YsUUFBUSxDQUFDRCxNQUF2QixHQUFnQ2MsSUFBSSxLQUFLLEtBQXpDLEdBQWlELENBQUMsQ0FBQ0EsSUFBMUQ7RUFDRCxDQWhDRDtBQWlDRCJ9