1b83c3b029f50c479ebfe1663cb7e0ae
'use strict';

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault2(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = runTest;

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function fs() {
  var data = _interopRequireWildcard(require('graceful-fs'));

  fs = function fs() {
    return data;
  };

  return data;
}

function _sourceMapSupport() {
  var data = _interopRequireDefault(require('source-map-support'));

  _sourceMapSupport = function _sourceMapSupport() {
    return data;
  };

  return data;
}

function _console() {
  var data = require('@jest/console');

  _console = function _console() {
    return data;
  };

  return data;
}

function _transform() {
  var data = require('@jest/transform');

  _transform = function _transform() {
    return data;
  };

  return data;
}

function docblock() {
  var data = _interopRequireWildcard(require('jest-docblock'));

  docblock = function docblock() {
    return data;
  };

  return data;
}

function _jestLeakDetector() {
  var data = _interopRequireDefault(require('jest-leak-detector'));

  _jestLeakDetector = function _jestLeakDetector() {
    return data;
  };

  return data;
}

function _jestMessageUtil() {
  var data = require('jest-message-util');

  _jestMessageUtil = function _jestMessageUtil() {
    return data;
  };

  return data;
}

function _jestResolve() {
  var data = require('jest-resolve');

  _jestResolve = function _jestResolve() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== 'object' && typeof obj !== 'function') {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function freezeConsole(testConsole, config) {
  testConsole._log = function fakeConsolePush(_type, message) {
    var error = new (_jestUtil().ErrorWithStack)(_chalk().default.red(_chalk().default.bold('Cannot log after tests are done.') + " Did you forget to wait for something async in your test?") + "\nAttempted to log \"" + message + "\".", fakeConsolePush);
    var formattedError = (0, _jestMessageUtil().formatExecError)(error, config, {
      noStackTrace: false
    }, undefined, true);
    process.stderr.write("\n" + formattedError + "\n");
    process.exitCode = 1;
  };
}

function runTestInternal(path, globalConfig, projectConfig, resolver, context, sendMessageToJest) {
  var testSource, docblockPragmas, customEnvironment, testEnvironment, cacheFS, transformer, TestEnvironment, testFramework, Runtime, consoleOut, consoleFormatter, testConsole, extraTestEnvironmentOptions, docblockEnvironmentOptions, environment, leakDetector, runtime, start, _iterator, _step, _path, esm, setupFile, sourcemapOptions, realExit, collectV8Coverage, result, testCount, end, testRuntime, coverage, coverageKeys, v8Coverage, _globalThis$gc;

  return _regenerator.default.async(function runTestInternal$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          testSource = fs().readFileSync(path, 'utf8');
          docblockPragmas = docblock().parse(docblock().extract(testSource));
          customEnvironment = docblockPragmas['jest-environment'];
          testEnvironment = projectConfig.testEnvironment;

          if (!customEnvironment) {
            _context.next = 8;
            break;
          }

          if (!Array.isArray(customEnvironment)) {
            _context.next = 7;
            break;
          }

          throw new Error("You can only define a single test environment through docblocks, got \"" + customEnvironment.join(', ') + "\"");

        case 7:
          testEnvironment = (0, _jestResolve().resolveTestEnvironment)((0, _extends2.default)({}, projectConfig, {
            requireResolveFunction: require.resolve,
            testEnvironment: customEnvironment
          }));

        case 8:
          cacheFS = new Map([[path, testSource]]);
          _context.next = 11;
          return _regenerator.default.awrap((0, _transform().createScriptTransformer)(projectConfig, cacheFS));

        case 11:
          transformer = _context.sent;
          _context.next = 14;
          return _regenerator.default.awrap(transformer.requireAndTranspileModule(testEnvironment));

        case 14:
          TestEnvironment = _context.sent;
          _context.next = 17;
          return _regenerator.default.awrap(transformer.requireAndTranspileModule(process.env.JEST_JASMINE === '1' ? require.resolve('jest-jasmine2') : projectConfig.testRunner));

        case 17:
          testFramework = _context.sent;
          Runtime = (0, _jestUtil().interopRequireDefault)(projectConfig.runtime ? require(projectConfig.runtime) : require('jest-runtime')).default;
          consoleOut = globalConfig.useStderr ? process.stderr : process.stdout;

          consoleFormatter = function consoleFormatter(type, message) {
            return (0, _console().getConsoleOutput)(_console().BufferedConsole.write([], type, message, 4), projectConfig, globalConfig);
          };

          if (globalConfig.silent) {
            testConsole = new (_console().NullConsole)(consoleOut, consoleOut, consoleFormatter);
          } else if (globalConfig.verbose) {
            testConsole = new (_console().CustomConsole)(consoleOut, consoleOut, consoleFormatter);
          } else {
            testConsole = new (_console().BufferedConsole)();
          }

          docblockEnvironmentOptions = docblockPragmas['jest-environment-options'];

          if (typeof docblockEnvironmentOptions === 'string') {
            extraTestEnvironmentOptions = JSON.parse(docblockEnvironmentOptions);
          }

          environment = new TestEnvironment({
            globalConfig: globalConfig,
            projectConfig: extraTestEnvironmentOptions ? (0, _extends2.default)({}, projectConfig, {
              testEnvironmentOptions: (0, _extends2.default)({}, projectConfig.testEnvironmentOptions, extraTestEnvironmentOptions)
            }) : projectConfig
          }, {
            console: testConsole,
            docblockPragmas: docblockPragmas,
            testPath: path
          });

          if (typeof environment.getVmContext !== 'function') {
            console.error("Test environment found at \"" + testEnvironment + "\" does not export a \"getVmContext\" method, which is mandatory from Jest 27. This method is a replacement for \"runScript\".");
            process.exit(1);
          }

          leakDetector = projectConfig.detectLeaks ? new (_jestLeakDetector().default)(environment) : null;
          (0, _jestUtil().setGlobal)(environment.global, 'console', testConsole);
          runtime = new Runtime(projectConfig, environment, resolver, transformer, cacheFS, {
            changedFiles: context.changedFiles,
            collectCoverage: globalConfig.collectCoverage,
            collectCoverageFrom: globalConfig.collectCoverageFrom,
            collectCoverageOnlyFrom: globalConfig.collectCoverageOnlyFrom,
            coverageProvider: globalConfig.coverageProvider,
            sourcesRelatedToTestsInChangedFiles: context.sourcesRelatedToTestsInChangedFiles
          }, path);
          start = Date.now();
          _iterator = _createForOfIteratorHelperLoose(projectConfig.setupFiles);

        case 31:
          if ((_step = _iterator()).done) {
            _context.next = 45;
            break;
          }

          _path = _step.value;
          esm = runtime.unstable_shouldLoadAsEsm(_path);

          if (!esm) {
            _context.next = 39;
            break;
          }

          _context.next = 37;
          return _regenerator.default.awrap(runtime.unstable_importModule(_path));

        case 37:
          _context.next = 43;
          break;

        case 39:
          setupFile = runtime.requireModule(_path);

          if (!(typeof setupFile === 'function')) {
            _context.next = 43;
            break;
          }

          _context.next = 43;
          return _regenerator.default.awrap(setupFile());

        case 43:
          _context.next = 31;
          break;

        case 45:
          sourcemapOptions = {
            environment: 'node',
            handleUncaughtExceptions: false,
            retrieveSourceMap: function retrieveSourceMap(source) {
              var _runtime$getSourceMap;

              var sourceMapSource = (_runtime$getSourceMap = runtime.getSourceMaps()) === null || _runtime$getSourceMap === void 0 ? void 0 : _runtime$getSourceMap.get(source);

              if (sourceMapSource) {
                try {
                  return {
                    map: JSON.parse(fs().readFileSync(sourceMapSource, 'utf8')),
                    url: source
                  };
                } catch (_unused) {}
              }

              return null;
            }
          };
          runtime.requireInternalModule(require.resolve('source-map-support')).install(sourcemapOptions);

          _sourceMapSupport().default.install(sourcemapOptions);

          if (environment.global && environment.global.process && environment.global.process.exit) {
            realExit = environment.global.process.exit;

            environment.global.process.exit = function exit() {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              var error = new (_jestUtil().ErrorWithStack)("process.exit called with \"" + args.join(', ') + "\"", exit);
              var formattedError = (0, _jestMessageUtil().formatExecError)(error, projectConfig, {
                noStackTrace: false
              }, undefined, true);
              process.stderr.write(formattedError);
              return realExit.apply(void 0, args);
            };
          }

          collectV8Coverage = globalConfig.coverageProvider === 'v8' && typeof environment.getVmContext === 'function';
          _context.prev = 50;
          _context.next = 53;
          return _regenerator.default.awrap(environment.setup());

        case 53:
          _context.prev = 53;

          if (!collectV8Coverage) {
            _context.next = 57;
            break;
          }

          _context.next = 57;
          return _regenerator.default.awrap(runtime.collectV8Coverage());

        case 57:
          _context.next = 59;
          return _regenerator.default.awrap(testFramework(globalConfig, projectConfig, environment, runtime, path, sendMessageToJest));

        case 59:
          result = _context.sent;
          _context.next = 66;
          break;

        case 62:
          _context.prev = 62;
          _context.t0 = _context["catch"](53);
          _context.t0.stack;
          throw _context.t0;

        case 66:
          _context.prev = 66;

          if (!collectV8Coverage) {
            _context.next = 70;
            break;
          }

          _context.next = 70;
          return _regenerator.default.awrap(runtime.stopCollectingV8Coverage());

        case 70:
          return _context.finish(66);

        case 71:
          freezeConsole(testConsole, projectConfig);
          testCount = result.numPassingTests + result.numFailingTests + result.numPendingTests + result.numTodoTests;
          end = Date.now();
          testRuntime = end - start;
          result.perfStats = {
            end: end,
            runtime: testRuntime,
            slow: testRuntime / 1000 > projectConfig.slowTestThreshold,
            start: start
          };
          result.testFilePath = path;
          result.console = testConsole.getBuffer();
          result.skipped = testCount === result.numPendingTests;
          result.displayName = projectConfig.displayName;
          coverage = runtime.getAllCoverageInfoCopy();

          if (coverage) {
            coverageKeys = Object.keys(coverage);

            if (coverageKeys.length) {
              result.coverage = coverage;
            }
          }

          if (collectV8Coverage) {
            v8Coverage = runtime.getAllV8CoverageInfoCopy();

            if (v8Coverage && v8Coverage.length > 0) {
              result.v8Coverage = v8Coverage;
            }
          }

          if (globalConfig.logHeapUsage) {
            (_globalThis$gc = globalThis.gc) === null || _globalThis$gc === void 0 ? void 0 : _globalThis$gc.call(globalThis);
            result.memoryUsage = process.memoryUsage().heapUsed;
          }

          return _context.abrupt("return", new Promise(function (resolve) {
            setImmediate(function () {
              return resolve({
                leakDetector: leakDetector,
                result: result
              });
            });
          }));

        case 85:
          _context.prev = 85;
          runtime.teardown();
          _context.next = 89;
          return _regenerator.default.awrap(environment.teardown());

        case 89:
          _sourceMapSupport().default.resetRetrieveHandlers();

          return _context.finish(85);

        case 91:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[50,, 85, 91], [53, 62, 66, 71]], Promise);
}

function runTest(path, globalConfig, config, resolver, context, sendMessageToJest) {
  var _await$runTestInterna, leakDetector, result;

  return _regenerator.default.async(function runTest$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return _regenerator.default.awrap(runTestInternal(path, globalConfig, config, resolver, context, sendMessageToJest));

        case 2:
          _await$runTestInterna = _context2.sent;
          leakDetector = _await$runTestInterna.leakDetector;
          result = _await$runTestInterna.result;

          if (!leakDetector) {
            _context2.next = 13;
            break;
          }

          _context2.next = 8;
          return _regenerator.default.awrap(new Promise(function (resolve) {
            return setTimeout(resolve, 100);
          }));

        case 8:
          _context2.next = 10;
          return _regenerator.default.awrap(leakDetector.isLeaking());

        case 10:
          result.leaks = _context2.sent;
          _context2.next = 14;
          break;

        case 13:
          result.leaks = false;

        case 14:
          return _context2.abrupt("return", result);

        case 15:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, null, Promise);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,