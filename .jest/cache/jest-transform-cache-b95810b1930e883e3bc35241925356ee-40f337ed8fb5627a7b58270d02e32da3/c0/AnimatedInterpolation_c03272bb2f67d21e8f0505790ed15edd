22c97ef17a4c1fc4500ba44ed573af59
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var AnimatedNode = require('./AnimatedNode');

var AnimatedWithChildren = require('./AnimatedWithChildren');

var NativeAnimatedHelper = require('../NativeAnimatedHelper');

var invariant = require('invariant');

var normalizeColor = require('../../StyleSheet/normalizeColor');

var linear = function linear(t) {
  return t;
};

function createInterpolation(config) {
  if (config.outputRange && typeof config.outputRange[0] === 'string') {
    return createInterpolationFromStringOutputRange(config);
  }

  var outputRange = config.outputRange;
  checkInfiniteRange('outputRange', outputRange);
  var inputRange = config.inputRange;
  checkInfiniteRange('inputRange', inputRange);
  checkValidInputRange(inputRange);
  invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');
  var easing = config.easing || linear;
  var extrapolateLeft = 'extend';

  if (config.extrapolateLeft !== undefined) {
    extrapolateLeft = config.extrapolateLeft;
  } else if (config.extrapolate !== undefined) {
    extrapolateLeft = config.extrapolate;
  }

  var extrapolateRight = 'extend';

  if (config.extrapolateRight !== undefined) {
    extrapolateRight = config.extrapolateRight;
  } else if (config.extrapolate !== undefined) {
    extrapolateRight = config.extrapolate;
  }

  return function (input) {
    invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');
    var range = findRange(input, inputRange);
    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);
  };
}

function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {
  var result = input;

  if (result < inputMin) {
    if (extrapolateLeft === 'identity') {
      return result;
    } else if (extrapolateLeft === 'clamp') {
      result = inputMin;
    } else if (extrapolateLeft === 'extend') {}
  }

  if (result > inputMax) {
    if (extrapolateRight === 'identity') {
      return result;
    } else if (extrapolateRight === 'clamp') {
      result = inputMax;
    } else if (extrapolateRight === 'extend') {}
  }

  if (outputMin === outputMax) {
    return outputMin;
  }

  if (inputMin === inputMax) {
    if (input <= inputMin) {
      return outputMin;
    }

    return outputMax;
  }

  if (inputMin === -Infinity) {
    result = -result;
  } else if (inputMax === Infinity) {
    result = result - inputMin;
  } else {
    result = (result - inputMin) / (inputMax - inputMin);
  }

  result = easing(result);

  if (outputMin === -Infinity) {
    result = -result;
  } else if (outputMax === Infinity) {
    result = result + outputMin;
  } else {
    result = result * (outputMax - outputMin) + outputMin;
  }

  return result;
}

function colorToRgba(input) {
  var normalizedColor = normalizeColor(input);

  if (normalizedColor === null || typeof normalizedColor !== 'number') {
    return input;
  }

  normalizedColor = normalizedColor || 0;
  var r = (normalizedColor & 0xff000000) >>> 24;
  var g = (normalizedColor & 0x00ff0000) >>> 16;
  var b = (normalizedColor & 0x0000ff00) >>> 8;
  var a = (normalizedColor & 0x000000ff) / 255;
  return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
}

var stringShapeRegex = /[+-]?(?:\d+\.?\d*|\.\d+)(?:[eE][+-]?\d+)?/g;

function createInterpolationFromStringOutputRange(config) {
  var outputRange = config.outputRange;
  invariant(outputRange.length >= 2, 'Bad output range');
  outputRange = outputRange.map(colorToRgba);
  checkPattern(outputRange);
  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {
    return [];
  });
  outputRange.forEach(function (value) {
    value.match(stringShapeRegex).forEach(function (number, i) {
      outputRanges[i].push(+number);
    });
  });
  var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {
    return createInterpolation((0, _extends2.default)({}, config, {
      outputRange: outputRanges[i]
    }));
  });
  var shouldRound = isRgbOrRgba(outputRange[0]);
  return function (input) {
    var i = 0;
    return outputRange[0].replace(stringShapeRegex, function () {
      var val = +interpolations[i++](input);

      if (shouldRound) {
        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;
      }

      return String(val);
    });
  };
}

function isRgbOrRgba(range) {
  return typeof range === 'string' && range.startsWith('rgb');
}

function checkPattern(arr) {
  var pattern = arr[0].replace(stringShapeRegex, '');

  for (var i = 1; i < arr.length; ++i) {
    invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);
  }
}

function findRange(input, inputRange) {
  var i;

  for (i = 1; i < inputRange.length - 1; ++i) {
    if (inputRange[i] >= input) {
      break;
    }
  }

  return i - 1;
}

function checkValidInputRange(arr) {
  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');

  for (var i = 1; i < arr.length; ++i) {
    invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically non-decreasing ' + arr);
  }
}

function checkInfiniteRange(name, arr) {
  invariant(arr.length >= 2, name + ' must have at least 2 elements');
  invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);
}

var AnimatedInterpolation = function (_AnimatedWithChildren) {
  (0, _inherits2.default)(AnimatedInterpolation, _AnimatedWithChildren);

  var _super = _createSuper(AnimatedInterpolation);

  function AnimatedInterpolation(parent, config) {
    var _this;

    (0, _classCallCheck2.default)(this, AnimatedInterpolation);
    _this = _super.call(this);
    _this._parent = parent;
    _this._config = config;
    _this._interpolation = createInterpolation(config);
    return _this;
  }

  (0, _createClass2.default)(AnimatedInterpolation, [{
    key: "__makeNative",
    value: function __makeNative(platformConfig) {
      this._parent.__makeNative(platformConfig);

      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedInterpolation.prototype), "__makeNative", this).call(this, platformConfig);
    }
  }, {
    key: "__getValue",
    value: function __getValue() {
      var parentValue = this._parent.__getValue();

      invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');
      return this._interpolation(parentValue);
    }
  }, {
    key: "interpolate",
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: "__attach",
    value: function __attach() {
      this._parent.__addChild(this);
    }
  }, {
    key: "__detach",
    value: function __detach() {
      this._parent.__removeChild(this);

      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedInterpolation.prototype), "__detach", this).call(this);
    }
  }, {
    key: "__transformDataType",
    value: function __transformDataType(range) {
      return range.map(NativeAnimatedHelper.transformDataType);
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      if (__DEV__) {
        NativeAnimatedHelper.validateInterpolation(this._config);
      }

      return {
        inputRange: this._config.inputRange,
        outputRange: this.__transformDataType(this._config.outputRange),
        extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',
        extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',
        type: 'interpolation'
      };
    }
  }]);
  return AnimatedInterpolation;
}(AnimatedWithChildren);

AnimatedInterpolation.__createInterpolation = createInterpolation;
module.exports = AnimatedInterpolation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBbmltYXRlZE5vZGUiLCJyZXF1aXJlIiwiQW5pbWF0ZWRXaXRoQ2hpbGRyZW4iLCJOYXRpdmVBbmltYXRlZEhlbHBlciIsImludmFyaWFudCIsIm5vcm1hbGl6ZUNvbG9yIiwibGluZWFyIiwidCIsImNyZWF0ZUludGVycG9sYXRpb24iLCJjb25maWciLCJvdXRwdXRSYW5nZSIsImNyZWF0ZUludGVycG9sYXRpb25Gcm9tU3RyaW5nT3V0cHV0UmFuZ2UiLCJjaGVja0luZmluaXRlUmFuZ2UiLCJpbnB1dFJhbmdlIiwiY2hlY2tWYWxpZElucHV0UmFuZ2UiLCJsZW5ndGgiLCJlYXNpbmciLCJleHRyYXBvbGF0ZUxlZnQiLCJ1bmRlZmluZWQiLCJleHRyYXBvbGF0ZSIsImV4dHJhcG9sYXRlUmlnaHQiLCJpbnB1dCIsInJhbmdlIiwiZmluZFJhbmdlIiwiaW50ZXJwb2xhdGUiLCJpbnB1dE1pbiIsImlucHV0TWF4Iiwib3V0cHV0TWluIiwib3V0cHV0TWF4IiwicmVzdWx0IiwiSW5maW5pdHkiLCJjb2xvclRvUmdiYSIsIm5vcm1hbGl6ZWRDb2xvciIsInIiLCJnIiwiYiIsImEiLCJzdHJpbmdTaGFwZVJlZ2V4IiwibWFwIiwiY2hlY2tQYXR0ZXJuIiwib3V0cHV0UmFuZ2VzIiwibWF0Y2giLCJmb3JFYWNoIiwidmFsdWUiLCJudW1iZXIiLCJpIiwicHVzaCIsImludGVycG9sYXRpb25zIiwic2hvdWxkUm91bmQiLCJpc1JnYk9yUmdiYSIsInJlcGxhY2UiLCJ2YWwiLCJNYXRoIiwicm91bmQiLCJTdHJpbmciLCJzdGFydHNXaXRoIiwiYXJyIiwicGF0dGVybiIsIm5hbWUiLCJBbmltYXRlZEludGVycG9sYXRpb24iLCJwYXJlbnQiLCJfcGFyZW50IiwiX2NvbmZpZyIsIl9pbnRlcnBvbGF0aW9uIiwicGxhdGZvcm1Db25maWciLCJfX21ha2VOYXRpdmUiLCJwYXJlbnRWYWx1ZSIsIl9fZ2V0VmFsdWUiLCJfX2FkZENoaWxkIiwiX19yZW1vdmVDaGlsZCIsInRyYW5zZm9ybURhdGFUeXBlIiwiX19ERVZfXyIsInZhbGlkYXRlSW50ZXJwb2xhdGlvbiIsIl9fdHJhbnNmb3JtRGF0YVR5cGUiLCJ0eXBlIiwiX19jcmVhdGVJbnRlcnBvbGF0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkFuaW1hdGVkSW50ZXJwb2xhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG4vKiBlc2xpbnQgbm8tYml0d2lzZTogMCAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFuaW1hdGVkTm9kZSA9IHJlcXVpcmUoJy4vQW5pbWF0ZWROb2RlJyk7XG5jb25zdCBBbmltYXRlZFdpdGhDaGlsZHJlbiA9IHJlcXVpcmUoJy4vQW5pbWF0ZWRXaXRoQ2hpbGRyZW4nKTtcbmNvbnN0IE5hdGl2ZUFuaW1hdGVkSGVscGVyID0gcmVxdWlyZSgnLi4vTmF0aXZlQW5pbWF0ZWRIZWxwZXInKTtcblxuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5jb25zdCBub3JtYWxpemVDb2xvciA9IHJlcXVpcmUoJy4uLy4uL1N0eWxlU2hlZXQvbm9ybWFsaXplQ29sb3InKTtcblxuaW1wb3J0IHR5cGUge1BsYXRmb3JtQ29uZmlnfSBmcm9tICcuLi9BbmltYXRlZFBsYXRmb3JtQ29uZmlnJztcblxudHlwZSBFeHRyYXBvbGF0ZVR5cGUgPSAnZXh0ZW5kJyB8ICdpZGVudGl0eScgfCAnY2xhbXAnO1xuXG5leHBvcnQgdHlwZSBJbnRlcnBvbGF0aW9uQ29uZmlnVHlwZSA9IHtcbiAgaW5wdXRSYW5nZTogJFJlYWRPbmx5QXJyYXk8bnVtYmVyPixcbiAgb3V0cHV0UmFuZ2U6ICRSZWFkT25seUFycmF5PG51bWJlcj4gfCAkUmVhZE9ubHlBcnJheTxzdHJpbmc+LFxuICBlYXNpbmc/OiAoaW5wdXQ6IG51bWJlcikgPT4gbnVtYmVyLFxuICBleHRyYXBvbGF0ZT86IEV4dHJhcG9sYXRlVHlwZSxcbiAgZXh0cmFwb2xhdGVMZWZ0PzogRXh0cmFwb2xhdGVUeXBlLFxuICBleHRyYXBvbGF0ZVJpZ2h0PzogRXh0cmFwb2xhdGVUeXBlLFxufTtcblxuY29uc3QgbGluZWFyID0gKHQ6IG51bWJlcikgPT4gdDtcblxuLyoqXG4gKiBWZXJ5IGhhbmR5IGhlbHBlciB0byBtYXAgaW5wdXQgcmFuZ2VzIHRvIG91dHB1dCByYW5nZXMgd2l0aCBhbiBlYXNpbmdcbiAqIGZ1bmN0aW9uIGFuZCBjdXN0b20gYmVoYXZpb3Igb3V0c2lkZSBvZiB0aGUgcmFuZ2VzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnRlcnBvbGF0aW9uKFxuICBjb25maWc6IEludGVycG9sYXRpb25Db25maWdUeXBlLFxuKTogKGlucHV0OiBudW1iZXIpID0+IG51bWJlciB8IHN0cmluZyB7XG4gIGlmIChjb25maWcub3V0cHV0UmFuZ2UgJiYgdHlwZW9mIGNvbmZpZy5vdXRwdXRSYW5nZVswXSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gY3JlYXRlSW50ZXJwb2xhdGlvbkZyb21TdHJpbmdPdXRwdXRSYW5nZShjb25maWcpO1xuICB9XG5cbiAgY29uc3Qgb3V0cHV0UmFuZ2U6IEFycmF5PG51bWJlcj4gPSAoY29uZmlnLm91dHB1dFJhbmdlOiBhbnkpO1xuICBjaGVja0luZmluaXRlUmFuZ2UoJ291dHB1dFJhbmdlJywgb3V0cHV0UmFuZ2UpO1xuXG4gIGNvbnN0IGlucHV0UmFuZ2UgPSBjb25maWcuaW5wdXRSYW5nZTtcbiAgY2hlY2tJbmZpbml0ZVJhbmdlKCdpbnB1dFJhbmdlJywgaW5wdXRSYW5nZSk7XG4gIGNoZWNrVmFsaWRJbnB1dFJhbmdlKGlucHV0UmFuZ2UpO1xuXG4gIGludmFyaWFudChcbiAgICBpbnB1dFJhbmdlLmxlbmd0aCA9PT0gb3V0cHV0UmFuZ2UubGVuZ3RoLFxuICAgICdpbnB1dFJhbmdlICgnICtcbiAgICAgIGlucHV0UmFuZ2UubGVuZ3RoICtcbiAgICAgICcpIGFuZCBvdXRwdXRSYW5nZSAoJyArXG4gICAgICBvdXRwdXRSYW5nZS5sZW5ndGggK1xuICAgICAgJykgbXVzdCBoYXZlIHRoZSBzYW1lIGxlbmd0aCcsXG4gICk7XG5cbiAgY29uc3QgZWFzaW5nID0gY29uZmlnLmVhc2luZyB8fCBsaW5lYXI7XG5cbiAgbGV0IGV4dHJhcG9sYXRlTGVmdDogRXh0cmFwb2xhdGVUeXBlID0gJ2V4dGVuZCc7XG4gIGlmIChjb25maWcuZXh0cmFwb2xhdGVMZWZ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICBleHRyYXBvbGF0ZUxlZnQgPSBjb25maWcuZXh0cmFwb2xhdGVMZWZ0O1xuICB9IGVsc2UgaWYgKGNvbmZpZy5leHRyYXBvbGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZXh0cmFwb2xhdGVMZWZ0ID0gY29uZmlnLmV4dHJhcG9sYXRlO1xuICB9XG5cbiAgbGV0IGV4dHJhcG9sYXRlUmlnaHQ6IEV4dHJhcG9sYXRlVHlwZSA9ICdleHRlbmQnO1xuICBpZiAoY29uZmlnLmV4dHJhcG9sYXRlUmlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgIGV4dHJhcG9sYXRlUmlnaHQgPSBjb25maWcuZXh0cmFwb2xhdGVSaWdodDtcbiAgfSBlbHNlIGlmIChjb25maWcuZXh0cmFwb2xhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGV4dHJhcG9sYXRlUmlnaHQgPSBjb25maWcuZXh0cmFwb2xhdGU7XG4gIH1cblxuICByZXR1cm4gaW5wdXQgPT4ge1xuICAgIGludmFyaWFudChcbiAgICAgIHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicsXG4gICAgICAnQ2Fubm90IGludGVycG9sYXRpb24gYW4gaW5wdXQgd2hpY2ggaXMgbm90IGEgbnVtYmVyJyxcbiAgICApO1xuXG4gICAgY29uc3QgcmFuZ2UgPSBmaW5kUmFuZ2UoaW5wdXQsIGlucHV0UmFuZ2UpO1xuICAgIHJldHVybiBpbnRlcnBvbGF0ZShcbiAgICAgIGlucHV0LFxuICAgICAgaW5wdXRSYW5nZVtyYW5nZV0sXG4gICAgICBpbnB1dFJhbmdlW3JhbmdlICsgMV0sXG4gICAgICBvdXRwdXRSYW5nZVtyYW5nZV0sXG4gICAgICBvdXRwdXRSYW5nZVtyYW5nZSArIDFdLFxuICAgICAgZWFzaW5nLFxuICAgICAgZXh0cmFwb2xhdGVMZWZ0LFxuICAgICAgZXh0cmFwb2xhdGVSaWdodCxcbiAgICApO1xuICB9O1xufVxuXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZShcbiAgaW5wdXQ6IG51bWJlcixcbiAgaW5wdXRNaW46IG51bWJlcixcbiAgaW5wdXRNYXg6IG51bWJlcixcbiAgb3V0cHV0TWluOiBudW1iZXIsXG4gIG91dHB1dE1heDogbnVtYmVyLFxuICBlYXNpbmc6IChpbnB1dDogbnVtYmVyKSA9PiBudW1iZXIsXG4gIGV4dHJhcG9sYXRlTGVmdDogRXh0cmFwb2xhdGVUeXBlLFxuICBleHRyYXBvbGF0ZVJpZ2h0OiBFeHRyYXBvbGF0ZVR5cGUsXG4pIHtcbiAgbGV0IHJlc3VsdCA9IGlucHV0O1xuXG4gIC8vIEV4dHJhcG9sYXRlXG4gIGlmIChyZXN1bHQgPCBpbnB1dE1pbikge1xuICAgIGlmIChleHRyYXBvbGF0ZUxlZnQgPT09ICdpZGVudGl0eScpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBlbHNlIGlmIChleHRyYXBvbGF0ZUxlZnQgPT09ICdjbGFtcCcpIHtcbiAgICAgIHJlc3VsdCA9IGlucHV0TWluO1xuICAgIH0gZWxzZSBpZiAoZXh0cmFwb2xhdGVMZWZ0ID09PSAnZXh0ZW5kJykge1xuICAgICAgLy8gbm9vcFxuICAgIH1cbiAgfVxuXG4gIGlmIChyZXN1bHQgPiBpbnB1dE1heCkge1xuICAgIGlmIChleHRyYXBvbGF0ZVJpZ2h0ID09PSAnaWRlbnRpdHknKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZWxzZSBpZiAoZXh0cmFwb2xhdGVSaWdodCA9PT0gJ2NsYW1wJykge1xuICAgICAgcmVzdWx0ID0gaW5wdXRNYXg7XG4gICAgfSBlbHNlIGlmIChleHRyYXBvbGF0ZVJpZ2h0ID09PSAnZXh0ZW5kJykge1xuICAgICAgLy8gbm9vcFxuICAgIH1cbiAgfVxuXG4gIGlmIChvdXRwdXRNaW4gPT09IG91dHB1dE1heCkge1xuICAgIHJldHVybiBvdXRwdXRNaW47XG4gIH1cblxuICBpZiAoaW5wdXRNaW4gPT09IGlucHV0TWF4KSB7XG4gICAgaWYgKGlucHV0IDw9IGlucHV0TWluKSB7XG4gICAgICByZXR1cm4gb3V0cHV0TWluO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0TWF4O1xuICB9XG5cbiAgLy8gSW5wdXQgUmFuZ2VcbiAgaWYgKGlucHV0TWluID09PSAtSW5maW5pdHkpIHtcbiAgICByZXN1bHQgPSAtcmVzdWx0O1xuICB9IGVsc2UgaWYgKGlucHV0TWF4ID09PSBJbmZpbml0eSkge1xuICAgIHJlc3VsdCA9IHJlc3VsdCAtIGlucHV0TWluO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IChyZXN1bHQgLSBpbnB1dE1pbikgLyAoaW5wdXRNYXggLSBpbnB1dE1pbik7XG4gIH1cblxuICAvLyBFYXNpbmdcbiAgcmVzdWx0ID0gZWFzaW5nKHJlc3VsdCk7XG5cbiAgLy8gT3V0cHV0IFJhbmdlXG4gIGlmIChvdXRwdXRNaW4gPT09IC1JbmZpbml0eSkge1xuICAgIHJlc3VsdCA9IC1yZXN1bHQ7XG4gIH0gZWxzZSBpZiAob3V0cHV0TWF4ID09PSBJbmZpbml0eSkge1xuICAgIHJlc3VsdCA9IHJlc3VsdCArIG91dHB1dE1pbjtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSByZXN1bHQgKiAob3V0cHV0TWF4IC0gb3V0cHV0TWluKSArIG91dHB1dE1pbjtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNvbG9yVG9SZ2JhKGlucHV0OiBzdHJpbmcpOiBzdHJpbmcge1xuICBsZXQgbm9ybWFsaXplZENvbG9yID0gbm9ybWFsaXplQ29sb3IoaW5wdXQpO1xuICBpZiAobm9ybWFsaXplZENvbG9yID09PSBudWxsIHx8IHR5cGVvZiBub3JtYWxpemVkQ29sb3IgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG5cbiAgbm9ybWFsaXplZENvbG9yID0gbm9ybWFsaXplZENvbG9yIHx8IDA7XG5cbiAgY29uc3QgciA9IChub3JtYWxpemVkQ29sb3IgJiAweGZmMDAwMDAwKSA+Pj4gMjQ7XG4gIGNvbnN0IGcgPSAobm9ybWFsaXplZENvbG9yICYgMHgwMGZmMDAwMCkgPj4+IDE2O1xuICBjb25zdCBiID0gKG5vcm1hbGl6ZWRDb2xvciAmIDB4MDAwMGZmMDApID4+PiA4O1xuICBjb25zdCBhID0gKG5vcm1hbGl6ZWRDb2xvciAmIDB4MDAwMDAwZmYpIC8gMjU1O1xuXG4gIHJldHVybiBgcmdiYSgke3J9LCAke2d9LCAke2J9LCAke2F9KWA7XG59XG5cbmNvbnN0IHN0cmluZ1NoYXBlUmVnZXggPSAvWystXT8oPzpcXGQrXFwuP1xcZCp8XFwuXFxkKykoPzpbZUVdWystXT9cXGQrKT8vZztcblxuLyoqXG4gKiBTdXBwb3J0cyBzdHJpbmcgc2hhcGVzIGJ5IGV4dHJhY3RpbmcgbnVtYmVycyBzbyBuZXcgdmFsdWVzIGNhbiBiZSBjb21wdXRlZCxcbiAqIGFuZCByZWNvbWJpbmVzIHRob3NlIHZhbHVlcyBpbnRvIG5ldyBzdHJpbmdzIG9mIHRoZSBzYW1lIHNoYXBlLiAgU3VwcG9ydHNcbiAqIHRoaW5ncyBsaWtlOlxuICpcbiAqICAgcmdiYSgxMjMsIDQyLCA5OSwgMC4zNikgLy8gY29sb3JzXG4gKiAgIC00NWRlZyAgICAgICAgICAgICAgICAgIC8vIHZhbHVlcyB3aXRoIHVuaXRzXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUludGVycG9sYXRpb25Gcm9tU3RyaW5nT3V0cHV0UmFuZ2UoXG4gIGNvbmZpZzogSW50ZXJwb2xhdGlvbkNvbmZpZ1R5cGUsXG4pOiAoaW5wdXQ6IG51bWJlcikgPT4gc3RyaW5nIHtcbiAgbGV0IG91dHB1dFJhbmdlOiBBcnJheTxzdHJpbmc+ID0gKGNvbmZpZy5vdXRwdXRSYW5nZTogYW55KTtcbiAgaW52YXJpYW50KG91dHB1dFJhbmdlLmxlbmd0aCA+PSAyLCAnQmFkIG91dHB1dCByYW5nZScpO1xuICBvdXRwdXRSYW5nZSA9IG91dHB1dFJhbmdlLm1hcChjb2xvclRvUmdiYSk7XG4gIGNoZWNrUGF0dGVybihvdXRwdXRSYW5nZSk7XG5cbiAgLy8gWydyZ2JhKDAsIDEwMCwgMjAwLCAwKScsICdyZ2JhKDUwLCAxNTAsIDI1MCwgMC41KSddXG4gIC8vIC0+XG4gIC8vIFtcbiAgLy8gICBbMCwgNTBdLFxuICAvLyAgIFsxMDAsIDE1MF0sXG4gIC8vICAgWzIwMCwgMjUwXSxcbiAgLy8gICBbMCwgMC41XSxcbiAgLy8gXVxuICAvKiAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS11c2VdICg+PTAuMTguMCk6IGBvdXRwdXRSYW5nZVswXS5tYXRjaCgpYCBjYW5cbiAgICogcmV0dXJuIGBudWxsYC4gTmVlZCB0byBndWFyZCBhZ2FpbnN0IHRoaXMgcG9zc2liaWxpdHkuICovXG4gIGNvbnN0IG91dHB1dFJhbmdlcyA9IG91dHB1dFJhbmdlWzBdLm1hdGNoKHN0cmluZ1NoYXBlUmVnZXgpLm1hcCgoKSA9PiBbXSk7XG4gIG91dHB1dFJhbmdlLmZvckVhY2godmFsdWUgPT4ge1xuICAgIC8qICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXVzZV0gKD49MC4xOC4wKTogYHZhbHVlLm1hdGNoKClgIGNhbiByZXR1cm5cbiAgICAgKiBgbnVsbGAuIE5lZWQgdG8gZ3VhcmQgYWdhaW5zdCB0aGlzIHBvc3NpYmlsaXR5LiAqL1xuICAgIHZhbHVlLm1hdGNoKHN0cmluZ1NoYXBlUmVnZXgpLmZvckVhY2goKG51bWJlciwgaSkgPT4ge1xuICAgICAgb3V0cHV0UmFuZ2VzW2ldLnB1c2goK251bWJlcik7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGNvbnN0IGludGVycG9sYXRpb25zID0gb3V0cHV0UmFuZ2VbMF1cbiAgICAubWF0Y2goc3RyaW5nU2hhcGVSZWdleClcbiAgICAvKiAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS11c2VdICg+PTAuMTguMCk6IGBvdXRwdXRSYW5nZVswXS5tYXRjaCgpYCBjYW5cbiAgICAgKiByZXR1cm4gYG51bGxgLiBOZWVkIHRvIGd1YXJkIGFnYWluc3QgdGhpcyBwb3NzaWJpbGl0eS4gKi9cbiAgICAvKiAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXSAoPj0wLjE4LjApOiBgb3V0cHV0UmFuZ2VbMF0ubWF0Y2goKWAgY2FuXG4gICAgICogcmV0dXJuIGBudWxsYC4gTmVlZCB0byBndWFyZCBhZ2FpbnN0IHRoaXMgcG9zc2liaWxpdHkuICovXG4gICAgLm1hcCgodmFsdWUsIGkpID0+IHtcbiAgICAgIHJldHVybiBjcmVhdGVJbnRlcnBvbGF0aW9uKHtcbiAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICBvdXRwdXRSYW5nZTogb3V0cHV0UmFuZ2VzW2ldLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgLy8gcmdiYSByZXF1aXJlcyB0aGF0IHRoZSByLGcsYiBhcmUgaW50ZWdlcnMuLi4uIHNvIHdlIHdhbnQgdG8gcm91bmQgdGhlbSwgYnV0IHdlICpkb250KiB3YW50IHRvXG4gIC8vIHJvdW5kIHRoZSBvcGFjaXR5ICg0dGggY29sdW1uKS5cbiAgY29uc3Qgc2hvdWxkUm91bmQgPSBpc1JnYk9yUmdiYShvdXRwdXRSYW5nZVswXSk7XG5cbiAgcmV0dXJuIGlucHV0ID0+IHtcbiAgICBsZXQgaSA9IDA7XG4gICAgLy8gJ3JnYmEoMCwgMTAwLCAyMDAsIDApJ1xuICAgIC8vIC0+XG4gICAgLy8gJ3JnYmEoJHtpbnRlcnBvbGF0aW9uc1swXShpbnB1dCl9LCAke2ludGVycG9sYXRpb25zWzFdKGlucHV0KX0sIC4uLidcbiAgICByZXR1cm4gb3V0cHV0UmFuZ2VbMF0ucmVwbGFjZShzdHJpbmdTaGFwZVJlZ2V4LCAoKSA9PiB7XG4gICAgICBsZXQgdmFsID0gK2ludGVycG9sYXRpb25zW2krK10oaW5wdXQpO1xuICAgICAgaWYgKHNob3VsZFJvdW5kKSB7XG4gICAgICAgIHZhbCA9IGkgPCA0ID8gTWF0aC5yb3VuZCh2YWwpIDogTWF0aC5yb3VuZCh2YWwgKiAxMDAwKSAvIDEwMDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gU3RyaW5nKHZhbCk7XG4gICAgfSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzUmdiT3JSZ2JhKHJhbmdlOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHR5cGVvZiByYW5nZSA9PT0gJ3N0cmluZycgJiYgcmFuZ2Uuc3RhcnRzV2l0aCgncmdiJyk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrUGF0dGVybihhcnI6ICRSZWFkT25seUFycmF5PHN0cmluZz4pIHtcbiAgY29uc3QgcGF0dGVybiA9IGFyclswXS5yZXBsYWNlKHN0cmluZ1NoYXBlUmVnZXgsICcnKTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBwYXR0ZXJuID09PSBhcnJbaV0ucmVwbGFjZShzdHJpbmdTaGFwZVJlZ2V4LCAnJyksXG4gICAgICAnaW52YWxpZCBwYXR0ZXJuICcgKyBhcnJbMF0gKyAnIGFuZCAnICsgYXJyW2ldLFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZFJhbmdlKGlucHV0OiBudW1iZXIsIGlucHV0UmFuZ2U6ICRSZWFkT25seUFycmF5PG51bWJlcj4pIHtcbiAgbGV0IGk7XG4gIGZvciAoaSA9IDE7IGkgPCBpbnB1dFJhbmdlLmxlbmd0aCAtIDE7ICsraSkge1xuICAgIGlmIChpbnB1dFJhbmdlW2ldID49IGlucHV0KSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkgLSAxO1xufVxuXG5mdW5jdGlvbiBjaGVja1ZhbGlkSW5wdXRSYW5nZShhcnI6ICRSZWFkT25seUFycmF5PG51bWJlcj4pIHtcbiAgaW52YXJpYW50KGFyci5sZW5ndGggPj0gMiwgJ2lucHV0UmFuZ2UgbXVzdCBoYXZlIGF0IGxlYXN0IDIgZWxlbWVudHMnKTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBhcnJbaV0gPj0gYXJyW2kgLSAxXSxcbiAgICAgIC8qICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGVdICg+PTAuMTMuMCkgLSBJbiB0aGUgYWRkaXRpb24gZXhwcmVzc2lvblxuICAgICAgICogYmVsb3cgdGhpcyBjb21tZW50LCBvbmUgb3IgYm90aCBvZiB0aGUgb3BlcmFuZHMgbWF5IGJlIHNvbWV0aGluZyB0aGF0XG4gICAgICAgKiBkb2Vzbid0IGNsZWFubHkgY29udmVydCB0byBhIHN0cmluZywgbGlrZSB1bmRlZmluZWQsIG51bGwsIGFuZCBvYmplY3QsXG4gICAgICAgKiBldGMuIElmIHlvdSByZWFsbHkgbWVhbiB0aGlzIGltcGxpY2l0IHN0cmluZyBjb252ZXJzaW9uLCB5b3UgY2FuIGRvXG4gICAgICAgKiBzb21ldGhpbmcgbGlrZSBTdHJpbmcobXlUaGluZykgKi9cbiAgICAgICdpbnB1dFJhbmdlIG11c3QgYmUgbW9ub3RvbmljYWxseSBub24tZGVjcmVhc2luZyAnICsgYXJyLFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tJbmZpbml0ZVJhbmdlKG5hbWU6IHN0cmluZywgYXJyOiAkUmVhZE9ubHlBcnJheTxudW1iZXI+KSB7XG4gIGludmFyaWFudChhcnIubGVuZ3RoID49IDIsIG5hbWUgKyAnIG11c3QgaGF2ZSBhdCBsZWFzdCAyIGVsZW1lbnRzJyk7XG4gIGludmFyaWFudChcbiAgICBhcnIubGVuZ3RoICE9PSAyIHx8IGFyclswXSAhPT0gLUluZmluaXR5IHx8IGFyclsxXSAhPT0gSW5maW5pdHksXG4gICAgLyogJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZV0gKD49MC4xMy4wKSAtIEluIHRoZSBhZGRpdGlvbiBleHByZXNzaW9uXG4gICAgICogYmVsb3cgdGhpcyBjb21tZW50LCBvbmUgb3IgYm90aCBvZiB0aGUgb3BlcmFuZHMgbWF5IGJlIHNvbWV0aGluZyB0aGF0XG4gICAgICogZG9lc24ndCBjbGVhbmx5IGNvbnZlcnQgdG8gYSBzdHJpbmcsIGxpa2UgdW5kZWZpbmVkLCBudWxsLCBhbmQgb2JqZWN0LFxuICAgICAqIGV0Yy4gSWYgeW91IHJlYWxseSBtZWFuIHRoaXMgaW1wbGljaXQgc3RyaW5nIGNvbnZlcnNpb24sIHlvdSBjYW4gZG9cbiAgICAgKiBzb21ldGhpbmcgbGlrZSBTdHJpbmcobXlUaGluZykgKi9cbiAgICBuYW1lICsgJ2Nhbm5vdCBiZSBdLWluZmluaXR5OytpbmZpbml0eVsgJyArIGFycixcbiAgKTtcbn1cblxuY2xhc3MgQW5pbWF0ZWRJbnRlcnBvbGF0aW9uIGV4dGVuZHMgQW5pbWF0ZWRXaXRoQ2hpbGRyZW4ge1xuICAvLyBFeHBvcnQgZm9yIHRlc3RpbmcuXG4gIHN0YXRpYyBfX2NyZWF0ZUludGVycG9sYXRpb246IChcbiAgICBjb25maWc6IEludGVycG9sYXRpb25Db25maWdUeXBlLFxuICApID0+IChpbnB1dDogbnVtYmVyKSA9PiBudW1iZXIgfCBzdHJpbmcgPSBjcmVhdGVJbnRlcnBvbGF0aW9uO1xuXG4gIF9wYXJlbnQ6IEFuaW1hdGVkTm9kZTtcbiAgX2NvbmZpZzogSW50ZXJwb2xhdGlvbkNvbmZpZ1R5cGU7XG4gIF9pbnRlcnBvbGF0aW9uOiAoaW5wdXQ6IG51bWJlcikgPT4gbnVtYmVyIHwgc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHBhcmVudDogQW5pbWF0ZWROb2RlLCBjb25maWc6IEludGVycG9sYXRpb25Db25maWdUeXBlKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMuX2ludGVycG9sYXRpb24gPSBjcmVhdGVJbnRlcnBvbGF0aW9uKGNvbmZpZyk7XG4gIH1cblxuICBfX21ha2VOYXRpdmUocGxhdGZvcm1Db25maWc6ID9QbGF0Zm9ybUNvbmZpZykge1xuICAgIHRoaXMuX3BhcmVudC5fX21ha2VOYXRpdmUocGxhdGZvcm1Db25maWcpO1xuICAgIHN1cGVyLl9fbWFrZU5hdGl2ZShwbGF0Zm9ybUNvbmZpZyk7XG4gIH1cblxuICBfX2dldFZhbHVlKCk6IG51bWJlciB8IHN0cmluZyB7XG4gICAgY29uc3QgcGFyZW50VmFsdWU6IG51bWJlciA9IHRoaXMuX3BhcmVudC5fX2dldFZhbHVlKCk7XG4gICAgaW52YXJpYW50KFxuICAgICAgdHlwZW9mIHBhcmVudFZhbHVlID09PSAnbnVtYmVyJyxcbiAgICAgICdDYW5ub3QgaW50ZXJwb2xhdGUgYW4gaW5wdXQgd2hpY2ggaXMgbm90IGEgbnVtYmVyLicsXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcy5faW50ZXJwb2xhdGlvbihwYXJlbnRWYWx1ZSk7XG4gIH1cblxuICBpbnRlcnBvbGF0ZShjb25maWc6IEludGVycG9sYXRpb25Db25maWdUeXBlKTogQW5pbWF0ZWRJbnRlcnBvbGF0aW9uIHtcbiAgICByZXR1cm4gbmV3IEFuaW1hdGVkSW50ZXJwb2xhdGlvbih0aGlzLCBjb25maWcpO1xuICB9XG5cbiAgX19hdHRhY2goKTogdm9pZCB7XG4gICAgdGhpcy5fcGFyZW50Ll9fYWRkQ2hpbGQodGhpcyk7XG4gIH1cblxuICBfX2RldGFjaCgpOiB2b2lkIHtcbiAgICB0aGlzLl9wYXJlbnQuX19yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICBzdXBlci5fX2RldGFjaCgpO1xuICB9XG5cbiAgX190cmFuc2Zvcm1EYXRhVHlwZShyYW5nZTogQXJyYXk8YW55Pik6IEFycmF5PGFueT4ge1xuICAgIHJldHVybiByYW5nZS5tYXAoTmF0aXZlQW5pbWF0ZWRIZWxwZXIudHJhbnNmb3JtRGF0YVR5cGUpO1xuICB9XG5cbiAgX19nZXROYXRpdmVDb25maWcoKTogYW55IHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgTmF0aXZlQW5pbWF0ZWRIZWxwZXIudmFsaWRhdGVJbnRlcnBvbGF0aW9uKHRoaXMuX2NvbmZpZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlucHV0UmFuZ2U6IHRoaXMuX2NvbmZpZy5pbnB1dFJhbmdlLFxuICAgICAgLy8gT25seSB0aGUgYG91dHB1dFJhbmdlYCBjYW4gY29udGFpbiBzdHJpbmdzIHNvIHdlIGRvbid0IG5lZWQgdG8gdHJhbnNmb3JtIGBpbnB1dFJhbmdlYCBoZXJlXG4gICAgICAvKiAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXSAoPj0wLjM4LjApIC0gRmxvdyBlcnJvciBkZXRlY3RlZCBkdXJpbmdcbiAgICAgICAqIHRoZSBkZXBsb3ltZW50IG9mIHYwLjM4LjAuIFRvIHNlZSB0aGUgZXJyb3IsIHJlbW92ZSB0aGlzIGNvbW1lbnQgYW5kXG4gICAgICAgKiBydW4gZmxvdyAqL1xuICAgICAgb3V0cHV0UmFuZ2U6IHRoaXMuX190cmFuc2Zvcm1EYXRhVHlwZSh0aGlzLl9jb25maWcub3V0cHV0UmFuZ2UpLFxuICAgICAgZXh0cmFwb2xhdGVMZWZ0OlxuICAgICAgICB0aGlzLl9jb25maWcuZXh0cmFwb2xhdGVMZWZ0IHx8IHRoaXMuX2NvbmZpZy5leHRyYXBvbGF0ZSB8fCAnZXh0ZW5kJyxcbiAgICAgIGV4dHJhcG9sYXRlUmlnaHQ6XG4gICAgICAgIHRoaXMuX2NvbmZpZy5leHRyYXBvbGF0ZVJpZ2h0IHx8IHRoaXMuX2NvbmZpZy5leHRyYXBvbGF0ZSB8fCAnZXh0ZW5kJyxcbiAgICAgIHR5cGU6ICdpbnRlcnBvbGF0aW9uJyxcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQW5pbWF0ZWRJbnRlcnBvbGF0aW9uO1xuIl0sIm1hcHBpbmdzIjoiQUFZQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLFlBQVksR0FBR0MsT0FBTyxDQUFDLGdC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