8a3efc6a7a61b65956a22530610d4294
'use strict';

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = createProcessObject;

var _deepCyclicCopy = _interopRequireDefault(require('./deepCyclicCopy'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var BLACKLIST = new Set(['env', 'mainModule', '_events']);
var isWin32 = process.platform === 'win32';
var proto = Object.getPrototypeOf(process.env);

function createProcessEnv() {
  var real = Object.create(proto);
  var lookup = {};

  function deletePropertyWin32(_target, key) {
    for (var name in real) {
      if (Object.prototype.hasOwnProperty.call(real, name)) {
        if (typeof key === 'string') {
          if (name.toLowerCase() === key.toLowerCase()) {
            delete real[name];
            delete lookup[name.toLowerCase()];
          }
        } else {
          if (key === name) {
            delete real[name];
            delete lookup[name];
          }
        }
      }
    }

    return true;
  }

  function deleteProperty(_target, key) {
    delete real[key];
    delete lookup[key];
    return true;
  }

  function getProperty(_target, key) {
    return real[key];
  }

  function getPropertyWin32(_target, key) {
    if (typeof key === 'string') {
      return lookup[key in proto ? key : key.toLowerCase()];
    } else {
      return real[key];
    }
  }

  var proxy = new Proxy(real, {
    deleteProperty: isWin32 ? deletePropertyWin32 : deleteProperty,
    get: isWin32 ? getPropertyWin32 : getProperty,
    set: function set(_target, key, value) {
      var strValue = "" + value;

      if (typeof key === 'string') {
        lookup[key.toLowerCase()] = strValue;
      }

      real[key] = strValue;
      return true;
    }
  });
  return (0, _extends2.default)(proxy, process.env);
}

function createProcessObject() {
  var process = require('process');

  var newProcess = (0, _deepCyclicCopy.default)(process, {
    blacklist: BLACKLIST,
    keepPrototype: true
  });

  try {
    newProcess[Symbol.toStringTag] = 'process';
  } catch (e) {
    if (newProcess[Symbol.toStringTag] !== 'process') {
      e.message = "Unable to set toStringTag on process. Please open up an issue at https://github.com/facebook/jest\n\n" + e.message;
      throw e;
    }
  }

  var proto = process;

  while (proto = Object.getPrototypeOf(proto)) {
    if (typeof proto.constructor === 'function') {
      proto.constructor.call(newProcess);
    }
  }

  newProcess.env = createProcessEnv();

  newProcess.send = function () {
    return true;
  };

  Object.defineProperty(newProcess, 'domain', {
    get: function get() {
      return process.domain;
    }
  });
  return newProcess;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,