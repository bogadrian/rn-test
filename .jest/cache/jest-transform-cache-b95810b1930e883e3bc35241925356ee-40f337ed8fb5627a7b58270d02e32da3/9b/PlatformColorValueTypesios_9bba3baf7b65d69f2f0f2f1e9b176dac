b893d2a3050fb2f13bfd603ada5073a5
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processColorObject = exports.normalizeColorObject = exports.PlatformColor = exports.DynamicColorIOSPrivate = void 0;

var PlatformColor = function PlatformColor() {
  for (var _len = arguments.length, names = new Array(_len), _key = 0; _key < _len; _key++) {
    names[_key] = arguments[_key];
  }

  return {
    semantic: names
  };
};

exports.PlatformColor = PlatformColor;

var DynamicColorIOSPrivate = function DynamicColorIOSPrivate(tuple) {
  return {
    dynamic: {
      light: tuple.light,
      dark: tuple.dark,
      highContrastLight: tuple.highContrastLight,
      highContrastDark: tuple.highContrastDark
    }
  };
};

exports.DynamicColorIOSPrivate = DynamicColorIOSPrivate;

var normalizeColorObject = function normalizeColorObject(color) {
  if ('semantic' in color) {
    return color;
  } else if ('dynamic' in color && color.dynamic !== undefined) {
    var normalizeColor = require('./normalizeColor');

    var dynamic = color.dynamic;
    var dynamicColor = {
      dynamic: {
        light: normalizeColor(dynamic.light),
        dark: normalizeColor(dynamic.dark),
        highContrastLight: normalizeColor(dynamic.highContrastLight),
        highContrastDark: normalizeColor(dynamic.highContrastDark)
      }
    };
    return dynamicColor;
  }

  return null;
};

exports.normalizeColorObject = normalizeColorObject;

var processColorObject = function processColorObject(color) {
  if ('dynamic' in color && color.dynamic != null) {
    var processColor = require('./processColor');

    var dynamic = color.dynamic;
    var dynamicColor = {
      dynamic: {
        light: processColor(dynamic.light),
        dark: processColor(dynamic.dark),
        highContrastLight: processColor(dynamic.highContrastLight),
        highContrastDark: processColor(dynamic.highContrastDark)
      }
    };
    return dynamicColor;
  }

  return color;
};

exports.processColorObject = processColorObject;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQbGF0Zm9ybUNvbG9yIiwibmFtZXMiLCJzZW1hbnRpYyIsIkR5bmFtaWNDb2xvcklPU1ByaXZhdGUiLCJ0dXBsZSIsImR5bmFtaWMiLCJsaWdodCIsImRhcmsiLCJoaWdoQ29udHJhc3RMaWdodCIsImhpZ2hDb250cmFzdERhcmsiLCJub3JtYWxpemVDb2xvck9iamVjdCIsImNvbG9yIiwidW5kZWZpbmVkIiwibm9ybWFsaXplQ29sb3IiLCJyZXF1aXJlIiwiZHluYW1pY0NvbG9yIiwicHJvY2Vzc0NvbG9yT2JqZWN0IiwicHJvY2Vzc0NvbG9yIl0sInNvdXJjZXMiOlsiUGxhdGZvcm1Db2xvclZhbHVlVHlwZXMuaW9zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG5pbXBvcnQgdHlwZSB7Q29sb3JWYWx1ZX0gZnJvbSAnLi9TdHlsZVNoZWV0JztcbmltcG9ydCB0eXBlIHtQcm9jZXNzZWRDb2xvclZhbHVlfSBmcm9tICcuL3Byb2Nlc3NDb2xvcic7XG5cbmV4cG9ydCBvcGFxdWUgdHlwZSBOYXRpdmVDb2xvclZhbHVlID0ge1xuICBzZW1hbnRpYz86IEFycmF5PHN0cmluZz4sXG4gIGR5bmFtaWM/OiB7XG4gICAgbGlnaHQ6ID8oQ29sb3JWYWx1ZSB8IFByb2Nlc3NlZENvbG9yVmFsdWUpLFxuICAgIGRhcms6ID8oQ29sb3JWYWx1ZSB8IFByb2Nlc3NlZENvbG9yVmFsdWUpLFxuICAgIGhpZ2hDb250cmFzdExpZ2h0PzogPyhDb2xvclZhbHVlIHwgUHJvY2Vzc2VkQ29sb3JWYWx1ZSksXG4gICAgaGlnaENvbnRyYXN0RGFyaz86ID8oQ29sb3JWYWx1ZSB8IFByb2Nlc3NlZENvbG9yVmFsdWUpLFxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IFBsYXRmb3JtQ29sb3IgPSAoLi4ubmFtZXM6IEFycmF5PHN0cmluZz4pOiBDb2xvclZhbHVlID0+IHtcbiAgcmV0dXJuIHtzZW1hbnRpYzogbmFtZXN9O1xufTtcblxuZXhwb3J0IHR5cGUgRHluYW1pY0NvbG9ySU9TVHVwbGVQcml2YXRlID0ge1xuICBsaWdodDogQ29sb3JWYWx1ZSxcbiAgZGFyazogQ29sb3JWYWx1ZSxcbiAgaGlnaENvbnRyYXN0TGlnaHQ/OiBDb2xvclZhbHVlLFxuICBoaWdoQ29udHJhc3REYXJrPzogQ29sb3JWYWx1ZSxcbn07XG5cbmV4cG9ydCBjb25zdCBEeW5hbWljQ29sb3JJT1NQcml2YXRlID0gKFxuICB0dXBsZTogRHluYW1pY0NvbG9ySU9TVHVwbGVQcml2YXRlLFxuKTogQ29sb3JWYWx1ZSA9PiB7XG4gIHJldHVybiB7XG4gICAgZHluYW1pYzoge1xuICAgICAgbGlnaHQ6IHR1cGxlLmxpZ2h0LFxuICAgICAgZGFyazogdHVwbGUuZGFyayxcbiAgICAgIGhpZ2hDb250cmFzdExpZ2h0OiB0dXBsZS5oaWdoQ29udHJhc3RMaWdodCxcbiAgICAgIGhpZ2hDb250cmFzdERhcms6IHR1cGxlLmhpZ2hDb250cmFzdERhcmssXG4gICAgfSxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBub3JtYWxpemVDb2xvck9iamVjdCA9IChcbiAgY29sb3I6IE5hdGl2ZUNvbG9yVmFsdWUsXG4pOiA/UHJvY2Vzc2VkQ29sb3JWYWx1ZSA9PiB7XG4gIGlmICgnc2VtYW50aWMnIGluIGNvbG9yKSB7XG4gICAgLy8gYW4gaW9zIHNlbWFudGljIGNvbG9yXG4gICAgcmV0dXJuIGNvbG9yO1xuICB9IGVsc2UgaWYgKCdkeW5hbWljJyBpbiBjb2xvciAmJiBjb2xvci5keW5hbWljICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBub3JtYWxpemVDb2xvciA9IHJlcXVpcmUoJy4vbm9ybWFsaXplQ29sb3InKTtcblxuICAgIC8vIGEgZHluYW1pYywgYXBwZWFyYW5jZSBhd2FyZSBjb2xvclxuICAgIGNvbnN0IGR5bmFtaWMgPSBjb2xvci5keW5hbWljO1xuICAgIGNvbnN0IGR5bmFtaWNDb2xvcjogTmF0aXZlQ29sb3JWYWx1ZSA9IHtcbiAgICAgIGR5bmFtaWM6IHtcbiAgICAgICAgbGlnaHQ6IG5vcm1hbGl6ZUNvbG9yKGR5bmFtaWMubGlnaHQpLFxuICAgICAgICBkYXJrOiBub3JtYWxpemVDb2xvcihkeW5hbWljLmRhcmspLFxuICAgICAgICBoaWdoQ29udHJhc3RMaWdodDogbm9ybWFsaXplQ29sb3IoZHluYW1pYy5oaWdoQ29udHJhc3RMaWdodCksXG4gICAgICAgIGhpZ2hDb250cmFzdERhcms6IG5vcm1hbGl6ZUNvbG9yKGR5bmFtaWMuaGlnaENvbnRyYXN0RGFyayksXG4gICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIGR5bmFtaWNDb2xvcjtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IHByb2Nlc3NDb2xvck9iamVjdCA9IChcbiAgY29sb3I6IE5hdGl2ZUNvbG9yVmFsdWUsXG4pOiA/TmF0aXZlQ29sb3JWYWx1ZSA9PiB7XG4gIGlmICgnZHluYW1pYycgaW4gY29sb3IgJiYgY29sb3IuZHluYW1pYyAhPSBudWxsKSB7XG4gICAgY29uc3QgcHJvY2Vzc0NvbG9yID0gcmVxdWlyZSgnLi9wcm9jZXNzQ29sb3InKTtcbiAgICBjb25zdCBkeW5hbWljID0gY29sb3IuZHluYW1pYztcbiAgICBjb25zdCBkeW5hbWljQ29sb3I6IE5hdGl2ZUNvbG9yVmFsdWUgPSB7XG4gICAgICBkeW5hbWljOiB7XG4gICAgICAgIGxpZ2h0OiBwcm9jZXNzQ29sb3IoZHluYW1pYy5saWdodCksXG4gICAgICAgIGRhcms6IHByb2Nlc3NDb2xvcihkeW5hbWljLmRhcmspLFxuICAgICAgICBoaWdoQ29udHJhc3RMaWdodDogcHJvY2Vzc0NvbG9yKGR5bmFtaWMuaGlnaENvbnRyYXN0TGlnaHQpLFxuICAgICAgICBoaWdoQ29udHJhc3REYXJrOiBwcm9jZXNzQ29sb3IoZHluYW1pYy5oaWdoQ29udHJhc3REYXJrKSxcbiAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZHluYW1pY0NvbG9yO1xuICB9XG4gIHJldHVybiBjb2xvcjtcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBdUJPLElBQU1BLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsR0FBeUM7RUFBQSxrQ0FBckNDLEtBQXFDO0lBQXJDQSxLQUFxQztFQUFBOztFQUNwRSxPQUFPO0lBQUNDLFFBQVEsRUFBRUQ7RUFBWCxDQUFQO0FBQ0QsQ0FGTTs7OztBQVdBLElBQU1FLHNCQUFzQixHQUFHLFNBQXpCQSxzQkFBeUIsQ0FDcENDLEtBRG9DLEVBRXJCO0VBQ2YsT0FBTztJQUNMQyxPQUFPLEVBQUU7TUFDUEMsS0FBSyxFQUFFRixLQUFLLENBQUNFLEtBRE47TUFFUEMsSUFBSSxFQUFFSCxLQUFLLENBQUNHLElBRkw7TUFHUEMsaUJBQWlCLEVBQUVKLEtBQUssQ0FBQ0ksaUJBSGxCO01BSVBDLGdCQUFnQixFQUFFTCxLQUFLLENBQUNLO0lBSmpCO0VBREosQ0FBUDtBQVFELENBWE07Ozs7QUFhQSxJQUFNQyxvQkFBb0IsR0FBRyxTQUF2QkEsb0JBQXVCLENBQ2xDQyxLQURrQyxFQUVUO0VBQ3pCLElBQUksY0FBY0EsS0FBbEIsRUFBeUI7SUFFdkIsT0FBT0EsS0FBUDtFQUNELENBSEQsTUFHTyxJQUFJLGFBQWFBLEtBQWIsSUFBc0JBLEtBQUssQ0FBQ04sT0FBTixLQUFrQk8sU0FBNUMsRUFBdUQ7SUFDNUQsSUFBTUMsY0FBYyxHQUFHQyxPQUFPLENBQUMsa0JBQUQsQ0FBOUI7O0lBR0EsSUFBTVQsT0FBTyxHQUFHTSxLQUFLLENBQUNOLE9BQXRCO0lBQ0EsSUFBTVUsWUFBOEIsR0FBRztNQUNyQ1YsT0FBTyxFQUFFO1FBQ1BDLEtBQUssRUFBRU8sY0FBYyxDQUFDUixPQUFPLENBQUNDLEtBQVQsQ0FEZDtRQUVQQyxJQUFJLEVBQUVNLGNBQWMsQ0FBQ1IsT0FBTyxDQUFDRSxJQUFULENBRmI7UUFHUEMsaUJBQWlCLEVBQUVLLGNBQWMsQ0FBQ1IsT0FBTyxDQUFDRyxpQkFBVCxDQUgxQjtRQUlQQyxnQkFBZ0IsRUFBRUksY0FBYyxDQUFDUixPQUFPLENBQUNJLGdCQUFUO01BSnpCO0lBRDRCLENBQXZDO0lBUUEsT0FBT00sWUFBUDtFQUNEOztFQUVELE9BQU8sSUFBUDtBQUNELENBdkJNOzs7O0FBeUJBLElBQU1DLGtCQUFrQixHQUFHLFNBQXJCQSxrQkFBcUIsQ0FDaENMLEtBRGdDLEVBRVY7RUFDdEIsSUFBSSxhQUFhQSxLQUFiLElBQXNCQSxLQUFLLENBQUNOLE9BQU4sSUFBaUIsSUFBM0MsRUFBaUQ7SUFDL0MsSUFBTVksWUFBWSxHQUFHSCxPQUFPLENBQUMsZ0JBQUQsQ0FBNUI7O0lBQ0EsSUFBTVQsT0FBTyxHQUFHTSxLQUFLLENBQUNOLE9BQXRCO0lBQ0EsSUFBTVUsWUFBOEIsR0FBRztNQUNyQ1YsT0FBTyxFQUFFO1FBQ1BDLEtBQUssRUFBRVcsWUFBWSxDQUFDWixPQUFPLENBQUNDLEtBQVQsQ0FEWjtRQUVQQyxJQUFJLEVBQUVVLFlBQVksQ0FBQ1osT0FBTyxDQUFDRSxJQUFULENBRlg7UUFHUEMsaUJBQWlCLEVBQUVTLFlBQVksQ0FBQ1osT0FBTyxDQUFDRyxpQkFBVCxDQUh4QjtRQUlQQyxnQkFBZ0IsRUFBRVEsWUFBWSxDQUFDWixPQUFPLENBQUNJLGdCQUFUO01BSnZCO0lBRDRCLENBQXZDO0lBUUEsT0FBT00sWUFBUDtFQUNEOztFQUNELE9BQU9KLEtBQVA7QUFDRCxDQWpCTSJ9