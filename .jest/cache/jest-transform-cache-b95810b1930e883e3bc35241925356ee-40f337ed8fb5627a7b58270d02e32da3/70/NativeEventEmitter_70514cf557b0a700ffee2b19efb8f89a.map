{"version":3,"names":["NativeEventEmitter","nativeModule","Platform","OS","invariant","hasAddListener","addListener","hasRemoveListeners","removeListeners","_nativeModule","console","warn","eventType","listener","context","subscription","RCTDeviceEventEmitter","remove","removeListener","args","emit","listenerCount","removeAllListeners"],"sources":["NativeEventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport {\n  type EventSubscription,\n  type IEventEmitter,\n} from '../vendor/emitter/EventEmitter';\nimport Platform from '../Utilities/Platform';\nimport RCTDeviceEventEmitter from './RCTDeviceEventEmitter';\nimport invariant from 'invariant';\n\ninterface NativeModule {\n  addListener(eventType: string): void;\n  removeListeners(count: number): void;\n}\n\nexport type {EventSubscription};\n\n/**\n * `NativeEventEmitter` is intended for use by Native Modules to emit events to\n * JavaScript listeners. If a `NativeModule` is supplied to the constructor, it\n * will be notified (via `addListener` and `removeListeners`) when the listener\n * count changes to manage \"native memory\".\n *\n * Currently, all native events are fired via a global `RCTDeviceEventEmitter`.\n * This means event names must be globally unique, and it means that call sites\n * can theoretically listen to `RCTDeviceEventEmitter` (although discouraged).\n */\nexport default class NativeEventEmitter<TEventToArgsMap: {...}>\n  implements IEventEmitter<TEventToArgsMap>\n{\n  _nativeModule: ?NativeModule;\n\n  constructor(nativeModule: ?NativeModule) {\n    if (Platform.OS === 'ios') {\n      invariant(\n        nativeModule != null,\n        '`new NativeEventEmitter()` requires a non-null argument.',\n      );\n    }\n\n    const hasAddListener =\n      // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n      !!nativeModule && typeof nativeModule.addListener === 'function';\n    const hasRemoveListeners =\n      // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n      !!nativeModule && typeof nativeModule.removeListeners === 'function';\n\n    if (nativeModule && hasAddListener && hasRemoveListeners) {\n      this._nativeModule = nativeModule;\n    } else if (nativeModule != null) {\n      if (!hasAddListener) {\n        console.warn(\n          '`new NativeEventEmitter()` was called with a non-null argument without the required `addListener` method.',\n        );\n      }\n      if (!hasRemoveListeners) {\n        console.warn(\n          '`new NativeEventEmitter()` was called with a non-null argument without the required `removeListeners` method.',\n        );\n      }\n    }\n  }\n\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: $ElementType<TEventToArgsMap, TEvent>) => mixed,\n    context?: mixed,\n  ): EventSubscription {\n    this._nativeModule?.addListener(eventType);\n    let subscription: ?EventSubscription = RCTDeviceEventEmitter.addListener(\n      eventType,\n      listener,\n      context,\n    );\n\n    return {\n      remove: () => {\n        if (subscription != null) {\n          this._nativeModule?.removeListeners(1);\n          // $FlowFixMe[incompatible-use]\n          subscription.remove();\n          subscription = null;\n        }\n      },\n    };\n  }\n\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n  removeListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: $ElementType<TEventToArgsMap, TEvent>) => mixed,\n  ): void {\n    this._nativeModule?.removeListeners(1);\n    // NOTE: This will report a deprecation notice via `console.error`.\n    // $FlowFixMe[prop-missing] - `removeListener` exists but is deprecated.\n    RCTDeviceEventEmitter.removeListener(eventType, listener);\n  }\n\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: $ElementType<TEventToArgsMap, TEvent>\n  ): void {\n    // Generally, `RCTDeviceEventEmitter` is directly invoked. But this is\n    // included for completeness.\n    RCTDeviceEventEmitter.emit(eventType, ...args);\n  }\n\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(\n    eventType?: ?TEvent,\n  ): void {\n    invariant(\n      eventType != null,\n      '`NativeEventEmitter.removeAllListener()` requires a non-null argument.',\n    );\n    this._nativeModule?.removeListeners(this.listenerCount(eventType));\n    RCTDeviceEventEmitter.removeAllListeners(eventType);\n  }\n\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number {\n    return RCTDeviceEventEmitter.listenerCount(eventType);\n  }\n}\n"],"mappings":"AAUA;;;;;;;;;;;;;AAMA;;AACA;;AACA;;IAmBqBA,kB;EAKnB,4BAAYC,YAAZ,EAAyC;IAAA;;IACvC,IAAIC,iBAAA,CAASC,EAAT,KAAgB,KAApB,EAA2B;MACzB,IAAAC,kBAAA,EACEH,YAAY,IAAI,IADlB,EAEE,0DAFF;IAID;;IAED,IAAMI,cAAc,GAElB,CAAC,CAACJ,YAAF,IAAkB,OAAOA,YAAY,CAACK,WAApB,KAAoC,UAFxD;IAGA,IAAMC,kBAAkB,GAEtB,CAAC,CAACN,YAAF,IAAkB,OAAOA,YAAY,CAACO,eAApB,KAAwC,UAF5D;;IAIA,IAAIP,YAAY,IAAII,cAAhB,IAAkCE,kBAAtC,EAA0D;MACxD,KAAKE,aAAL,GAAqBR,YAArB;IACD,CAFD,MAEO,IAAIA,YAAY,IAAI,IAApB,EAA0B;MAC/B,IAAI,CAACI,cAAL,EAAqB;QACnBK,OAAO,CAACC,IAAR,CACE,2GADF;MAGD;;MACD,IAAI,CAACJ,kBAAL,EAAyB;QACvBG,OAAO,CAACC,IAAR,CACE,+GADF;MAGD;IACF;EACF;;;;WAED,qBACEC,SADF,EAEEC,QAFF,EAGEC,OAHF,EAIqB;MAAA;MAAA;;MACnB,4BAAKL,aAAL,yCAAoBH,WAApB,CAAgCM,SAAhC;;MACA,IAAIG,YAAgC,GAAGC,8BAAA,CAAsBV,WAAtB,CACrCM,SADqC,EAErCC,QAFqC,EAGrCC,OAHqC,CAAvC;;MAMA,OAAO;QACLG,MAAM,EAAE,kBAAM;UACZ,IAAIF,YAAY,IAAI,IAApB,EAA0B;YAAA;;YACxB,6BAAI,CAACN,aAAL,0CAAoBD,eAApB,CAAoC,CAApC;YAEAO,YAAY,CAACE,MAAb;YACAF,YAAY,GAAG,IAAf;UACD;QACF;MARI,CAAP;IAUD;;;WAKD,wBACEH,SADF,EAEEC,QAFF,EAGQ;MAAA;;MACN,6BAAKJ,aAAL,0CAAoBD,eAApB,CAAoC,CAApC;;MAGAQ,8BAAA,CAAsBE,cAAtB,CAAqCN,SAArC,EAAgDC,QAAhD;IACD;;;WAED,cACED,SADF,EAGQ;MAAA,kCADHO,IACG;QADHA,IACG;MAAA;;MAGNH,8BAAA,CAAsBI,IAAtB,OAAAJ,8BAAA,GAA2BJ,SAA3B,SAAyCO,IAAzC;IACD;;;WAED,4BACEP,SADF,EAEQ;MAAA;;MACN,IAAAR,kBAAA,EACEQ,SAAS,IAAI,IADf,EAEE,wEAFF;MAIA,6BAAKH,aAAL,0CAAoBD,eAApB,CAAoC,KAAKa,aAAL,CAAmBT,SAAnB,CAApC;;MACAI,8BAAA,CAAsBM,kBAAtB,CAAyCV,SAAzC;IACD;;;WAED,uBAA8CA,SAA9C,EAAyE;MACvE,OAAOI,8BAAA,CAAsBK,aAAtB,CAAoCT,SAApC,CAAP;IACD"}