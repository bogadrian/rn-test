816257917f23a89b16b1448436354238
'use strict';

var _interopRequireDefault3 = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault3(require("@babel/runtime/regenerator"));

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = requireOrImportModule;

function _path() {
  var data = require('path');

  _path = function _path() {
    return data;
  };

  return data;
}

function _url() {
  var data = require('url');

  _url = function _url() {
    return data;
  };

  return data;
}

var _interopRequireDefault = _interopRequireDefault2(require('./interopRequireDefault'));

function _interopRequireDefault2(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function requireOrImportModule(filePath) {
  var applyInteropRequireDefault,
      requiredModule,
      moduleUrl,
      importedModule,
      _args = arguments;
  return _regenerator.default.async(function requireOrImportModule$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          applyInteropRequireDefault = _args.length > 1 && _args[1] !== undefined ? _args[1] : true;

          if (!(!(0, _path().isAbsolute)(filePath) && filePath[0] === '.')) {
            _context.next = 3;
            break;
          }

          throw new Error("Jest: requireOrImportModule path must be absolute, was \"" + filePath + "\"");

        case 3:
          _context.prev = 3;
          requiredModule = require(filePath);

          if (applyInteropRequireDefault) {
            _context.next = 7;
            break;
          }

          return _context.abrupt("return", requiredModule);

        case 7:
          return _context.abrupt("return", (0, _interopRequireDefault.default)(requiredModule).default);

        case 10:
          _context.prev = 10;
          _context.t0 = _context["catch"](3);

          if (!(_context.t0.code === 'ERR_REQUIRE_ESM')) {
            _context.next = 32;
            break;
          }

          _context.prev = 13;
          moduleUrl = (0, _url().pathToFileURL)(filePath);
          _context.next = 17;
          return _regenerator.default.awrap(import(moduleUrl.href));

        case 17:
          importedModule = _context.sent;

          if (applyInteropRequireDefault) {
            _context.next = 20;
            break;
          }

          return _context.abrupt("return", importedModule);

        case 20:
          if (importedModule.default) {
            _context.next = 22;
            break;
          }

          throw new Error("Jest: Failed to load ESM at " + filePath + " - did you use a default export?");

        case 22:
          return _context.abrupt("return", importedModule.default);

        case 25:
          _context.prev = 25;
          _context.t1 = _context["catch"](13);

          if (!(_context.t1.message === 'Not supported')) {
            _context.next = 29;
            break;
          }

          throw new Error("Jest: Your version of Node does not support dynamic import - please enable it or use a .cjs file extension for file " + filePath);

        case 29:
          throw _context.t1;

        case 30:
          _context.next = 33;
          break;

        case 32:
          throw _context.t0;

        case 33:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[3, 10], [13, 25]], Promise);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJyZXF1aXJlT3JJbXBvcnRNb2R1bGUiLCJfcGF0aCIsImRhdGEiLCJyZXF1aXJlIiwiX3VybCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MiIsIm9iaiIsIl9fZXNNb2R1bGUiLCJmaWxlUGF0aCIsImFwcGx5SW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiaXNBYnNvbHV0ZSIsIkVycm9yIiwicmVxdWlyZWRNb2R1bGUiLCJjb2RlIiwibW9kdWxlVXJsIiwicGF0aFRvRmlsZVVSTCIsImhyZWYiLCJpbXBvcnRlZE1vZHVsZSIsIm1lc3NhZ2UiXSwic291cmNlcyI6WyJyZXF1aXJlT3JJbXBvcnRNb2R1bGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlcXVpcmVPckltcG9ydE1vZHVsZTtcblxuZnVuY3Rpb24gX3BhdGgoKSB7XG4gIGNvbnN0IGRhdGEgPSByZXF1aXJlKCdwYXRoJyk7XG5cbiAgX3BhdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIF91cmwoKSB7XG4gIGNvbnN0IGRhdGEgPSByZXF1aXJlKCd1cmwnKTtcblxuICBfdXJsID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKFxuICByZXF1aXJlKCcuL2ludGVyb3BSZXF1aXJlRGVmYXVsdCcpXG4pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtkZWZhdWx0OiBvYmp9O1xufVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5hc3luYyBmdW5jdGlvbiByZXF1aXJlT3JJbXBvcnRNb2R1bGUoXG4gIGZpbGVQYXRoLFxuICBhcHBseUludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHRydWVcbikge1xuICBpZiAoISgwLCBfcGF0aCgpLmlzQWJzb2x1dGUpKGZpbGVQYXRoKSAmJiBmaWxlUGF0aFswXSA9PT0gJy4nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEplc3Q6IHJlcXVpcmVPckltcG9ydE1vZHVsZSBwYXRoIG11c3QgYmUgYWJzb2x1dGUsIHdhcyBcIiR7ZmlsZVBhdGh9XCJgXG4gICAgKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgcmVxdWlyZWRNb2R1bGUgPSByZXF1aXJlKGZpbGVQYXRoKTtcblxuICAgIGlmICghYXBwbHlJbnRlcm9wUmVxdWlyZURlZmF1bHQpIHtcbiAgICAgIHJldHVybiByZXF1aXJlZE1vZHVsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKDAsIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQuZGVmYXVsdCkocmVxdWlyZWRNb2R1bGUpLmRlZmF1bHQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yLmNvZGUgPT09ICdFUlJfUkVRVUlSRV9FU00nKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBtb2R1bGVVcmwgPSAoMCwgX3VybCgpLnBhdGhUb0ZpbGVVUkwpKGZpbGVQYXRoKTsgLy8gbm9kZSBgaW1wb3J0KClgIHN1cHBvcnRzIFVSTCwgYnV0IFR5cGVTY3JpcHQgZG9lc24ndCBrbm93IHRoYXRcblxuICAgICAgICBjb25zdCBpbXBvcnRlZE1vZHVsZSA9IGF3YWl0IGltcG9ydChtb2R1bGVVcmwuaHJlZik7XG5cbiAgICAgICAgaWYgKCFhcHBseUludGVyb3BSZXF1aXJlRGVmYXVsdCkge1xuICAgICAgICAgIHJldHVybiBpbXBvcnRlZE1vZHVsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaW1wb3J0ZWRNb2R1bGUuZGVmYXVsdCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBKZXN0OiBGYWlsZWQgdG8gbG9hZCBFU00gYXQgJHtmaWxlUGF0aH0gLSBkaWQgeW91IHVzZSBhIGRlZmF1bHQgZXhwb3J0P2BcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGltcG9ydGVkTW9kdWxlLmRlZmF1bHQ7XG4gICAgICB9IGNhdGNoIChpbm5lckVycm9yKSB7XG4gICAgICAgIGlmIChpbm5lckVycm9yLm1lc3NhZ2UgPT09ICdOb3Qgc3VwcG9ydGVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBKZXN0OiBZb3VyIHZlcnNpb24gb2YgTm9kZSBkb2VzIG5vdCBzdXBwb3J0IGR5bmFtaWMgaW1wb3J0IC0gcGxlYXNlIGVuYWJsZSBpdCBvciB1c2UgYSAuY2pzIGZpbGUgZXh0ZW5zaW9uIGZvciBmaWxlICR7ZmlsZVBhdGh9YFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBpbm5lckVycm9yO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FB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