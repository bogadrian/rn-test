98e694ec1bce330b76662ad1ed7229ca
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _requireNativeComponent = _interopRequireDefault(require("../../Libraries/ReactNative/requireNativeComponent"));

var _UIManager = _interopRequireDefault(require("../ReactNative/UIManager"));

function codegenNativeComponent(componentName, options) {
  var componentNameInUse = options && options.paperComponentName != null ? options.paperComponentName : componentName;

  if (options != null && options.paperComponentNameDeprecated != null) {
    if (_UIManager.default.getViewManagerConfig(componentName)) {
      componentNameInUse = componentName;
    } else if (options.paperComponentNameDeprecated != null && _UIManager.default.getViewManagerConfig(options.paperComponentNameDeprecated)) {
      componentNameInUse = options.paperComponentNameDeprecated;
    } else {
      var _options$paperCompone;

      throw new Error("Failed to find native component for either " + componentName + " or " + ((_options$paperCompone = options.paperComponentNameDeprecated) != null ? _options$paperCompone : '(unknown)'));
    }
  }

  return (0, _requireNativeComponent.default)(componentNameInUse);
}

var _default = codegenNativeComponent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb2RlZ2VuTmF0aXZlQ29tcG9uZW50IiwiY29tcG9uZW50TmFtZSIsIm9wdGlvbnMiLCJjb21wb25lbnROYW1lSW5Vc2UiLCJwYXBlckNvbXBvbmVudE5hbWUiLCJwYXBlckNvbXBvbmVudE5hbWVEZXByZWNhdGVkIiwiVUlNYW5hZ2VyIiwiZ2V0Vmlld01hbmFnZXJDb25maWciLCJFcnJvciIsInJlcXVpcmVOYXRpdmVDb21wb25lbnQiXSwic291cmNlcyI6WyJjb2RlZ2VuTmF0aXZlQ29tcG9uZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG4vLyBUT0RPOiBtb3ZlIHRoaXMgZmlsZSB0byBzaGltcy9SZWFjdE5hdGl2ZSAocmVxdWlyZXMgUmVhY3QgdXBkYXRlIGFuZCBzeW5jKVxuXG5pbXBvcnQgcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCBmcm9tICcuLi8uLi9MaWJyYXJpZXMvUmVhY3ROYXRpdmUvcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCc7XG5pbXBvcnQgdHlwZSB7SG9zdENvbXBvbmVudH0gZnJvbSAnLi4vLi4vTGlicmFyaWVzL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVHlwZXMnO1xuaW1wb3J0IFVJTWFuYWdlciBmcm9tICcuLi9SZWFjdE5hdGl2ZS9VSU1hbmFnZXInO1xuXG4vLyBUT0RPOiBpbXBvcnQgZnJvbSBDb2RlZ2VuU2NoZW1hIG9uY2Ugd29ya3NwYWNlcyBhcmUgZW5hYmxlZFxudHlwZSBPcHRpb25zID0gJFJlYWRPbmx5PHt8XG4gIGludGVyZmFjZU9ubHk/OiBib29sZWFuLFxuICBwYXBlckNvbXBvbmVudE5hbWU/OiBzdHJpbmcsXG4gIHBhcGVyQ29tcG9uZW50TmFtZURlcHJlY2F0ZWQ/OiBzdHJpbmcsXG4gIGV4Y2x1ZGVkUGxhdGZvcm1zPzogJFJlYWRPbmx5QXJyYXk8J2lPUycgfCAnYW5kcm9pZCc+LFxufH0+O1xuXG5leHBvcnQgdHlwZSBOYXRpdmVDb21wb25lbnRUeXBlPFQ+ID0gSG9zdENvbXBvbmVudDxUPjtcblxuZnVuY3Rpb24gY29kZWdlbk5hdGl2ZUNvbXBvbmVudDxQcm9wcz4oXG4gIGNvbXBvbmVudE5hbWU6IHN0cmluZyxcbiAgb3B0aW9ucz86IE9wdGlvbnMsXG4pOiBOYXRpdmVDb21wb25lbnRUeXBlPFByb3BzPiB7XG4gIGxldCBjb21wb25lbnROYW1lSW5Vc2UgPVxuICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5wYXBlckNvbXBvbmVudE5hbWUgIT0gbnVsbFxuICAgICAgPyBvcHRpb25zLnBhcGVyQ29tcG9uZW50TmFtZVxuICAgICAgOiBjb21wb25lbnROYW1lO1xuXG4gIGlmIChvcHRpb25zICE9IG51bGwgJiYgb3B0aW9ucy5wYXBlckNvbXBvbmVudE5hbWVEZXByZWNhdGVkICE9IG51bGwpIHtcbiAgICBpZiAoVUlNYW5hZ2VyLmdldFZpZXdNYW5hZ2VyQ29uZmlnKGNvbXBvbmVudE5hbWUpKSB7XG4gICAgICBjb21wb25lbnROYW1lSW5Vc2UgPSBjb21wb25lbnROYW1lO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBvcHRpb25zLnBhcGVyQ29tcG9uZW50TmFtZURlcHJlY2F0ZWQgIT0gbnVsbCAmJlxuICAgICAgVUlNYW5hZ2VyLmdldFZpZXdNYW5hZ2VyQ29uZmlnKG9wdGlvbnMucGFwZXJDb21wb25lbnROYW1lRGVwcmVjYXRlZClcbiAgICApIHtcbiAgICAgIGNvbXBvbmVudE5hbWVJblVzZSA9IG9wdGlvbnMucGFwZXJDb21wb25lbnROYW1lRGVwcmVjYXRlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRmFpbGVkIHRvIGZpbmQgbmF0aXZlIGNvbXBvbmVudCBmb3IgZWl0aGVyICR7Y29tcG9uZW50TmFtZX0gb3IgJHtcbiAgICAgICAgICBvcHRpb25zLnBhcGVyQ29tcG9uZW50TmFtZURlcHJlY2F0ZWQgPz8gJyh1bmtub3duKSdcbiAgICAgICAgfWAsXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIHRoaXMgZnVuY3Rpb24gaXMgcnVuIGF0IHJ1bnRpbWUgdGhlbiB0aGF0IG1lYW5zIHRoZSB2aWV3IGNvbmZpZ3Mgd2VyZSBub3RcbiAgLy8gZ2VuZXJhdGVkIHdpdGggdGhlIHZpZXcgY29uZmlnIGJhYmVsIHBsdWdpbiwgc28gd2UgbmVlZCB0byByZXF1aXJlIHRoZSBuYXRpdmUgY29tcG9uZW50LlxuICAvL1xuICAvLyBUaGlzIHdpbGwgYmUgdXNlZnVsIGR1cmluZyBtaWdyYXRpb24sIGJ1dCBldmVudHVhbGx5IHRoaXMgd2lsbCBlcnJvci5cbiAgcmV0dXJuIChyZXF1aXJlTmF0aXZlQ29tcG9uZW50PFByb3BzPihcbiAgICBjb21wb25lbnROYW1lSW5Vc2UsXG4gICk6IEhvc3RDb21wb25lbnQ8UHJvcHM+KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29kZWdlbk5hdGl2ZUNvbXBvbmVudDtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVlBOztBQUVBOztBQVlBLFNBQVNBLHNCQUFULENBQ0VDLGFBREYsRUFFRUMsT0FGRixFQUc4QjtFQUM1QixJQUFJQyxrQkFBa0IsR0FDcEJELE9BQU8sSUFBSUEsT0FBTyxDQUFDRSxrQkFBUixJQUE4QixJQUF6QyxHQUNJRixPQUFPLENBQUNFLGtCQURaLEdBRUlILGFBSE47O0VBS0EsSUFBSUMsT0FBTyxJQUFJLElBQVgsSUFBbUJBLE9BQU8sQ0FBQ0csNEJBQVIsSUFBd0MsSUFBL0QsRUFBcUU7SUFDbkUsSUFBSUMsa0JBQUEsQ0FBVUMsb0JBQVYsQ0FBK0JOLGFBQS9CLENBQUosRUFBbUQ7TUFDakRFLGtCQUFrQixHQUFHRixhQUFyQjtJQUNELENBRkQsTUFFTyxJQUNMQyxPQUFPLENBQUNHLDRCQUFSLElBQXdDLElBQXhDLElBQ0FDLGtCQUFBLENBQVVDLG9CQUFWLENBQStCTCxPQUFPLENBQUNHLDRCQUF2QyxDQUZLLEVBR0w7TUFDQUYsa0JBQWtCLEdBQUdELE9BQU8sQ0FBQ0csNEJBQTdCO0lBQ0QsQ0FMTSxNQUtBO01BQUE7O01BQ0wsTUFBTSxJQUFJRyxLQUFKLGlEQUMwQ1AsYUFEMUMsc0NBRUZDLE9BQU8sQ0FBQ0csNEJBRk4sb0NBRXNDLFdBRnRDLEVBQU47SUFLRDtFQUNGOztFQU1ELE9BQVEsSUFBQUksK0JBQUEsRUFDTk4sa0JBRE0sQ0FBUjtBQUdEOztlQUVjSCxzQiJ9