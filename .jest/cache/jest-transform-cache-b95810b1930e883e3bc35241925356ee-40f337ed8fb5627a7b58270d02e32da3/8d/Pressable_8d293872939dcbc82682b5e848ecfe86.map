{"version":3,"names":["Pressable","props","forwardedRef","accessible","android_disableSound","android_ripple","cancelable","children","delayHoverIn","delayHoverOut","delayLongPress","disabled","focusable","onHoverIn","onHoverOut","onLongPress","onPress","onPressIn","onPressOut","pressRetentionOffset","style","testOnly_pressed","unstable_pressDelay","restProps","viewRef","useRef","useImperativeHandle","current","android_rippleConfig","useAndroidRippleForView","usePressState","pressed","setPressed","hitSlop","normalizeRect","accessibilityState","restPropsWithDefaults","viewProps","config","useMemo","pressRectOffset","delayPressIn","event","onPressMove","eventHandlers","usePressability","__DEV__","forcePressed","useState","MemoedPressable","React","memo","forwardRef","displayName"],"sources":["Pressable.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport * as React from 'react';\nimport {useMemo, useState, useRef, useImperativeHandle} from 'react';\nimport useAndroidRippleForView, {\n  type RippleConfig,\n} from './useAndroidRippleForView';\nimport type {\n  AccessibilityActionEvent,\n  AccessibilityActionInfo,\n  AccessibilityRole,\n  AccessibilityState,\n  AccessibilityValue,\n} from '../View/ViewAccessibility';\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\nimport usePressability from '../../Pressability/usePressability';\nimport {normalizeRect, type RectOrSize} from '../../StyleSheet/Rect';\nimport type {\n  LayoutEvent,\n  MouseEvent,\n  PressEvent,\n} from '../../Types/CoreEventTypes';\nimport View from '../View/View';\n\ntype ViewStyleProp = $ElementType<React.ElementConfig<typeof View>, 'style'>;\n\nexport type StateCallbackType = $ReadOnly<{|\n  pressed: boolean,\n|}>;\n\ntype Props = $ReadOnly<{|\n  /**\n   * Accessibility.\n   */\n  accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,\n  accessibilityElementsHidden?: ?boolean,\n  accessibilityHint?: ?Stringish,\n  accessibilityIgnoresInvertColors?: ?boolean,\n  accessibilityLabel?: ?Stringish,\n  accessibilityLiveRegion?: ?('none' | 'polite' | 'assertive'),\n  accessibilityRole?: ?AccessibilityRole,\n  accessibilityState?: ?AccessibilityState,\n  accessibilityValue?: ?AccessibilityValue,\n  accessibilityViewIsModal?: ?boolean,\n  accessible?: ?boolean,\n  focusable?: ?boolean,\n  importantForAccessibility?: ?('auto' | 'yes' | 'no' | 'no-hide-descendants'),\n  onAccessibilityAction?: ?(event: AccessibilityActionEvent) => mixed,\n\n  /**\n   * Whether a press gesture can be interrupted by a parent gesture such as a\n   * scroll event. Defaults to true.\n   */\n  cancelable?: ?boolean,\n\n  /**\n   * Either children or a render prop that receives a boolean reflecting whether\n   * the component is currently pressed.\n   */\n  children: React.Node | ((state: StateCallbackType) => React.Node),\n\n  /**\n   * Duration to wait after hover in before calling `onHoverIn`.\n   */\n  delayHoverIn?: ?number,\n\n  /**\n   * Duration to wait after hover out before calling `onHoverOut`.\n   */\n  delayHoverOut?: ?number,\n\n  /**\n   * Duration (in milliseconds) from `onPressIn` before `onLongPress` is called.\n   */\n  delayLongPress?: ?number,\n\n  /**\n   * Whether the press behavior is disabled.\n   */\n  disabled?: ?boolean,\n\n  /**\n   * Additional distance outside of this view in which a press is detected.\n   */\n  hitSlop?: ?RectOrSize,\n\n  /**\n   * Additional distance outside of this view in which a touch is considered a\n   * press before `onPressOut` is triggered.\n   */\n  pressRetentionOffset?: ?RectOrSize,\n\n  /**\n   * Called when this view's layout changes.\n   */\n  onLayout?: ?(event: LayoutEvent) => mixed,\n\n  /**\n   * Called when the hover is activated to provide visual feedback.\n   */\n  onHoverIn?: ?(event: MouseEvent) => mixed,\n\n  /**\n   * Called when the hover is deactivated to undo visual feedback.\n   */\n  onHoverOut?: ?(event: MouseEvent) => mixed,\n\n  /**\n   * Called when a long-tap gesture is detected.\n   */\n  onLongPress?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a single tap gesture is detected.\n   */\n  onPress?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a touch is engaged before `onPress`.\n   */\n  onPressIn?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a touch is released before `onPress`.\n   */\n  onPressOut?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Either view styles or a function that receives a boolean reflecting whether\n   * the component is currently pressed and returns view styles.\n   */\n  style?: ViewStyleProp | ((state: StateCallbackType) => ViewStyleProp),\n\n  /**\n   * Identifier used to find this view in tests.\n   */\n  testID?: ?string,\n\n  /**\n   * If true, doesn't play system sound on touch.\n   */\n  android_disableSound?: ?boolean,\n\n  /**\n   * Enables the Android ripple effect and configures its color.\n   */\n  android_ripple?: ?RippleConfig,\n\n  /**\n   * Used only for documentation or testing (e.g. snapshot testing).\n   */\n  testOnly_pressed?: ?boolean,\n\n  /**\n   * Duration to wait after press down before calling `onPressIn`.\n   */\n  unstable_pressDelay?: ?number,\n|}>;\n\n/**\n * Component used to build display components that should respond to whether the\n * component is currently pressed or not.\n */\nfunction Pressable(props: Props, forwardedRef): React.Node {\n  const {\n    accessible,\n    android_disableSound,\n    android_ripple,\n    cancelable,\n    children,\n    delayHoverIn,\n    delayHoverOut,\n    delayLongPress,\n    disabled,\n    focusable,\n    onHoverIn,\n    onHoverOut,\n    onLongPress,\n    onPress,\n    onPressIn,\n    onPressOut,\n    pressRetentionOffset,\n    style,\n    testOnly_pressed,\n    unstable_pressDelay,\n    ...restProps\n  } = props;\n\n  const viewRef = useRef<React.ElementRef<typeof View> | null>(null);\n  useImperativeHandle(forwardedRef, () => viewRef.current);\n\n  const android_rippleConfig = useAndroidRippleForView(android_ripple, viewRef);\n\n  const [pressed, setPressed] = usePressState(testOnly_pressed === true);\n\n  const hitSlop = normalizeRect(props.hitSlop);\n\n  const accessibilityState =\n    disabled != null\n      ? {...props.accessibilityState, disabled}\n      : props.accessibilityState;\n\n  const restPropsWithDefaults: React.ElementConfig<typeof View> = {\n    ...restProps,\n    ...android_rippleConfig?.viewProps,\n    accessible: accessible !== false,\n    accessibilityState,\n    focusable: focusable !== false,\n    hitSlop,\n  };\n\n  const config = useMemo(\n    () => ({\n      cancelable,\n      disabled,\n      hitSlop,\n      pressRectOffset: pressRetentionOffset,\n      android_disableSound,\n      delayHoverIn,\n      delayHoverOut,\n      delayLongPress,\n      delayPressIn: unstable_pressDelay,\n      onHoverIn,\n      onHoverOut,\n      onLongPress,\n      onPress,\n      onPressIn(event: PressEvent): void {\n        if (android_rippleConfig != null) {\n          android_rippleConfig.onPressIn(event);\n        }\n        setPressed(true);\n        if (onPressIn != null) {\n          onPressIn(event);\n        }\n      },\n      onPressMove: android_rippleConfig?.onPressMove,\n      onPressOut(event: PressEvent): void {\n        if (android_rippleConfig != null) {\n          android_rippleConfig.onPressOut(event);\n        }\n        setPressed(false);\n        if (onPressOut != null) {\n          onPressOut(event);\n        }\n      },\n    }),\n    [\n      android_disableSound,\n      android_rippleConfig,\n      cancelable,\n      delayHoverIn,\n      delayHoverOut,\n      delayLongPress,\n      disabled,\n      hitSlop,\n      onHoverIn,\n      onHoverOut,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressOut,\n      pressRetentionOffset,\n      setPressed,\n      unstable_pressDelay,\n    ],\n  );\n  const eventHandlers = usePressability(config);\n\n  return (\n    <View\n      {...restPropsWithDefaults}\n      {...eventHandlers}\n      ref={viewRef}\n      style={typeof style === 'function' ? style({pressed}) : style}\n      collapsable={false}>\n      {typeof children === 'function' ? children({pressed}) : children}\n      {__DEV__ ? <PressabilityDebugView color=\"red\" hitSlop={hitSlop} /> : null}\n    </View>\n  );\n}\n\nfunction usePressState(forcePressed: boolean): [boolean, (boolean) => void] {\n  const [pressed, setPressed] = useState(false);\n  return [pressed || forcePressed, setPressed];\n}\n\nconst MemoedPressable = React.memo(React.forwardRef(Pressable));\nMemoedPressable.displayName = 'Pressable';\n\nexport default (MemoedPressable: React.AbstractComponent<\n  Props,\n  React.ElementRef<typeof View>,\n>);\n"],"mappings":"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"}