{"version":3,"names":["codegenNativeComponent","componentName","options","componentNameInUse","paperComponentName","paperComponentNameDeprecated","UIManager","getViewManagerConfig","Error","requireNativeComponent"],"sources":["codegenNativeComponent.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n// TODO: move this file to shims/ReactNative (requires React update and sync)\n\nimport requireNativeComponent from '../../Libraries/ReactNative/requireNativeComponent';\nimport type {HostComponent} from '../../Libraries/Renderer/shims/ReactNativeTypes';\nimport UIManager from '../ReactNative/UIManager';\n\n// TODO: import from CodegenSchema once workspaces are enabled\ntype Options = $ReadOnly<{|\n  interfaceOnly?: boolean,\n  paperComponentName?: string,\n  paperComponentNameDeprecated?: string,\n  excludedPlatforms?: $ReadOnlyArray<'iOS' | 'android'>,\n|}>;\n\nexport type NativeComponentType<T> = HostComponent<T>;\n\nfunction codegenNativeComponent<Props>(\n  componentName: string,\n  options?: Options,\n): NativeComponentType<Props> {\n  let componentNameInUse =\n    options && options.paperComponentName != null\n      ? options.paperComponentName\n      : componentName;\n\n  if (options != null && options.paperComponentNameDeprecated != null) {\n    if (UIManager.getViewManagerConfig(componentName)) {\n      componentNameInUse = componentName;\n    } else if (\n      options.paperComponentNameDeprecated != null &&\n      UIManager.getViewManagerConfig(options.paperComponentNameDeprecated)\n    ) {\n      componentNameInUse = options.paperComponentNameDeprecated;\n    } else {\n      throw new Error(\n        `Failed to find native component for either ${componentName} or ${\n          options.paperComponentNameDeprecated ?? '(unknown)'\n        }`,\n      );\n    }\n  }\n\n  // If this function is run at runtime then that means the view configs were not\n  // generated with the view config babel plugin, so we need to require the native component.\n  //\n  // This will be useful during migration, but eventually this will error.\n  return (requireNativeComponent<Props>(\n    componentNameInUse,\n  ): HostComponent<Props>);\n}\n\nexport default codegenNativeComponent;\n"],"mappings":";;;;;;;AAYA;;AAEA;;AAYA,SAASA,sBAAT,CACEC,aADF,EAEEC,OAFF,EAG8B;EAC5B,IAAIC,kBAAkB,GACpBD,OAAO,IAAIA,OAAO,CAACE,kBAAR,IAA8B,IAAzC,GACIF,OAAO,CAACE,kBADZ,GAEIH,aAHN;;EAKA,IAAIC,OAAO,IAAI,IAAX,IAAmBA,OAAO,CAACG,4BAAR,IAAwC,IAA/D,EAAqE;IACnE,IAAIC,kBAAA,CAAUC,oBAAV,CAA+BN,aAA/B,CAAJ,EAAmD;MACjDE,kBAAkB,GAAGF,aAArB;IACD,CAFD,MAEO,IACLC,OAAO,CAACG,4BAAR,IAAwC,IAAxC,IACAC,kBAAA,CAAUC,oBAAV,CAA+BL,OAAO,CAACG,4BAAvC,CAFK,EAGL;MACAF,kBAAkB,GAAGD,OAAO,CAACG,4BAA7B;IACD,CALM,MAKA;MAAA;;MACL,MAAM,IAAIG,KAAJ,iDAC0CP,aAD1C,sCAEFC,OAAO,CAACG,4BAFN,oCAEsC,WAFtC,EAAN;IAKD;EACF;;EAMD,OAAQ,IAAAI,+BAAA,EACNN,kBADM,CAAR;AAGD;;eAEcH,sB"}