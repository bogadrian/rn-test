584b6af42cc2c347ab5252cb957abd7e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _useAndroidRippleForView = _interopRequireDefault(require("./useAndroidRippleForView"));

var _PressabilityDebug = require("../../Pressability/PressabilityDebug");

var _usePressability = _interopRequireDefault(require("../../Pressability/usePressability"));

var _Rect = require("../../StyleSheet/Rect");

var _View = _interopRequireDefault(require("../View/View"));

var _excluded = ["accessible", "android_disableSound", "android_ripple", "cancelable", "children", "delayHoverIn", "delayHoverOut", "delayLongPress", "disabled", "focusable", "onHoverIn", "onHoverOut", "onLongPress", "onPress", "onPressIn", "onPressOut", "pressRetentionOffset", "style", "testOnly_pressed", "unstable_pressDelay"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Pressable(props, forwardedRef) {
  var accessible = props.accessible,
      android_disableSound = props.android_disableSound,
      android_ripple = props.android_ripple,
      cancelable = props.cancelable,
      children = props.children,
      delayHoverIn = props.delayHoverIn,
      delayHoverOut = props.delayHoverOut,
      delayLongPress = props.delayLongPress,
      disabled = props.disabled,
      focusable = props.focusable,
      onHoverIn = props.onHoverIn,
      onHoverOut = props.onHoverOut,
      onLongPress = props.onLongPress,
      onPress = props.onPress,
      _onPressIn = props.onPressIn,
      _onPressOut = props.onPressOut,
      pressRetentionOffset = props.pressRetentionOffset,
      style = props.style,
      testOnly_pressed = props.testOnly_pressed,
      unstable_pressDelay = props.unstable_pressDelay,
      restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  var viewRef = (0, React.useRef)(null);
  (0, React.useImperativeHandle)(forwardedRef, function () {
    return viewRef.current;
  });
  var android_rippleConfig = (0, _useAndroidRippleForView.default)(android_ripple, viewRef);

  var _usePressState = usePressState(testOnly_pressed === true),
      _usePressState2 = (0, _slicedToArray2.default)(_usePressState, 2),
      pressed = _usePressState2[0],
      setPressed = _usePressState2[1];

  var hitSlop = (0, _Rect.normalizeRect)(props.hitSlop);
  var accessibilityState = disabled != null ? (0, _extends2.default)({}, props.accessibilityState, {
    disabled: disabled
  }) : props.accessibilityState;
  var restPropsWithDefaults = (0, _extends2.default)({}, restProps, android_rippleConfig == null ? void 0 : android_rippleConfig.viewProps, {
    accessible: accessible !== false,
    accessibilityState: accessibilityState,
    focusable: focusable !== false,
    hitSlop: hitSlop
  });
  var config = (0, React.useMemo)(function () {
    return {
      cancelable: cancelable,
      disabled: disabled,
      hitSlop: hitSlop,
      pressRectOffset: pressRetentionOffset,
      android_disableSound: android_disableSound,
      delayHoverIn: delayHoverIn,
      delayHoverOut: delayHoverOut,
      delayLongPress: delayLongPress,
      delayPressIn: unstable_pressDelay,
      onHoverIn: onHoverIn,
      onHoverOut: onHoverOut,
      onLongPress: onLongPress,
      onPress: onPress,
      onPressIn: function onPressIn(event) {
        if (android_rippleConfig != null) {
          android_rippleConfig.onPressIn(event);
        }

        setPressed(true);

        if (_onPressIn != null) {
          _onPressIn(event);
        }
      },
      onPressMove: android_rippleConfig == null ? void 0 : android_rippleConfig.onPressMove,
      onPressOut: function onPressOut(event) {
        if (android_rippleConfig != null) {
          android_rippleConfig.onPressOut(event);
        }

        setPressed(false);

        if (_onPressOut != null) {
          _onPressOut(event);
        }
      }
    };
  }, [android_disableSound, android_rippleConfig, cancelable, delayHoverIn, delayHoverOut, delayLongPress, disabled, hitSlop, onHoverIn, onHoverOut, onLongPress, onPress, _onPressIn, _onPressOut, pressRetentionOffset, setPressed, unstable_pressDelay]);
  var eventHandlers = (0, _usePressability.default)(config);
  return React.createElement(_View.default, (0, _extends2.default)({}, restPropsWithDefaults, eventHandlers, {
    ref: viewRef,
    style: typeof style === 'function' ? style({
      pressed: pressed
    }) : style,
    collapsable: false
  }), typeof children === 'function' ? children({
    pressed: pressed
  }) : children, __DEV__ ? React.createElement(_PressabilityDebug.PressabilityDebugView, {
    color: "red",
    hitSlop: hitSlop
  }) : null);
}

function usePressState(forcePressed) {
  var _useState = (0, React.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      pressed = _useState2[0],
      setPressed = _useState2[1];

  return [pressed || forcePressed, setPressed];
}

var MemoedPressable = React.memo(React.forwardRef(Pressable));
MemoedPressable.displayName = 'Pressable';
var _default = MemoedPressable;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,