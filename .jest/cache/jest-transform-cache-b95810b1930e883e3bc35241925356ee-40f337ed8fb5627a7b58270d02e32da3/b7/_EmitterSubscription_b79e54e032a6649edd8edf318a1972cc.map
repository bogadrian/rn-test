{"version":3,"names":["EmitterSubscription","emitter","subscriber","listener","context","__removeSubscription","_EventSubscription","module","exports"],"sources":["_EmitterSubscription.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nimport type EventEmitter from './EventEmitter';\nimport _EventSubscription from './_EventSubscription';\nimport type EventSubscriptionVendor from './_EventSubscriptionVendor';\nimport {type EventSubscription} from './EventSubscription';\n\n/**\n * EmitterSubscription represents a subscription with listener and context data.\n */\nclass EmitterSubscription<EventDefinitions: {...}, K: $Keys<EventDefinitions>>\n  extends _EventSubscription<EventDefinitions, K>\n  implements EventSubscription\n{\n  emitter: EventEmitter<EventDefinitions>;\n  listener: ?(...$ElementType<EventDefinitions, K>) => mixed;\n  context: ?$FlowFixMe;\n\n  /**\n   * @param {EventEmitter} emitter - The event emitter that registered this\n   *   subscription\n   * @param {EventSubscriptionVendor} subscriber - The subscriber that controls\n   *   this subscription\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  constructor(\n    emitter: EventEmitter<EventDefinitions>,\n    subscriber: EventSubscriptionVendor<EventDefinitions>,\n    listener: (...$ElementType<EventDefinitions, K>) => mixed,\n    context: ?$FlowFixMe,\n  ) {\n    super(subscriber);\n    this.emitter = emitter;\n    this.listener = listener;\n    this.context = context;\n  }\n\n  /**\n   * Removes this subscription from the emitter that registered it.\n   * Note: we're overriding the `remove()` method of _EventSubscription here\n   * but deliberately not calling `super.remove()` as the responsibility\n   * for removing the subscription lies with the EventEmitter.\n   */\n  remove(): void {\n    this.emitter.__removeSubscription(this);\n  }\n}\n\nmodule.exports = EmitterSubscription;\n"],"mappings":"AAUA;;;;;;;;;;;;;;AAGA;;;;;;IAOMA,mB;;;;;EAkBJ,6BACEC,OADF,EAEEC,UAFF,EAGEC,QAHF,EAIEC,OAJF,EAKE;IAAA;;IAAA;IACA,0BAAMF,UAAN;IACA,MAAKD,OAAL,GAAeA,OAAf;IACA,MAAKE,QAAL,GAAgBA,QAAhB;IACA,MAAKC,OAAL,GAAeA,OAAf;IAJA;EAKD;;;;WAQD,kBAAe;MACb,KAAKH,OAAL,CAAaI,oBAAb,CAAkC,IAAlC;IACD;;;EArCOC,2B;;AAwCVC,MAAM,CAACC,OAAP,GAAiBR,mBAAjB"}