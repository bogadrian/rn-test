8a446c88a61800ba158be65d10da666f
var _inGuard = 0;

var _globalHandler = function onError(e, isFatal) {
  throw e;
};

var ErrorUtils = {
  setGlobalHandler: function setGlobalHandler(fun) {
    _globalHandler = fun;
  },
  getGlobalHandler: function getGlobalHandler() {
    return _globalHandler;
  },
  reportError: function reportError(error) {
    _globalHandler && _globalHandler(error, false);
  },
  reportFatalError: function reportFatalError(error) {
    _globalHandler && _globalHandler(error, true);
  },
  applyWithGuard: function applyWithGuard(fun, context, args, unused_onError, unused_name) {
    try {
      _inGuard++;
      return fun.apply(context, args);
    } catch (e) {
      ErrorUtils.reportError(e);
    } finally {
      _inGuard--;
    }

    return null;
  },
  applyWithGuardIfNeeded: function applyWithGuardIfNeeded(fun, context, args) {
    if (ErrorUtils.inGuard()) {
      return fun.apply(context, args);
    } else {
      ErrorUtils.applyWithGuard(fun, context, args);
    }

    return null;
  },
  inGuard: function inGuard() {
    return !!_inGuard;
  },
  guard: function guard(fun, name, context) {
    var _ref;

    if (typeof fun !== 'function') {
      console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
      return null;
    }

    var guardName = (_ref = name != null ? name : fun.name) != null ? _ref : '<generated guard>';

    function guarded() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return ErrorUtils.applyWithGuard(fun, context != null ? context : this, args, null, guardName);
    }

    return guarded;
  }
};
global.ErrorUtils = ErrorUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW5HdWFyZCIsIl9nbG9iYWxIYW5kbGVyIiwib25FcnJvciIsImUiLCJpc0ZhdGFsIiwiRXJyb3JVdGlscyIsInNldEdsb2JhbEhhbmRsZXIiLCJmdW4iLCJnZXRHbG9iYWxIYW5kbGVyIiwicmVwb3J0RXJyb3IiLCJlcnJvciIsInJlcG9ydEZhdGFsRXJyb3IiLCJhcHBseVdpdGhHdWFyZCIsImNvbnRleHQiLCJhcmdzIiwidW51c2VkX29uRXJyb3IiLCJ1bnVzZWRfbmFtZSIsImFwcGx5IiwiYXBwbHlXaXRoR3VhcmRJZk5lZWRlZCIsImluR3VhcmQiLCJndWFyZCIsIm5hbWUiLCJjb25zb2xlIiwid2FybiIsImd1YXJkTmFtZSIsImd1YXJkZWQiLCJnbG9iYWwiXSwic291cmNlcyI6WyJlcnJvci1ndWFyZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdFxuICogQHBvbHlmaWxsXG4gKi9cblxubGV0IF9pbkd1YXJkID0gMDtcblxudHlwZSBFcnJvckhhbmRsZXIgPSAoZXJyb3I6IG1peGVkLCBpc0ZhdGFsOiBib29sZWFuKSA9PiB2b2lkO1xudHlwZSBGbjxBcmdzLCBSZXR1cm4+ID0gKC4uLkFyZ3MpID0+IFJldHVybjtcblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBlcnJvciBoYW5kbGVyIHRoYXQgaXMgY2FsbGVkIHdoZW4gd2UgZW5jb3VudGVyIGFuIGV4Y2VwdGlvblxuICogd2hlbiBsb2FkaW5nIGEgbW9kdWxlLiBUaGlzIHdpbGwgcmVwb3J0IGFueSBlcnJvcnMgZW5jb3VudGVyZWQgYmVmb3JlXG4gKiBFeGNlcHRpb25zTWFuYWdlciBpcyBjb25maWd1cmVkLlxuICovXG5sZXQgX2dsb2JhbEhhbmRsZXI6IEVycm9ySGFuZGxlciA9IGZ1bmN0aW9uIG9uRXJyb3IoXG4gIGU6IG1peGVkLFxuICBpc0ZhdGFsOiBib29sZWFuLFxuKSB7XG4gIHRocm93IGU7XG59O1xuXG4vKipcbiAqIFRoZSBwYXJ0aWN1bGFyIHJlcXVpcmUgcnVudGltZSB0aGF0IHdlIGFyZSB1c2luZyBsb29rcyBmb3IgYSBnbG9iYWxcbiAqIGBFcnJvclV0aWxzYCBvYmplY3QgYW5kIGlmIGl0IGV4aXN0cywgdGhlbiBpdCByZXF1aXJlcyBtb2R1bGVzIHdpdGggdGhlXG4gKiBlcnJvciBoYW5kbGVyIHNwZWNpZmllZCB2aWEgRXJyb3JVdGlscy5zZXRHbG9iYWxIYW5kbGVyIGJ5IGNhbGxpbmcgdGhlXG4gKiByZXF1aXJlIGZ1bmN0aW9uIHdpdGggYXBwbHlXaXRoR3VhcmQuIFNpbmNlIHRoZSByZXF1aXJlIG1vZHVsZSBpcyBsb2FkZWRcbiAqIGJlZm9yZSBhbnkgb2YgdGhlIG1vZHVsZXMsIHRoaXMgRXJyb3JVdGlscyBtdXN0IGJlIGRlZmluZWQgKGFuZCB0aGUgaGFuZGxlclxuICogc2V0KSBnbG9iYWxseSBiZWZvcmUgcmVxdWlyaW5nIGFueXRoaW5nLlxuICovXG5jb25zdCBFcnJvclV0aWxzID0ge1xuICBzZXRHbG9iYWxIYW5kbGVyKGZ1bjogRXJyb3JIYW5kbGVyKTogdm9pZCB7XG4gICAgX2dsb2JhbEhhbmRsZXIgPSBmdW47XG4gIH0sXG4gIGdldEdsb2JhbEhhbmRsZXIoKTogRXJyb3JIYW5kbGVyIHtcbiAgICByZXR1cm4gX2dsb2JhbEhhbmRsZXI7XG4gIH0sXG4gIHJlcG9ydEVycm9yKGVycm9yOiBtaXhlZCk6IHZvaWQge1xuICAgIF9nbG9iYWxIYW5kbGVyICYmIF9nbG9iYWxIYW5kbGVyKGVycm9yLCBmYWxzZSk7XG4gIH0sXG4gIHJlcG9ydEZhdGFsRXJyb3IoZXJyb3I6IG1peGVkKTogdm9pZCB7XG4gICAgLy8gTk9URTogVGhpcyBoYXMgYW4gdW50eXBlZCBjYWxsIHNpdGUgaW4gTWV0cm8uXG4gICAgX2dsb2JhbEhhbmRsZXIgJiYgX2dsb2JhbEhhbmRsZXIoZXJyb3IsIHRydWUpO1xuICB9LFxuICBhcHBseVdpdGhHdWFyZDxUQXJnczogJFJlYWRPbmx5QXJyYXk8bWl4ZWQ+LCBUT3V0PihcbiAgICBmdW46IEZuPFRBcmdzLCBUT3V0PixcbiAgICBjb250ZXh0PzogP21peGVkLFxuICAgIGFyZ3M/OiA/VEFyZ3MsXG4gICAgLy8gVW51c2VkLCBidXQgc29tZSBjb2RlIHN5bmNlZCBmcm9tIHd3dyBzZXRzIGl0IHRvIG51bGwuXG4gICAgdW51c2VkX29uRXJyb3I/OiBudWxsLFxuICAgIC8vIFNvbWUgY2FsbGVycyBwYXNzIGEgbmFtZSBoZXJlLCB3aGljaCB3ZSBpZ25vcmUuXG4gICAgdW51c2VkX25hbWU/OiA/c3RyaW5nLFxuICApOiA/VE91dCB7XG4gICAgdHJ5IHtcbiAgICAgIF9pbkd1YXJkKys7XG4gICAgICAvKiAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXSA6IFRPRE8gVDQ4MjA0NzQ1ICgxKSBhcHBseShjb250ZXh0LFxuICAgICAgICogbnVsbCkgaXMgZmluZS4gKDIpIGFycmF5IC0+IHJlc3QgYXJyYXkgc2hvdWxkIHdvcmsgKi9cbiAgICAgIC8qICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGVdIDogVE9ETyBUNDgyMDQ3NDUgKDEpIGFwcGx5KGNvbnRleHQsXG4gICAgICAgKiBudWxsKSBpcyBmaW5lLiAoMikgYXJyYXkgLT4gcmVzdCBhcnJheSBzaG91bGQgd29yayAqL1xuICAgICAgcmV0dXJuIGZ1bi5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBFcnJvclV0aWxzLnJlcG9ydEVycm9yKGUpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaW5HdWFyZC0tO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgYXBwbHlXaXRoR3VhcmRJZk5lZWRlZDxUQXJnczogJFJlYWRPbmx5QXJyYXk8bWl4ZWQ+LCBUT3V0PihcbiAgICBmdW46IEZuPFRBcmdzLCBUT3V0PixcbiAgICBjb250ZXh0PzogP21peGVkLFxuICAgIGFyZ3M/OiA/VEFyZ3MsXG4gICk6ID9UT3V0IHtcbiAgICBpZiAoRXJyb3JVdGlscy5pbkd1YXJkKCkpIHtcbiAgICAgIC8qICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdIDogVE9ETyBUNDgyMDQ3NDUgKDEpIGFwcGx5KGNvbnRleHQsXG4gICAgICAgKiBudWxsKSBpcyBmaW5lLiAoMikgYXJyYXkgLT4gcmVzdCBhcnJheSBzaG91bGQgd29yayAqL1xuICAgICAgLyogJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZV0gOiBUT0RPIFQ0ODIwNDc0NSAoMSkgYXBwbHkoY29udGV4dCxcbiAgICAgICAqIG51bGwpIGlzIGZpbmUuICgyKSBhcnJheSAtPiByZXN0IGFycmF5IHNob3VsZCB3b3JrICovXG4gICAgICByZXR1cm4gZnVuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBFcnJvclV0aWxzLmFwcGx5V2l0aEd1YXJkKGZ1biwgY29udGV4dCwgYXJncyk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBpbkd1YXJkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIV9pbkd1YXJkO1xuICB9LFxuICBndWFyZDxUQXJnczogJFJlYWRPbmx5QXJyYXk8bWl4ZWQ+LCBUT3V0PihcbiAgICBmdW46IEZuPFRBcmdzLCBUT3V0PixcbiAgICBuYW1lPzogP3N0cmluZyxcbiAgICBjb250ZXh0PzogP21peGVkLFxuICApOiA/KC4uLlRBcmdzKSA9PiA/VE91dCB7XG4gICAgLy8gVE9ETzogKG1vdGkpIFQ0ODIwNDc1MyBNYWtlIHN1cmUgdGhpcyB3YXJuaW5nIGlzIG5ldmVyIGhpdCBhbmQgcmVtb3ZlIGl0IC0gdHlwZXNcbiAgICAvLyBzaG91bGQgYmUgc3VmZmljaWVudC5cbiAgICBpZiAodHlwZW9mIGZ1biAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKCdBIGZ1bmN0aW9uIG11c3QgYmUgcGFzc2VkIHRvIEVycm9yVXRpbHMuZ3VhcmQsIGdvdCAnLCBmdW4pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGd1YXJkTmFtZSA9IG5hbWUgPz8gZnVuLm5hbWUgPz8gJzxnZW5lcmF0ZWQgZ3VhcmQ+JztcbiAgICBmdW5jdGlvbiBndWFyZGVkKC4uLmFyZ3M6IFRBcmdzKTogP1RPdXQge1xuICAgICAgcmV0dXJuIEVycm9yVXRpbHMuYXBwbHlXaXRoR3VhcmQoXG4gICAgICAgIGZ1bixcbiAgICAgICAgY29udGV4dCA/PyB0aGlzLFxuICAgICAgICBhcmdzLFxuICAgICAgICBudWxsLFxuICAgICAgICBndWFyZE5hbWUsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBndWFyZGVkO1xuICB9LFxufTtcblxuZ2xvYmFsLkVycm9yVXRpbHMgPSBFcnJvclV0aWxzO1xuXG5leHBvcnQgdHlwZSBFcnJvclV0aWxzVCA9IHR5cGVvZiBFcnJvclV0aWxzO1xuIl0sIm1hcHBpbmdzIjoiQUFXQSxJQUFJQSxRQUFRLEdBQUcsQ0FBZjs7QUFVQSxJQUFJQyxjQUE0QixHQUFHLFNBQVNDLE9BQVQsQ0FDakNDLENBRGlDLEVBRWpDQyxPQUZpQyxFQUdqQztFQUNBLE1BQU1ELENBQU47QUFDRCxDQUxEOztBQWVBLElBQU1FLFVBQVUsR0FBRztFQUNqQkMsZ0JBRGlCLDRCQUNBQyxHQURBLEVBQ3lCO0lBQ3hDTixjQUFjLEdBQUdNLEdBQWpCO0VBQ0QsQ0FIZ0I7RUFJakJDLGdCQUppQiw4QkFJZ0I7SUFDL0IsT0FBT1AsY0FBUDtFQUNELENBTmdCO0VBT2pCUSxXQVBpQix1QkFPTEMsS0FQSyxFQU9lO0lBQzlCVCxjQUFjLElBQUlBLGNBQWMsQ0FBQ1MsS0FBRCxFQUFRLEtBQVIsQ0FBaEM7RUFDRCxDQVRnQjtFQVVqQkMsZ0JBVmlCLDRCQVVBRCxLQVZBLEVBVW9CO0lBRW5DVCxjQUFjLElBQUlBLGNBQWMsQ0FBQ1MsS0FBRCxFQUFRLElBQVIsQ0FBaEM7RUFDRCxDQWJnQjtFQWNqQkUsY0FkaUIsMEJBZWZMLEdBZmUsRUFnQmZNLE9BaEJlLEVBaUJmQyxJQWpCZSxFQW1CZkMsY0FuQmUsRUFxQmZDLFdBckJlLEVBc0JSO0lBQ1AsSUFBSTtNQUNGaEIsUUFBUTtNQUtSLE9BQU9PLEdBQUcsQ0FBQ1UsS0FBSixDQUFVSixPQUFWLEVBQW1CQyxJQUFuQixDQUFQO0lBQ0QsQ0FQRCxDQU9FLE9BQU9YLENBQVAsRUFBVTtNQUNWRSxVQUFVLENBQUNJLFdBQVgsQ0FBdUJOLENBQXZCO0lBQ0QsQ0FURCxTQVNVO01BQ1JILFFBQVE7SUFDVDs7SUFDRCxPQUFPLElBQVA7RUFDRCxDQXBDZ0I7RUFxQ2pCa0Isc0JBckNpQixrQ0FzQ2ZYLEdBdENlLEVBdUNmTSxPQXZDZSxFQXdDZkMsSUF4Q2UsRUF5Q1I7SUFDUCxJQUFJVCxVQUFVLENBQUNjLE9BQVgsRUFBSixFQUEwQjtNQUt4QixPQUFPWixHQUFHLENBQUNVLEtBQUosQ0FBVUosT0FBVixFQUFtQkMsSUFBbkIsQ0FBUDtJQUNELENBTkQsTUFNTztNQUNMVCxVQUFVLENBQUNPLGNBQVgsQ0FBMEJMLEdBQTFCLEVBQStCTSxPQUEvQixFQUF3Q0MsSUFBeEM7SUFDRDs7SUFDRCxPQUFPLElBQVA7RUFDRCxDQXBEZ0I7RUFxRGpCSyxPQXJEaUIscUJBcURFO0lBQ2pCLE9BQU8sQ0FBQyxDQUFDbkIsUUFBVDtFQUNELENBdkRnQjtFQXdEakJvQixLQXhEaUIsaUJBeURmYixHQXpEZSxFQTBEZmMsSUExRGUsRUEyRGZSLE9BM0RlLEVBNERPO0lBQUE7O0lBR3RCLElBQUksT0FBT04sR0FBUCxLQUFlLFVBQW5CLEVBQStCO01BQzdCZSxPQUFPLENBQUNDLElBQVIsQ0FBYSxxREFBYixFQUFvRWhCLEdBQXBFO01BQ0EsT0FBTyxJQUFQO0lBQ0Q7O0lBQ0QsSUFBTWlCLFNBQVMsV0FBR0gsSUFBSCxXQUFHQSxJQUFILEdBQVdkLEdBQUcsQ0FBQ2MsSUFBZixtQkFBdUIsbUJBQXRDOztJQUNBLFNBQVNJLE9BQVQsR0FBd0M7TUFBQSxrQ0FBcEJYLElBQW9CO1FBQXBCQSxJQUFvQjtNQUFBOztNQUN0QyxPQUFPVCxVQUFVLENBQUNPLGNBQVgsQ0FDTEwsR0FESyxFQUVMTSxPQUZLLFdBRUxBLE9BRkssR0FFTSxJQUZOLEVBR0xDLElBSEssRUFJTCxJQUpLLEVBS0xVLFNBTEssQ0FBUDtJQU9EOztJQUVELE9BQU9DLE9BQVA7RUFDRDtBQS9FZ0IsQ0FBbkI7QUFrRkFDLE1BQU0sQ0FBQ3JCLFVBQVAsR0FBb0JBLFVBQXBCIn0=