1a788ba2abe120897d221e6fe95b6756
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var AnimatedInterpolation = require('./AnimatedInterpolation');

var AnimatedNode = require('./AnimatedNode');

var AnimatedValue = require('./AnimatedValue');

var AnimatedWithChildren = require('./AnimatedWithChildren');

var AnimatedDivision = function (_AnimatedWithChildren) {
  (0, _inherits2.default)(AnimatedDivision, _AnimatedWithChildren);

  var _super = _createSuper(AnimatedDivision);

  function AnimatedDivision(a, b) {
    var _this;

    (0, _classCallCheck2.default)(this, AnimatedDivision);
    _this = _super.call(this);
    _this._warnedAboutDivideByZero = false;

    if (b === 0 || b instanceof AnimatedNode && b.__getValue() === 0) {
      console.error('Detected potential division by zero in AnimatedDivision');
    }

    _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
    _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
    return _this;
  }

  (0, _createClass2.default)(AnimatedDivision, [{
    key: "__makeNative",
    value: function __makeNative(platformConfig) {
      this._a.__makeNative(platformConfig);

      this._b.__makeNative(platformConfig);

      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedDivision.prototype), "__makeNative", this).call(this, platformConfig);
    }
  }, {
    key: "__getValue",
    value: function __getValue() {
      var a = this._a.__getValue();

      var b = this._b.__getValue();

      if (b === 0) {
        if (!this._warnedAboutDivideByZero) {
          console.error('Detected division by zero in AnimatedDivision');
          this._warnedAboutDivideByZero = true;
        }

        return 0;
      }

      this._warnedAboutDivideByZero = false;
      return a / b;
    }
  }, {
    key: "interpolate",
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: "__attach",
    value: function __attach() {
      this._a.__addChild(this);

      this._b.__addChild(this);
    }
  }, {
    key: "__detach",
    value: function __detach() {
      this._a.__removeChild(this);

      this._b.__removeChild(this);

      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedDivision.prototype), "__detach", this).call(this);
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      return {
        type: 'division',
        input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
      };
    }
  }]);
  return AnimatedDivision;
}(AnimatedWithChildren);

module.exports = AnimatedDivision;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBbmltYXRlZEludGVycG9sYXRpb24iLCJyZXF1aXJlIiwiQW5pbWF0ZWROb2RlIiwiQW5pbWF0ZWRWYWx1ZSIsIkFuaW1hdGVkV2l0aENoaWxkcmVuIiwiQW5pbWF0ZWREaXZpc2lvbiIsImEiLCJiIiwiX3dhcm5lZEFib3V0RGl2aWRlQnlaZXJvIiwiX19nZXRWYWx1ZSIsImNvbnNvbGUiLCJlcnJvciIsIl9hIiwiX2IiLCJwbGF0Zm9ybUNvbmZpZyIsIl9fbWFrZU5hdGl2ZSIsImNvbmZpZyIsIl9fYWRkQ2hpbGQiLCJfX3JlbW92ZUNoaWxkIiwidHlwZSIsImlucHV0IiwiX19nZXROYXRpdmVUYWciLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQW5pbWF0ZWREaXZpc2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFuaW1hdGVkSW50ZXJwb2xhdGlvbiA9IHJlcXVpcmUoJy4vQW5pbWF0ZWRJbnRlcnBvbGF0aW9uJyk7XG5jb25zdCBBbmltYXRlZE5vZGUgPSByZXF1aXJlKCcuL0FuaW1hdGVkTm9kZScpO1xuY29uc3QgQW5pbWF0ZWRWYWx1ZSA9IHJlcXVpcmUoJy4vQW5pbWF0ZWRWYWx1ZScpO1xuY29uc3QgQW5pbWF0ZWRXaXRoQ2hpbGRyZW4gPSByZXF1aXJlKCcuL0FuaW1hdGVkV2l0aENoaWxkcmVuJyk7XG5cbmltcG9ydCB0eXBlIHtJbnRlcnBvbGF0aW9uQ29uZmlnVHlwZX0gZnJvbSAnLi9BbmltYXRlZEludGVycG9sYXRpb24nO1xuaW1wb3J0IHR5cGUge1BsYXRmb3JtQ29uZmlnfSBmcm9tICcuLi9BbmltYXRlZFBsYXRmb3JtQ29uZmlnJztcblxuY2xhc3MgQW5pbWF0ZWREaXZpc2lvbiBleHRlbmRzIEFuaW1hdGVkV2l0aENoaWxkcmVuIHtcbiAgX2E6IEFuaW1hdGVkTm9kZTtcbiAgX2I6IEFuaW1hdGVkTm9kZTtcbiAgX3dhcm5lZEFib3V0RGl2aWRlQnlaZXJvOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoYTogQW5pbWF0ZWROb2RlIHwgbnVtYmVyLCBiOiBBbmltYXRlZE5vZGUgfCBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmIChiID09PSAwIHx8IChiIGluc3RhbmNlb2YgQW5pbWF0ZWROb2RlICYmIGIuX19nZXRWYWx1ZSgpID09PSAwKSkge1xuICAgICAgY29uc29sZS5lcnJvcignRGV0ZWN0ZWQgcG90ZW50aWFsIGRpdmlzaW9uIGJ5IHplcm8gaW4gQW5pbWF0ZWREaXZpc2lvbicpO1xuICAgIH1cbiAgICB0aGlzLl9hID0gdHlwZW9mIGEgPT09ICdudW1iZXInID8gbmV3IEFuaW1hdGVkVmFsdWUoYSkgOiBhO1xuICAgIHRoaXMuX2IgPSB0eXBlb2YgYiA9PT0gJ251bWJlcicgPyBuZXcgQW5pbWF0ZWRWYWx1ZShiKSA6IGI7XG4gIH1cblxuICBfX21ha2VOYXRpdmUocGxhdGZvcm1Db25maWc6ID9QbGF0Zm9ybUNvbmZpZykge1xuICAgIHRoaXMuX2EuX19tYWtlTmF0aXZlKHBsYXRmb3JtQ29uZmlnKTtcbiAgICB0aGlzLl9iLl9fbWFrZU5hdGl2ZShwbGF0Zm9ybUNvbmZpZyk7XG4gICAgc3VwZXIuX19tYWtlTmF0aXZlKHBsYXRmb3JtQ29uZmlnKTtcbiAgfVxuXG4gIF9fZ2V0VmFsdWUoKTogbnVtYmVyIHtcbiAgICBjb25zdCBhID0gdGhpcy5fYS5fX2dldFZhbHVlKCk7XG4gICAgY29uc3QgYiA9IHRoaXMuX2IuX19nZXRWYWx1ZSgpO1xuICAgIGlmIChiID09PSAwKSB7XG4gICAgICAvLyBQcmV2ZW50IHNwYW1taW5nIHRoZSBjb25zb2xlL0xvZ0JveFxuICAgICAgaWYgKCF0aGlzLl93YXJuZWRBYm91dERpdmlkZUJ5WmVybykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdEZXRlY3RlZCBkaXZpc2lvbiBieSB6ZXJvIGluIEFuaW1hdGVkRGl2aXNpb24nKTtcbiAgICAgICAgdGhpcy5fd2FybmVkQWJvdXREaXZpZGVCeVplcm8gPSB0cnVlO1xuICAgICAgfVxuICAgICAgLy8gUGFzc2luZyBpbmZpbml0eS9OYU4gdG8gRmFicmljIHdpbGwgY2F1c2UgYSBuYXRpdmUgY3Jhc2hcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICB0aGlzLl93YXJuZWRBYm91dERpdmlkZUJ5WmVybyA9IGZhbHNlO1xuICAgIHJldHVybiBhIC8gYjtcbiAgfVxuXG4gIGludGVycG9sYXRlKGNvbmZpZzogSW50ZXJwb2xhdGlvbkNvbmZpZ1R5cGUpOiBBbmltYXRlZEludGVycG9sYXRpb24ge1xuICAgIHJldHVybiBuZXcgQW5pbWF0ZWRJbnRlcnBvbGF0aW9uKHRoaXMsIGNvbmZpZyk7XG4gIH1cblxuICBfX2F0dGFjaCgpOiB2b2lkIHtcbiAgICB0aGlzLl9hLl9fYWRkQ2hpbGQodGhpcyk7XG4gICAgdGhpcy5fYi5fX2FkZENoaWxkKHRoaXMpO1xuICB9XG5cbiAgX19kZXRhY2goKTogdm9pZCB7XG4gICAgdGhpcy5fYS5fX3JlbW92ZUNoaWxkKHRoaXMpO1xuICAgIHRoaXMuX2IuX19yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICBzdXBlci5fX2RldGFjaCgpO1xuICB9XG5cbiAgX19nZXROYXRpdmVDb25maWcoKTogYW55IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ2RpdmlzaW9uJyxcbiAgICAgIGlucHV0OiBbdGhpcy5fYS5fX2dldE5hdGl2ZVRhZygpLCB0aGlzLl9iLl9fZ2V0TmF0aXZlVGFnKCldLFxuICAgIH07XG4gIH1c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