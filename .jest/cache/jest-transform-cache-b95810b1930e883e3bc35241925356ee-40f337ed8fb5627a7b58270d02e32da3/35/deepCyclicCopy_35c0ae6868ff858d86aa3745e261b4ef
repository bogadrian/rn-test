0649d86c16f554c202f5427fbf105d58
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = deepCyclicCopy;
var EMPTY = new Set();

function deepCyclicCopy(value) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    blacklist: EMPTY,
    keepPrototype: false
  };
  var cycles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new WeakMap();

  if (typeof value !== 'object' || value === null || Buffer.isBuffer(value)) {
    return value;
  } else if (cycles.has(value)) {
    return cycles.get(value);
  } else if (Array.isArray(value)) {
    return deepCyclicCopyArray(value, options, cycles);
  } else {
    return deepCyclicCopyObject(value, options, cycles);
  }
}

function deepCyclicCopyObject(object, options, cycles) {
  var newObject = options.keepPrototype ? Object.create(Object.getPrototypeOf(object)) : {};
  var descriptors = Object.getOwnPropertyDescriptors(object);
  cycles.set(object, newObject);
  Object.keys(descriptors).forEach(function (key) {
    if (options.blacklist && options.blacklist.has(key)) {
      delete descriptors[key];
      return;
    }

    var descriptor = descriptors[key];

    if (typeof descriptor.value !== 'undefined') {
      descriptor.value = deepCyclicCopy(descriptor.value, {
        blacklist: EMPTY,
        keepPrototype: options.keepPrototype
      }, cycles);
    }

    descriptor.configurable = true;
  });
  return Object.defineProperties(newObject, descriptors);
}

function deepCyclicCopyArray(array, options, cycles) {
  var newArray = options.keepPrototype ? new (Object.getPrototypeOf(array).constructor)(array.length) : [];
  var length = array.length;
  cycles.set(array, newArray);

  for (var i = 0; i < length; i++) {
    newArray[i] = deepCyclicCopy(array[i], {
      blacklist: EMPTY,
      keepPrototype: options.keepPrototype
    }, cycles);
  }

  return newArray;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJkZWVwQ3ljbGljQ29weSIsIkVNUFRZIiwiU2V0Iiwib3B0aW9ucyIsImJsYWNrbGlzdCIsImtlZXBQcm90b3R5cGUiLCJjeWNsZXMiLCJXZWFrTWFwIiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJoYXMiLCJnZXQiLCJBcnJheSIsImlzQXJyYXkiLCJkZWVwQ3ljbGljQ29weUFycmF5IiwiZGVlcEN5Y2xpY0NvcHlPYmplY3QiLCJvYmplY3QiLCJuZXdPYmplY3QiLCJjcmVhdGUiLCJnZXRQcm90b3R5cGVPZiIsImRlc2NyaXB0b3JzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsInNldCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwiZGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsImRlZmluZVByb3BlcnRpZXMiLCJhcnJheSIsIm5ld0FycmF5IiwiY29uc3RydWN0b3IiLCJsZW5ndGgiLCJpIl0sInNvdXJjZXMiOlsiZGVlcEN5Y2xpY0NvcHkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZXBDeWNsaWNDb3B5O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5jb25zdCBFTVBUWSA9IG5ldyBTZXQoKTtcblxuZnVuY3Rpb24gZGVlcEN5Y2xpY0NvcHkoXG4gIHZhbHVlLFxuICBvcHRpb25zID0ge1xuICAgIGJsYWNrbGlzdDogRU1QVFksXG4gICAga2VlcFByb3RvdHlwZTogZmFsc2VcbiAgfSxcbiAgY3ljbGVzID0gbmV3IFdlYWtNYXAoKVxuKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IHZhbHVlID09PSBudWxsIHx8IEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0gZWxzZSBpZiAoY3ljbGVzLmhhcyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gY3ljbGVzLmdldCh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZGVlcEN5Y2xpY0NvcHlBcnJheSh2YWx1ZSwgb3B0aW9ucywgY3ljbGVzKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZGVlcEN5Y2xpY0NvcHlPYmplY3QodmFsdWUsIG9wdGlvbnMsIGN5Y2xlcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVlcEN5Y2xpY0NvcHlPYmplY3Qob2JqZWN0LCBvcHRpb25zLCBjeWNsZXMpIHtcbiAgY29uc3QgbmV3T2JqZWN0ID0gb3B0aW9ucy5rZWVwUHJvdG90eXBlXG4gICAgPyBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpKVxuICAgIDoge307XG4gIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KTtcbiAgY3ljbGVzLnNldChvYmplY3QsIG5ld09iamVjdCk7XG4gIE9iamVjdC5rZXlzKGRlc2NyaXB0b3JzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgaWYgKG9wdGlvbnMuYmxhY2tsaXN0ICYmIG9wdGlvbnMuYmxhY2tsaXN0LmhhcyhrZXkpKSB7XG4gICAgICBkZWxldGUgZGVzY3JpcHRvcnNba2V5XTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkZXNjcmlwdG9yID0gZGVzY3JpcHRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgZGVzY3JpcHRvci52YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBkZWVwQ3ljbGljQ29weShcbiAgICAgICAgZGVzY3JpcHRvci52YWx1ZSxcbiAgICAgICAge1xuICAgICAgICAgIGJsYWNrbGlzdDogRU1QVFksXG4gICAgICAgICAga2VlcFByb3RvdHlwZTogb3B0aW9ucy5rZWVwUHJvdG90eXBlXG4gICAgICAgIH0sXG4gICAgICAgIGN5Y2xlc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gIH0pO1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMobmV3T2JqZWN0LCBkZXNjcmlwdG9ycyk7XG59XG5cbmZ1bmN0aW9uIGRlZXBDeWNsaWNDb3B5QXJyYXkoYXJyYXksIG9wdGlvbnMsIGN5Y2xlcykge1xuICBjb25zdCBuZXdBcnJheSA9IG9wdGlvbnMua2VlcFByb3RvdHlwZVxuICAgID8gbmV3IChPYmplY3QuZ2V0UHJvdG90eXBlT2YoYXJyYXkpLmNvbnN0cnVjdG9yKShhcnJheS5sZW5ndGgpXG4gICAgOiBbXTtcbiAgY29uc3QgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICBjeWNsZXMuc2V0KGFycmF5LCBuZXdBcnJheSk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIG5ld0FycmF5W2ldID0gZGVlcEN5Y2xpY0NvcHkoXG4gICAgICBhcnJheVtpXSxcbiAgICAgIHtcbiAgICAgICAgYmxhY2tsaXN0OiBFTVBUWSxcbiAgICAgICAga2VlcFByb3RvdHlwZTogb3B0aW9ucy5rZWVwUHJvdG90eXBlXG4gICAgICB9LFxuICAgICAgY3ljbGVzXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBuZXdBcnJheTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFB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