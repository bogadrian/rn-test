db0060852ed7b517b8276f5157459461
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function _jsdom() {
  var data = require('jsdom');

  _jsdom = function _jsdom() {
    return data;
  };

  return data;
}

function _fakeTimers() {
  var data = require('@jest/fake-timers');

  _fakeTimers = function _fakeTimers() {
    return data;
  };

  return data;
}

function _jestMock() {
  var data = require('jest-mock');

  _jestMock = function _jestMock() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var JSDOMEnvironment = function () {
  function JSDOMEnvironment(config, options) {
    (0, _classCallCheck2.default)(this, JSDOMEnvironment);

    _defineProperty(this, 'dom', void 0);

    _defineProperty(this, 'fakeTimers', void 0);

    _defineProperty(this, 'fakeTimersModern', void 0);

    _defineProperty(this, 'global', void 0);

    _defineProperty(this, 'errorEventListener', void 0);

    _defineProperty(this, 'moduleMocker', void 0);

    this.dom = new (_jsdom().JSDOM)(typeof config.testEnvironmentOptions.html === 'string' ? config.testEnvironmentOptions.html : '<!DOCTYPE html>', (0, _extends2.default)({
      pretendToBeVisual: true,
      resources: typeof config.testEnvironmentOptions.userAgent === 'string' ? new (_jsdom().ResourceLoader)({
        userAgent: config.testEnvironmentOptions.userAgent
      }) : undefined,
      runScripts: 'dangerously',
      url: config.testURL,
      virtualConsole: new (_jsdom().VirtualConsole)().sendTo((options === null || options === void 0 ? void 0 : options.console) || console)
    }, config.testEnvironmentOptions));
    var global = this.global = this.dom.window.document.defaultView;

    if (!global) {
      throw new Error('JSDOM did not return a Window object');
    }

    global.global = global;
    this.global.Error.stackTraceLimit = 100;
    (0, _jestUtil().installCommonGlobals)(global, config.globals);
    global.Buffer = Buffer;

    this.errorEventListener = function (event) {
      if (userErrorListenerCount === 0 && event.error) {
        process.emit('uncaughtException', event.error);
      }
    };

    global.addEventListener('error', this.errorEventListener);
    var originalAddListener = global.addEventListener;
    var originalRemoveListener = global.removeEventListener;
    var userErrorListenerCount = 0;

    global.addEventListener = function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (args[0] === 'error') {
        userErrorListenerCount++;
      }

      return originalAddListener.apply(this, args);
    };

    global.removeEventListener = function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      if (args[0] === 'error') {
        userErrorListenerCount--;
      }

      return originalRemoveListener.apply(this, args);
    };

    this.moduleMocker = new (_jestMock().ModuleMocker)(global);
    var timerConfig = {
      idToRef: function idToRef(id) {
        return id;
      },
      refToId: function refToId(ref) {
        return ref;
      }
    };
    this.fakeTimers = new (_fakeTimers().LegacyFakeTimers)({
      config: config,
      global: global,
      moduleMocker: this.moduleMocker,
      timerConfig: timerConfig
    });
    this.fakeTimersModern = new (_fakeTimers().ModernFakeTimers)({
      config: config,
      global: global
    });
  }

  (0, _createClass2.default)(JSDOMEnvironment, [{
    key: "setup",
    value: function setup() {
      return _regenerator.default.async(function setup$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case "end":
              return _context.stop();
          }
        }
      }, null, null, null, Promise);
    }
  }, {
    key: "teardown",
    value: function teardown() {
      return _regenerator.default.async(function teardown$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (this.fakeTimers) {
                this.fakeTimers.dispose();
              }

              if (this.fakeTimersModern) {
                this.fakeTimersModern.dispose();
              }

              if (this.global) {
                if (this.errorEventListener) {
                  this.global.removeEventListener('error', this.errorEventListener);
                }

                this.global.close();
                Object.defineProperty(this.global, 'document', {
                  value: null
                });
              }

              this.errorEventListener = null;
              this.global = null;
              this.dom = null;
              this.fakeTimers = null;
              this.fakeTimersModern = null;

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }, {
    key: "getVmContext",
    value: function getVmContext() {
      if (this.dom) {
        return this.dom.getInternalVMContext();
      }

      return null;
    }
  }]);
  return JSDOMEnvironment;
}();

module.exports = JSDOMEnvironment;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,