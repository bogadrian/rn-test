3d59736f81da503ddfb43e7eb9c802c1
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var Dimensions = require('./Dimensions');

var PixelRatio = function () {
  function PixelRatio() {
    (0, _classCallCheck2.default)(this, PixelRatio);
  }

  (0, _createClass2.default)(PixelRatio, null, [{
    key: "get",
    value: function get() {
      return Dimensions.get('window').scale;
    }
  }, {
    key: "getFontScale",
    value: function getFontScale() {
      return Dimensions.get('window').fontScale || PixelRatio.get();
    }
  }, {
    key: "getPixelSizeForLayoutSize",
    value: function getPixelSizeForLayoutSize(layoutSize) {
      return Math.round(layoutSize * PixelRatio.get());
    }
  }, {
    key: "roundToNearestPixel",
    value: function roundToNearestPixel(layoutSize) {
      var ratio = PixelRatio.get();
      return Math.round(layoutSize * ratio) / ratio;
    }
  }, {
    key: "startDetecting",
    value: function startDetecting() {}
  }]);
  return PixelRatio;
}();

module.exports = PixelRatio;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb25zIiwicmVxdWlyZSIsIlBpeGVsUmF0aW8iLCJnZXQiLCJzY2FsZSIsImZvbnRTY2FsZSIsImxheW91dFNpemUiLCJNYXRoIiwicm91bmQiLCJyYXRpbyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJQaXhlbFJhdGlvLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IERpbWVuc2lvbnMgPSByZXF1aXJlKCcuL0RpbWVuc2lvbnMnKTtcblxuLyoqXG4gKiBQaXhlbFJhdGlvIGNsYXNzIGdpdmVzIGFjY2VzcyB0byB0aGUgZGV2aWNlIHBpeGVsIGRlbnNpdHkuXG4gKlxuICogIyMgRmV0Y2hpbmcgYSBjb3JyZWN0bHkgc2l6ZWQgaW1hZ2VcbiAqXG4gKiBZb3Ugc2hvdWxkIGdldCBhIGhpZ2hlciByZXNvbHV0aW9uIGltYWdlIGlmIHlvdSBhcmUgb24gYSBoaWdoIHBpeGVsIGRlbnNpdHlcbiAqIGRldmljZS4gQSBnb29kIHJ1bGUgb2YgdGh1bWIgaXMgdG8gbXVsdGlwbHkgdGhlIHNpemUgb2YgdGhlIGltYWdlIHlvdSBkaXNwbGF5XG4gKiBieSB0aGUgcGl4ZWwgcmF0aW8uXG4gKlxuICogYGBgXG4gKiB2YXIgaW1hZ2UgPSBnZXRJbWFnZSh7XG4gKiAgIHdpZHRoOiBQaXhlbFJhdGlvLmdldFBpeGVsU2l6ZUZvckxheW91dFNpemUoMjAwKSxcbiAqICAgaGVpZ2h0OiBQaXhlbFJhdGlvLmdldFBpeGVsU2l6ZUZvckxheW91dFNpemUoMTAwKSxcbiAqIH0pO1xuICogPEltYWdlIHNvdXJjZT17aW1hZ2V9IHN0eWxlPXt7d2lkdGg6IDIwMCwgaGVpZ2h0OiAxMDB9fSAvPlxuICogYGBgXG4gKlxuICogIyMgUGl4ZWwgZ3JpZCBzbmFwcGluZ1xuICpcbiAqIEluIGlPUywgeW91IGNhbiBzcGVjaWZ5IHBvc2l0aW9ucyBhbmQgZGltZW5zaW9ucyBmb3IgZWxlbWVudHMgd2l0aCBhcmJpdHJhcnlcbiAqIHByZWNpc2lvbiwgZm9yIGV4YW1wbGUgMjkuNjc0ODI1LiBCdXQsIHVsdGltYXRlbHkgdGhlIHBoeXNpY2FsIGRpc3BsYXkgb25seVxuICogaGF2ZSBhIGZpeGVkIG51bWJlciBvZiBwaXhlbHMsIGZvciBleGFtcGxlIDY0MMOXOTYwIGZvciBpUGhvbmUgNCBvciA3NTDDlzEzMzRcbiAqIGZvciBpUGhvbmUgNi4gaU9TIHRyaWVzIHRvIGJlIGFzIGZhaXRoZnVsIGFzIHBvc3NpYmxlIHRvIHRoZSB1c2VyIHZhbHVlIGJ5XG4gKiBzcHJlYWRpbmcgb25lIG9yaWdpbmFsIHBpeGVsIGludG8gbXVsdGlwbGUgb25lcyB0byB0cmljayB0aGUgZXllLiBUaGVcbiAqIGRvd25zaWRlIG9mIHRoaXMgdGVjaG5pcXVlIGlzIHRoYXQgaXQgbWFrZXMgdGhlIHJlc3VsdGluZyBlbGVtZW50IGxvb2tcbiAqIGJsdXJyeS5cbiAqXG4gKiBJbiBwcmFjdGljZSwgd2UgZm91bmQgb3V0IHRoYXQgZGV2ZWxvcGVycyBkbyBub3Qgd2FudCB0aGlzIGZlYXR1cmUgYW5kIHRoZXlcbiAqIGhhdmUgdG8gd29yayBhcm91bmQgaXQgYnkgZG9pbmcgbWFudWFsIHJvdW5kaW5nIGluIG9yZGVyIHRvIGF2b2lkIGhhdmluZ1xuICogYmx1cnJ5IGVsZW1lbnRzLiBJbiBSZWFjdCBOYXRpdmUsIHdlIGFyZSByb3VuZGluZyBhbGwgdGhlIHBpeGVsc1xuICogYXV0b21hdGljYWxseS5cbiAqXG4gKiBXZSBoYXZlIHRvIGJlIGNhcmVmdWwgd2hlbiB0byBkbyB0aGlzIHJvdW5kaW5nLiBZb3UgbmV2ZXIgd2FudCB0byB3b3JrIHdpdGhcbiAqIHJvdW5kZWQgYW5kIHVucm91bmRlZCB2YWx1ZXMgYXQgdGhlIHNhbWUgdGltZSBhcyB5b3UncmUgZ29pbmcgdG8gYWNjdW11bGF0ZVxuICogcm91bmRpbmcgZXJyb3JzLiBIYXZpbmcgZXZlbiBvbmUgcm91bmRpbmcgZXJyb3IgaXMgZGVhZGx5IGJlY2F1c2UgYSBvbmVcbiAqIHBpeGVsIGJvcmRlciBtYXkgdmFuaXNoIG9yIGJlIHR3aWNlIGFzIGJpZy5cbiAqXG4gKiBJbiBSZWFjdCBOYXRpdmUsIGV2ZXJ5dGhpbmcgaW4gSmF2YVNjcmlwdCBhbmQgd2l0aGluIHRoZSBsYXlvdXQgZW5naW5lIHdvcmtzXG4gKiB3aXRoIGFyYml0cmFyeSBwcmVjaXNpb24gbnVtYmVycy4gSXQncyBvbmx5IHdoZW4gd2Ugc2V0IHRoZSBwb3NpdGlvbiBhbmRcbiAqIGRpbWVuc2lvbnMgb2YgdGhlIG5hdGl2ZSBlbGVtZW50IG9uIHRoZSBtYWluIHRocmVhZCB0aGF0IHdlIHJvdW5kLiBBbHNvLFxuICogcm91bmRpbmcgaXMgZG9uZSByZWxhdGl2ZSB0byB0aGUgcm9vdCByYXRoZXIgdGhhbiB0aGUgcGFyZW50LCBhZ2FpbiB0byBhdm9pZFxuICogYWNjdW11bGF0aW5nIHJvdW5kaW5nIGVycm9ycy5cbiAqXG4gKi9cbmNsYXNzIFBpeGVsUmF0aW8ge1xuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGV2aWNlIHBpeGVsIGRlbnNpdHkuIFNvbWUgZXhhbXBsZXM6XG4gICAqXG4gICAqICAgLSBQaXhlbFJhdGlvLmdldCgpID09PSAxXG4gICAqICAgICAtIG1kcGkgQW5kcm9pZCBkZXZpY2VzICgxNjAgZHBpKVxuICAgKiAgIC0gUGl4ZWxSYXRpby5nZXQoKSA9PT0gMS41XG4gICAqICAgICAtIGhkcGkgQW5kcm9pZCBkZXZpY2VzICgyNDAgZHBpKVxuICAgKiAgIC0gUGl4ZWxSYXRpby5nZXQoKSA9PT0gMlxuICAgKiAgICAgLSBpUGhvbmUgNCwgNFNcbiAgICogICAgIC0gaVBob25lIDUsIDVjLCA1c1xuICAgKiAgICAgLSBpUGhvbmUgNlxuICAgKiAgICAgLSBpUGhvbmUgN1xuICAgKiAgICAgLSBpUGhvbmUgOFxuICAgKiAgICAgLSBpUGhvbmUgU0VcbiAgICogICAgIC0geGhkcGkgQW5kcm9pZCBkZXZpY2VzICgzMjAgZHBpKVxuICAgKiAgIC0gUGl4ZWxSYXRpby5nZXQoKSA9PT0gM1xuICAgKiAgICAgLSBpUGhvbmUgNiBQbHVzXG4gICAqICAgICAtIGlQaG9uZSA3IFBsdXNcbiAgICogICAgIC0gaVBob25lIDggUGx1c1xuICAgKiAgICAgLSBpUGhvbmUgWFxuICAgKiAgICAgLSB4eGhkcGkgQW5kcm9pZCBkZXZpY2VzICg0ODAgZHBpKVxuICAgKiAgIC0gUGl4ZWxSYXRpby5nZXQoKSA9PT0gMy41XG4gICAqICAgICAtIE5leHVzIDZcbiAgICovXG4gIHN0YXRpYyBnZXQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gRGltZW5zaW9ucy5nZXQoJ3dpbmRvdycpLnNjYWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHNjYWxpbmcgZmFjdG9yIGZvciBmb250IHNpemVzLiBUaGlzIGlzIHRoZSByYXRpbyB0aGF0IGlzIHVzZWQgdG8gY2FsY3VsYXRlIHRoZVxuICAgKiBhYnNvbHV0ZSBmb250IHNpemUsIHNvIGFueSBlbGVtZW50cyB0aGF0IGhlYXZpbHkgZGVwZW5kIG9uIHRoYXQgc2hvdWxkIHVzZSB0aGlzIHRvIGRvXG4gICAqIGNhbGN1bGF0aW9ucy5cbiAgICpcbiAgICogSWYgYSBmb250IHNjYWxlIGlzIG5vdCBzZXQsIHRoaXMgcmV0dXJucyB0aGUgZGV2aWNlIHBpeGVsIHJhdGlvLlxuICAgKlxuICAgKiBUaGlzIHJlZmxlY3RzIHRoZSB1c2VyIHByZWZlcmVuY2Ugc2V0IGluOlxuICAgKiAgLSBTZXR0aW5ncyA+IERpc3BsYXkgPiBGb250IHNpemUgb24gQW5kcm9pZCxcbiAgICogIC0gU2V0dGluZ3MgPiBEaXNwbGF5ICYgQnJpZ2h0bmVzcyA+IFRleHQgU2l6ZSBvbiBpT1MuXG4gICAqL1xuICBzdGF0aWMgZ2V0Rm9udFNjYWxlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIERpbWVuc2lvbnMuZ2V0KCd3aW5kb3cnKS5mb250U2NhbGUgfHwgUGl4ZWxSYXRpby5nZXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIGxheW91dCBzaXplIChkcCkgdG8gcGl4ZWwgc2l6ZSAocHgpLlxuICAgKlxuICAgKiBHdWFyYW50ZWVkIHRvIHJldHVybiBhbiBpbnRlZ2VyIG51bWJlci5cbiAgICovXG4gIHN0YXRpYyBnZXRQaXhlbFNpemVGb3JMYXlvdXRTaXplKGxheW91dFNpemU6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobGF5b3V0U2l6ZSAqIFBpeGVsUmF0aW8uZ2V0KCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJvdW5kcyBhIGxheW91dCBzaXplIChkcCkgdG8gdGhlIG5lYXJlc3QgbGF5b3V0IHNpemUgdGhhdCBjb3JyZXNwb25kcyB0b1xuICAgKiBhbiBpbnRlZ2VyIG51bWJlciBvZiBwaXhlbHMuIEZvciBleGFtcGxlLCBvbiBhIGRldmljZSB3aXRoIGEgUGl4ZWxSYXRpb1xuICAgKiBvZiAzLCBgUGl4ZWxSYXRpby5yb3VuZFRvTmVhcmVzdFBpeGVsKDguNCkgPSA4LjMzYCwgd2hpY2ggY29ycmVzcG9uZHMgdG9cbiAgICogZXhhY3RseSAoOC4zMyAqIDMpID0gMjUgcGl4ZWxzLlxuICAgKi9cbiAgc3RhdGljIHJvdW5kVG9OZWFyZXN0UGl4ZWwobGF5b3V0U2l6ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCByYXRpbyA9IFBpeGVsUmF0aW8uZ2V0KCk7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobGF5b3V0U2l6ZSAqIHJhdGlvKSAvIHJhdGlvO1xuICB9XG5cbiAgLy8gTm8tb3AgZm9yIGlPUywgYnV0IHVzZWQgb24gdGhlIHdlYi4gU2hvdWxkIG5vdCBiZSBkb2N1bWVudGVkLlxuICBzdGF0aWMgc3RhcnREZXRlY3RpbmcoKSB7fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBpeGVsUmF0aW87XG4iXSwibWFwcGluZ3MiOiJBQVVBOzs7Ozs7OztBQUVBLElBQU1BLFVBQVUsR0FBR0MsT0FBTyxDQUFDLGNBQUQsQ0FBMUI7O0lBOENNQyxVOzs7Ozs7O1dBeUJKLGVBQXFCO01BQ25CLE9BQU9GLFVBQVUsQ0FBQ0csR0FBWCxDQUFlLFFBQWYsRUFBeUJDLEtBQWhDO0lBQ0Q7OztXQWFELHdCQUE4QjtNQUM1QixPQUFPSixVQUFVLENBQUNHLEdBQVgsQ0FBZSxRQUFmLEVBQXlCRSxTQUF6QixJQUFzQ0gsVUFBVSxDQUFDQyxHQUFYLEVBQTdDO0lBQ0Q7OztXQU9ELG1DQUFpQ0csVUFBakMsRUFBNkQ7TUFDM0QsT0FBT0MsSUFBSSxDQUFDQyxLQUFMLENBQVdGLFVBQVUsR0FBR0osVUFBVSxDQUFDQyxHQUFYLEVBQXhCLENBQVA7SUFDRDs7O1dBUUQsNkJBQTJCRyxVQUEzQixFQUF1RDtNQUNyRCxJQUFNRyxLQUFLLEdBQUdQLFVBQVUsQ0FBQ0MsR0FBWCxFQUFkO01BQ0EsT0FBT0ksSUFBSSxDQUFDQyxLQUFMLENBQVdGLFVBQVUsR0FBR0csS0FBeEIsSUFBaUNBLEtBQXhDO0lBQ0Q7OztXQUdELDBCQUF3QixDQUFFOzs7OztBQUc1QkMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCVCxVQUFqQiJ9